{"version":3,"sources":["js_modules/vectorMath.js"],"names":[],"mappings":"AAAA;;;;;;;;;;;;;;;;EAgBE;AAEF;;;;;GAKG;AAEH;;;IAGI;AACJ,MAAM,UAAU,SAAS,CAAC,MAAM;IAC5B,OAAO,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,GAAC,MAAM,CAAC,CAAC,GAAC,MAAM,CAAC,CAAC,GAAC,MAAM,CAAC,CAAC,GAAC,MAAM,CAAC,CAAC,GAAC,MAAM,CAAC,CAAC,CAAC,CAAC;AAC5E,CAAC;AAED;;;IAGI;AACJ,MAAM,UAAU,gBAAgB,CAAC,MAAM;IACnC,OAAO,MAAM,CAAC,CAAC,GAAC,MAAM,CAAC,CAAC,GAAC,MAAM,CAAC,CAAC,GAAC,MAAM,CAAC,CAAC,GAAC,MAAM,CAAC,CAAC,GAAC,MAAM,CAAC,CAAC,CAAC;AACjE,CAAC;AAED;;;IAGI;AACJ,MAAM,UAAU,SAAS,CAAC,MAAM,EAAE,MAAM;IACpC,MAAM,YAAY,GAAG,SAAS,CAAC,MAAM,CAAC,CAAC;IACvC,MAAM,KAAK,GAAG,MAAM,GAAC,YAAY,CAAC;IAClC,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC;IAClB,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC;IAClB,MAAM,CAAC,CAAC,IAAI,KAAK,CAAC;IAElB,OAAO,MAAM,CAAA;AACjB,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,GAAG,CAAC,OAAO,EAAC,OAAO;IAC/B,OAAO,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,CAAC,EAAC,CAAC;AAC/E,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,GAAG,CAAC,OAAO,EAAC,OAAO;IAC/B,OAAO,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,CAAC,EAAC,CAAC;AAC/E,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,QAAQ,CAAC,MAAM,EAAC,MAAM;IAClC,OAAO,EAAC,CAAC,EAAC,MAAM,CAAC,CAAC,GAAC,MAAM,EAAC,CAAC,EAAC,MAAM,CAAC,CAAC,GAAC,MAAM,EAAC,CAAC,EAAC,MAAM,CAAC,CAAC,GAAC,MAAM,EAAC,CAAC;AACnE,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,MAAM,CAAC,MAAM,EAAC,MAAM;IAChC,OAAO,EAAC,CAAC,EAAC,MAAM,CAAC,CAAC,GAAC,MAAM,EAAC,CAAC,EAAC,MAAM,CAAC,CAAC,GAAC,MAAM,EAAC,CAAC,EAAC,MAAM,CAAC,CAAC,GAAC,MAAM,EAAC,CAAC;AACnE,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,cAAc,CAAC,OAAO,EAAC,OAAO;IAC1C,OAAO,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,CAAC,EAAC,CAAC;AAC/E,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,YAAY,CAAC,OAAO,EAAC,OAAO;IACxC,OAAO,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,CAAC,EAAC,CAAC,EAAC,OAAO,CAAC,CAAC,GAAC,OAAO,CAAC,CAAC,EAAC,CAAC;AAC/E,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,IAAI,CAAC,MAAM;IACvB,OAAO,EAAC,CAAC,EAAC,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,MAAM,CAAC,CAAC,EAAC,CAAC,EAAC,MAAM,CAAC,CAAC,EAAC,CAAC;AAC9C,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,KAAK,CAAC,MAAM;IACxB,OAAO,EAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;AAClF,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,KAAK,CAAC,MAAM;IACxB,OAAO,EAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC;AAClF,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,QAAQ,CAAC,MAAM;IAC3B,OAAO,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,CAAC,EAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAC,CAAA;AAC3E,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,OAAO,CAAC,OAAO,EAAC,OAAO;IACnC,OAAO,CAAC,OAAO,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC;AAC3F,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,OAAO,CAAC,OAAO,EAAC,OAAO,EAAC,MAAM;IAC1C,OAAO,CACH,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,MAAM;QACzC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,MAAM;QACzC,IAAI,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,MAAM,CAC5C,CAAC;AACN,CAAC;AAED,MAAM,UAAU,gBAAgB,CAAC,MAAM;IACnC,MAAM,SAAS,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;IAC5C,IAAI,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE;QACxD,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC;YAAE,OAAO,MAAM,CAAA;;YAC1B,OAAO,MAAM,CAAA;KACrB;IACD,IAAI,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE;QACxD,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC;YAAE,OAAO,OAAO,CAAA;QAChC,OAAO,OAAO,CAAC;KAClB;IACD,IAAI,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,IAAI,SAAS,CAAC,CAAC,GAAG,SAAS,CAAC,CAAC,EAAE;QACxD,IAAI,MAAM,CAAC,CAAC,GAAG,CAAC;YAAE,OAAO,MAAM,CAAA;;YAC1B,OAAO,IAAI,CAAA;KACnB;AACL,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,gBAAgB,CAAC,OAAO;IACpC,MAAM,GAAG,GAAG;QACR,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACf,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACf,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;KAClB,CAAC;IACF,KAAK,MAAM,IAAI,IAAI,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC,EAAE;QAC9B,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC1B,MAAM,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;YAChC,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YAClC,IAAI,aAAa,GAAG,YAAY;gBAAE,GAAG,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;SAC9D;KACJ;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,gBAAgB,CAAC,OAAO;IACpC,MAAM,GAAG,GAAG;QACR,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACf,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;QACf,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;KAClB,CAAC;IACF,KAAK,MAAM,IAAI,IAAI,CAAC,GAAG,EAAC,GAAG,EAAC,GAAG,CAAC,EAAE;QAC9B,KAAK,MAAM,MAAM,IAAI,OAAO,EAAE;YAC1B,MAAM,aAAa,GAAG,GAAG,CAAC,IAAI,CAAC,CAAC;YAChC,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YAClC,IAAI,aAAa,GAAG,YAAY;gBAAE,GAAG,CAAC,IAAI,CAAC,GAAG,YAAY,CAAC;SAC9D;KACJ;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,MAAM,CAAC,MAAM,EAAC,KAAK,EAAC,IAAI;IACpC,MAAM,aAAa,GAAG;QAClB,CAAC,EAAE,MAAM,CAAC,CAAC;QACX,CAAC,EAAE,MAAM,CAAC,CAAC;QACX,CAAC,EAAE,MAAM,CAAC,CAAC;KACd,CAAC;IACF,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAEjC,QAAQ,IAAI,EAAE;QACV,KAAK,GAAG;YAAE;gBACN,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC;gBACxD,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC;aAC3D;YAAC,MAAM;QACR,KAAK,GAAG;YAAE;gBACN,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC;gBACxD,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC;aAC3D;YAAC,MAAM;QACR,KAAK,GAAG;YAAE;gBACN,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC;gBACxD,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC;aAC3D;YAAC,MAAM;QACR,OAAO,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KACvD;IACD,OAAO,aAAa,CAAC;AACzB,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,IAAI,CAAC,MAAM,EAAC,UAAU,EAAC,IAAI;IACvC,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC;IACnC,aAAa,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;IAC3E,OAAO,aAAa,CAAC;AACzB,CAAC;AAED;;;;;;GAMG;AACH,MAAM,UAAU,aAAa,CAAC,OAAO,EAAC,KAAK,EAAC,IAAI,EAAC,QAAQ;IACrD,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IACjC,MAAM,QAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;IAEjC,KAAK,IAAI,KAAK,GAAG,CAAC,EAAC,KAAK,GAAG,OAAO,CAAC,MAAM,EAAC,KAAK,EAAE,EAAE;QAC/C,MAAM,MAAM,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC;QAC9B,MAAM,aAAa,GAAG;YAClB,CAAC,EAAE,MAAM,CAAC,CAAC;YACX,CAAC,EAAE,MAAM,CAAC,CAAC;YACX,CAAC,EAAE,MAAM,CAAC,CAAC;SACd,CAAC;QACF,QAAQ,IAAI,EAAE;YACV,KAAK,GAAG;gBAAE;oBACN,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC;oBACxD,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC;iBAC3D;gBAAC,MAAM;YACR,KAAK,GAAG;gBAAE;oBACN,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC;oBACxD,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC;iBAC3D;gBAAC,MAAM;YACR,KAAK,GAAG;gBAAE;oBACN,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC;oBACxD,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,GAAC,QAAQ,CAAC;iBAC3D;gBAAC,MAAM;YACR,OAAO,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;SACvD;QACD,QAAQ,CAAC,aAAa,CAAC,CAAC;KAC3B;AACL,CAAC;AAED;;;;;;;;GAQG;AACH,MAAM,UAAU,YAAY,CAAC,MAAM,EAAC,KAAK,EAAC,IAAI;IAC1C,MAAM,aAAa,GAAG;QAClB,CAAC,EAAE,MAAM,CAAC,CAAC;QACX,CAAC,EAAE,MAAM,CAAC,CAAC;QACX,CAAC,EAAE,MAAM,CAAC,CAAC;KACd,CAAC;IACF,QAAQ,IAAI,EAAE;QACV,KAAK,GAAG;YAAE;gBACN,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,GAAC,KAAK,CAAC,GAAG,CAAC;gBAC1D,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,GAAC,KAAK,CAAC,GAAG,CAAC;aAC7D;YAAC,MAAM;QACR,KAAK,GAAG;YAAE;gBACN,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,GAAC,KAAK,CAAC,GAAG,CAAC;gBAC1D,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,GAAC,KAAK,CAAC,GAAG,CAAC;aAC7D;YAAC,MAAM;QACR,KAAK,GAAG;YAAE;gBACN,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,GAAC,KAAK,CAAC,GAAG,CAAC;gBAC1D,aAAa,CAAC,CAAC,GAAG,MAAM,CAAC,CAAC,GAAC,KAAK,CAAC,GAAG,GAAG,MAAM,CAAC,CAAC,GAAC,KAAK,CAAC,GAAG,CAAC;aAC7D;YAAC,MAAM;QACR,OAAO,CAAC,CAAC,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;KACvD;IACD,OAAO,aAAa,CAAC;AACzB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,UAAU,CAAC,MAAM;IAC7B,MAAM,OAAO,GAAG,GAAG,CAAC;IACpB,KAAK,MAAM,IAAI,IAAI,MAAM,EAAE;QACvB,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC;YAAE,OAAO,GAAG,IAAI,CAAC;KACtD;IACD,OAAO,OAAO,CAAA;AAClB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,UAAU,CAAC,MAAM;IAC7B,MAAM,OAAO,GAAG,GAAG,CAAC;IACpB,KAAK,MAAM,IAAI,IAAI,MAAM,EAAE;QACvB,IAAI,MAAM,CAAC,IAAI,CAAC,GAAG,MAAM,CAAC,OAAO,CAAC;YAAE,OAAO,GAAG,IAAI,CAAC;KACtD;IACD,OAAO,OAAO,CAAC;AACnB,CAAC;AAED,qBAAqB;AAErB;;;GAGG","file":"vectorMath.js","sourcesContent":["/*\n    \"vectorMath.js\" - Helper functions to work with vectors.\n    Copyright (C) 2023  PavelDobCZ23\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/**\n * @typedef Vector3\n * @property {number} x Value of the vector on the X axis.\n * @property {number} y Value of the vector on the Y axis.\n * @property {number} z Value of the vector on the Z axis.\n */\n\n/**\n * @param {Vector3} vector \n * @returns {number}\n **/\nexport function getLength(vector) {\n    return Math.sqrt(vector.x*vector.x+vector.y*vector.y+vector.z*vector.z);\n}\n\n/**\n * @param {Vector3} vector \n * @returns {number}\n **/\nexport function getLengthSquared(vector) {\n    return vector.x*vector.x+vector.y*vector.y+vector.z*vector.z;\n}\n\n/**\n * @param {Vector3} vector\n * @param {number} length\n **/\nexport function setLength(vector, length) {\n    const vectorLength = getLength(vector);\n    const ratio = length/vectorLength;\n    vector.x *= ratio;\n    vector.y *= ratio;\n    vector.z *= ratio;\n\n    return vector\n}\n\n/**\n * Sums 2 vectors together.\n * @param {Vector3} vectorA First vector to sum.\n * @param {Vector3} vectorB Second vector to sum.\n * @returns {Vector3} New object with the result of the sum of the vector.\n */\nexport function sum(vectorA,vectorB) {\n    return {x:vectorA.x+vectorB.x,y:vectorA.y+vectorB.y,z:vectorA.z+vectorB.z};\n}\n\n/**\n * Subs 2 vectors together.\n * @param {Vector3} vectorA First vector to sub.\n * @param {Vector3} vectorB Second vector to sub.\n * @returns {Vector3} New object with the result of the sub of the vector.\n */\nexport function sub(vectorA,vectorB) {\n    return {x:vectorA.x-vectorB.x,y:vectorA.y-vectorB.y,z:vectorA.z-vectorB.z};\n}\n\n/**\n * Scalar vector multiplication.\n * @param {Vector3} vector Vector to multiply.\n * @param {number} amount Scalar multiplicator.\n * @returns {Vector3} Result of the scalar multiplication.\n */\nexport function multiply(vector,amount) {\n    return {x:vector.x*amount,y:vector.y*amount,z:vector.z*amount};\n}\n\n/**\n * Scalar vector division.\n * @param {Vector3} vector Vector to divide.\n * @param {number} amount Scalar divider.\n * @returns {Vector3} Result of the scalar division.\n */\nexport function divide(vector,amount) {\n    return {x:vector.x/amount,y:vector.y/amount,z:vector.z/amount};\n}\n\n/**\n * Vector multiplication.\n * @param {Vector3} vectorA Vector to multiply.\n * @param {Vector3} vectorB vector multiplicator.\n * @returns {Vector3} Result of the vector multiplication.\n */\nexport function vectorMultiply(vectorA,vectorB) {\n    return {x:vectorA.x*vectorB.x,y:vectorA.y*vectorB.y,z:vectorA.z*vectorB.z};\n}\n\n/**\n * Vector division.\n * @param {Vector3} vector Vector to divide.\n * @param {Vector3} vectorB Vector divider.\n * @returns {Vector3} Result of the vector division.\n */\nexport function vectorDivide(vectorA,vectorB) {\n    return {x:vectorA.x/vectorB.x,y:vectorA.y/vectorB.y,z:vectorA.z/vectorB.z};\n}\n\n/**\n * Copies a vector into a new object.\n * @param {Vector3} vector Vector to copy.\n * @returns {Vector3} New object of the same vector.\n */\nexport function copy(vector) {\n    return {x:vector.x,y:vector.y,z:vector.z};\n}\n\n/**\n * Floors all the axis of the vector.\n * @param {Vector3} vector Vector to floor.\n * @returns {Vector3} Result of flooring all axis of the vector.\n */\nexport function floor(vector) {\n    return {x:Math.floor(vector.x),y:Math.floor(vector.y),z:Math.floor(vector.z)};\n}\n\n/**\n * Rounds all the axis of the vector.\n * @param {Vector3} vector Vector to round.\n * @returns {Vector3} Result of rounding all axis of the vector.\n */\nexport function round(vector) {\n    return {x:Math.round(vector.x),y:Math.round(vector.y),z:Math.round(vector.z)};\n}\n\n/**\n *  Changes all axis of the vector to their absolute values.\n * @param {Vector3} vector Vector to get absolute value of.\n * @returns {Vector3} Result of absolute values of all the axis of the vector.\n */\nexport function absolute(vector) {\n    return {x:Math.abs(vector.x),y:Math.abs(vector.y),z:Math.abs(vector.z)}\n}\n\n/**\n * Returns a value that indicates if the vectors are both the exact same or not.\n * @param {Vector3} vectorA \n * @param {Vector3} vectorB \n * @returns {boolean}\n */\nexport function compare(vectorA,vectorB) {\n    return (vectorA.x === vectorB.x && vectorA.y === vectorB.y && vectorA.z === vectorB.z);\n}\n\n/**\n * Returns a value that indicates if the vectors are similar according to the `margin`.\n * @param {Vector3} vectorA \n * @param {Vector3} vectorB \n * @param {number} margin \n * @returns {boolean}\n */\nexport function similar(vectorA,vectorB,margin) {\n    return (\n        Math.abs(vectorA.x - vectorB.x) <= margin &&\n        Math.abs(vectorA.y - vectorB.y) <= margin && \n        Math.abs(vectorA.z - vectorB.z) <= margin\n    );\n}\n\nexport function getDirectionFace(vector) {\n    const absVector = getAbsoluteVector(vector);\n    if (absVector.x > absVector.y && absVector.x > absVector.z) {\n        if (vector.x > 0) return 'west'\n        else return 'east'\n    }\n    if (absVector.z > absVector.x && absVector.z > absVector.y) {\n        if (vector.z > 0) return 'north'\n        return 'south';\n    }\n    if (absVector.y > absVector.x && absVector.y > absVector.z) {\n        if (vector.y > 0) return 'down'\n        else return 'up'\n    }\n}\n\n/**\n * Returns a vector with each axis containing the maximal value found for that axis out of all the input vectors.\n * @param {Vector3[]} vectors \n * @returns {Vector3}\n */\nexport function getMaximalVector(vectors) {\n    const max = {\n        x: vectors[0].x,\n        y: vectors[0].y,\n        z: vectors[0].z\n    };\n    for (const axis of ['x','y','z']) {\n        for (const vector of vectors) {\n            const savedMaxValue = max[axis];\n            const currentValue = vector[axis];\n            if (savedMaxValue < currentValue) max[axis] = currentValue;\n        }\n    }\n    return max;\n}\n\n/**\n * Returns a vector with each axis containing the minimal value found for that axis out of all the input vectors.\n * @param {Vector3[]} vectors \n * @returns {Vector3}\n */\nexport function getMinimalVector(vectors) {\n    const min = {\n        x: vectors[0].x,\n        y: vectors[0].y,\n        z: vectors[0].z\n    };\n    for (const axis of ['x','y','z']) {\n        for (const vector of vectors) {\n            const savedMinValue = min[axis];\n            const currentValue = vector[axis];\n            if (savedMinValue > currentValue) min[axis] = currentValue;\n        }\n    }\n    return min;\n}\n\n/**\n * Performs a basic vector rotation.\n * @param {Vector3} vector Vector that will be rotated by a specified angle on a specified axis.\n * @param {number} angle Angle in radians.\n * @param {'x' | 'y' | 'z'} axis Axis to rotate the vector along.\n * @returns {Vector3}\n */\nexport function rotate(vector,angle,axis) {\n    const rotatedVector = {\n        x: vector.x,\n        y: vector.y,\n        z: vector.z\n    };\n    const angleSin = Math.sin(angle);\n    const angleCos = Math.cos(angle);\n\n    switch (axis) {\n        case 'x': {\n            rotatedVector.y = vector.y*angleCos - vector.z*angleSin;\n            rotatedVector.z = vector.y*angleSin + vector.z*angleCos;\n        } break;\n        case 'y': {\n            rotatedVector.x = vector.x*angleCos + vector.z*angleSin;\n            rotatedVector.z = vector.z*angleCos - vector.x*angleSin;\n        } break;\n        case 'z': {\n            rotatedVector.x = vector.x*angleCos - vector.y*angleSin;\n            rotatedVector.y = vector.x*angleSin + vector.y*angleCos;\n        } break;\n        default: throw new Error('Invalid Axis specified!');\n    }\n    return rotatedVector;\n}\n\n/**\n * Function that flips a `vector` on an `axis` relative to a defined `flipVector`.\n * @param {Vector3} vector \n * @param {Vector3} flipVector \n * @param {'x' | 'y' | 'z'} axis \n * @returns {Vector3} Result of flipping the vector along the selected axis relative to the defined point.\n */\nexport function flip(vector,flipVector,axis) {\n    const flippedVector = copy(vector);\n    flippedVector[axis] = flipVector[axis] - (vector[axis] - flipVector[axis]);\n    return flippedVector;\n}\n\n/**\n * Performs a basic vector rotation in a batch on multiple vectors. The main advantage of this is that `Math.sin` and `Math.cos` will only be called once during the entire function.\n * @param {Vector3[]} vectors Array of vectors that will be each rotated by a specified angle on a specified axis.\n * @param {number} angle Angle in radians.\n * @param {'x' | 'y' | 'z'} axis Axis to rotate the vector along.\n * @param {Vector3Callback} callback Callback that gets called with the result of the operation.\n */\nexport function rotateVectors(vectors,angle,axis,callback) {\n    const angleSin = Math.sin(angle);\n    const angleCos = Math.cos(angle);\n\n    for (let index = 0;index < vectors.length;index++) {\n        const vector = vectors[index];\n        const rotatedVector = {\n            x: vector.x,\n            y: vector.y,\n            z: vector.z\n        };\n        switch (axis) {\n            case 'x': {\n                rotatedVector.y = vector.y*angleCos - vector.z*angleSin;\n                rotatedVector.z = vector.y*angleSin + vector.z*angleCos;\n            } break;\n            case 'y': {\n                rotatedVector.x = vector.x*angleCos + vector.z*angleSin;\n                rotatedVector.z = vector.z*angleCos - vector.x*angleSin;\n            } break;\n            case 'z': {\n                rotatedVector.x = vector.x*angleCos - vector.y*angleSin;\n                rotatedVector.y = vector.x*angleSin + vector.y*angleCos;\n            } break;\n            default: throw new Error('Invalid Axis specified!');\n        }\n        callback(rotatedVector);\n    }\n}\n\n/**\n * Performs a basic vector rotation. The angle is defined by its `sin` and `cos` values.\n * @param {Vector3[]} vectors Array of vectors that will be each rotated by a specified angle on a specified axis.\n * @param {object} angle Angle definition.\n * @param {number} angle.sin Sinus result of the angle.\n * @param {number} angle.cos Cosin result of the angle.\n * @param {'x' | 'y' | 'z'} axis Axis to rotate the vector along.\n * @returns {Vector3}\n */\nexport function rotateSinCos(vector,angle,axis) {\n    const rotatedVector = {\n        x: vector.x,\n        y: vector.y,\n        z: vector.z\n    };\n    switch (axis) {\n        case 'x': {\n            rotatedVector.y = vector.y*angle.cos - vector.z*angle.sin;\n            rotatedVector.z = vector.y*angle.sin + vector.z*angle.cos;\n        } break;\n        case 'y': {\n            rotatedVector.x = vector.x*angle.cos + vector.z*angle.sin;\n            rotatedVector.z = vector.z*angle.cos - vector.x*angle.sin;\n        } break;\n        case 'z': {\n            rotatedVector.x = vector.x*angle.cos - vector.y*angle.sin;\n            rotatedVector.y = vector.x*angle.sin + vector.y*angle.cos;\n        } break;\n        default: throw new Error('Invalid Axis specified!');\n    }\n    return rotatedVector;\n}\n\n/**\n * Returns the first axis that contains the maximal value of all the axis of the vector.\n * @param {Vector3} vector \n * @returns {'x' | 'y' | 'z'}\n */\nexport function getMaxAxis(vector) {\n    const maxAxis = 'x';\n    for (const axis in vector) {\n        if (vector[axis] > vector[maxAxis]) maxAxis = axis;\n    }\n    return maxAxis\n}\n\n/**\n * Returns the first axis that contains the minimal value of all the axis of the vector.\n * @param {Vector3} vector \n * @returns {'x' | 'y' | 'z'}\n */\nexport function getMinAxis(vector) {\n    const minAxis = 'x';\n    for (const axis in vector) {\n        if (vector[axis] < vector[minAxis]) minAxis = axis;\n    }\n    return minAxis;\n}\n\n//# Types / Constants\n\n/**\n * @callback Vector3Callback Callback that gets called during a vector operation with multiple vector outputs.\n * @param {Vector3} vector Vector result of the operation.\n */"]}