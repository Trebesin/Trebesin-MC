{"version":3,"sources":["js_modules/vectorMath.js"],"names":[],"mappings":"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","file":"vectorMath.js","sourcesContent":["/*\r\n    \"vectorMath.js\" - Helper functions to work with vectors.\r\n    Copyright (C) 2023  PavelDobCZ23\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/**\r\n * @typedef Vector3\r\n * @property {number} x Value of the vector on the X axis.\r\n * @property {number} y Value of the vector on the Y axis.\r\n * @property {number} z Value of the vector on the Z axis.\r\n */\r\n\r\n/**\r\n * @param {Vector3} vector \r\n * @returns {number}\r\n **/\r\nexport function getLength(vector) {\r\n    return Math.sqrt(vector.x*vector.x+vector.y*vector.y+vector.z*vector.z);\r\n}\r\n\r\n/**\r\n * @param {Vector3} vector \r\n * @returns {number}\r\n **/\r\nexport function getLengthSquared(vector) {\r\n    return vector.x*vector.x+vector.y*vector.y+vector.z*vector.z;\r\n}\r\n\r\n/**\r\n * @param {Vector3} vector\r\n * @param {number} length\r\n **/\r\nexport function setLength(vector, length) {\r\n    const vectorLength = getLength(vector);\r\n    const ratio = length/vectorLength;\r\n    vector.x *= ratio;\r\n    vector.y *= ratio;\r\n    vector.z *= ratio;\r\n\r\n    return vector\r\n}\r\n\r\n/**\r\n * Sums 2 vectors together.\r\n * @param {Vector3} vectorA First vector to sum.\r\n * @param {Vector3} vectorB Second vector to sum.\r\n * @returns {Vector3} New object with the result of the sum of the vector.\r\n */\r\nexport function sum(vectorA,vectorB) {\r\n    return {x:vectorA.x+vectorB.x,y:vectorA.y+vectorB.y,z:vectorA.z+vectorB.z};\r\n}\r\n\r\n/**\r\n * Subs 2 vectors together.\r\n * @param {Vector3} vectorA First vector to sub.\r\n * @param {Vector3} vectorB Second vector to sub.\r\n * @returns {Vector3} New object with the result of the sub of the vector.\r\n */\r\nexport function sub(vectorA,vectorB) {\r\n    return {x:vectorA.x-vectorB.x,y:vectorA.y-vectorB.y,z:vectorA.z-vectorB.z};\r\n}\r\n\r\n/**\r\n * Scalar vector multiplication.\r\n * @param {Vector3} vector Vector to multiply.\r\n * @param {number} amount Scalar multiplicator.\r\n * @returns {Vector3} Result of the scalar multiplication.\r\n */\r\nexport function multiply(vector,amount) {\r\n    return {x:vector.x*amount,y:vector.y*amount,z:vector.z*amount};\r\n}\r\n\r\n/**\r\n * Scalar vector division.\r\n * @param {Vector3} vector Vector to divide.\r\n * @param {number} amount Scalar divider.\r\n * @returns {Vector3} Result of the scalar division.\r\n */\r\nexport function divide(vector,amount) {\r\n    return {x:vector.x/amount,y:vector.y/amount,z:vector.z/amount};\r\n}\r\n\r\n/**\r\n * Vector multiplication.\r\n * @param {Vector3} vectorA Vector to multiply.\r\n * @param {Vector3} vectorB vector multiplicator.\r\n * @returns {Vector3} Result of the vector multiplication.\r\n */\r\nexport function vectorMultiply(vectorA,vectorB) {\r\n    return {x:vectorA.x*vectorB.x,y:vectorA.y*vectorB.y,z:vectorA.z*vectorB.z};\r\n}\r\n\r\n/**\r\n * Vector division.\r\n * @param {Vector3} vector Vector to divide.\r\n * @param {Vector3} vectorB Vector divider.\r\n * @returns {Vector3} Result of the vector division.\r\n */\r\nexport function vectorDivide(vectorA,vectorB) {\r\n    return {x:vectorA.x/vectorB.x,y:vectorA.y/vectorB.y,z:vectorA.z/vectorB.z};\r\n}\r\n\r\n/**\r\n * Copies a vector into a new object.\r\n * @param {Vector3} vector Vector to copy.\r\n * @returns {Vector3} New object of the same vector.\r\n */\r\nexport function copy(vector) {\r\n    return {x:vector.x,y:vector.y,z:vector.z};\r\n}\r\n\r\n/**\r\n * Floors all the axis of the vector.\r\n * @param {Vector3} vector Vector to floor.\r\n * @returns {Vector3} Result of flooring all axis of the vector.\r\n */\r\nexport function floor(vector) {\r\n    return {x:Math.floor(vector.x),y:Math.floor(vector.y),z:Math.floor(vector.z)};\r\n}\r\n\r\n/**\r\n * Rounds all the axis of the vector.\r\n * @param {Vector3} vector Vector to round.\r\n * @returns {Vector3} Result of rounding all axis of the vector.\r\n */\r\nexport function round(vector) {\r\n    return {x:Math.round(vector.x),y:Math.round(vector.y),z:Math.round(vector.z)};\r\n}\r\n\r\n/**\r\n *  Changes all axis of the vector to their absolute values.\r\n * @param {Vector3} vector Vector to get absolute value of.\r\n * @returns {Vector3} Result of absolute values of all the axis of the vector.\r\n */\r\nexport function absolute(vector) {\r\n    return {x:Math.abs(vector.x),y:Math.abs(vector.y),z:Math.abs(vector.z)}\r\n}\r\n\r\n/**\r\n * Returns a value that indicates if the vectors are both the exact same or not.\r\n * @param {Vector3} vectorA \r\n * @param {Vector3} vectorB \r\n * @returns {boolean}\r\n */\r\nexport function compare(vectorA,vectorB) {\r\n    return (vectorA.x === vectorB.x && vectorA.y === vectorB.y && vectorA.z === vectorB.z);\r\n}\r\n\r\n/**\r\n * Returns a value that indicates if the vectors are similar according to the `margin`.\r\n * @param {Vector3} vectorA \r\n * @param {Vector3} vectorB \r\n * @param {number} margin \r\n * @returns {boolean}\r\n */\r\nexport function similar(vectorA,vectorB,margin) {\r\n    return (\r\n        Math.abs(vectorA.x - vectorB.x) <= margin &&\r\n        Math.abs(vectorA.y - vectorB.y) <= margin && \r\n        Math.abs(vectorA.z - vectorB.z) <= margin\r\n    );\r\n}\r\n\r\nexport function getDirectionFace(vector) {\r\n    const absVector = getAbsoluteVector(vector);\r\n    if (absVector.x > absVector.y && absVector.x > absVector.z) {\r\n        if (vector.x > 0) return 'west'\r\n        else return 'east'\r\n    }\r\n    if (absVector.z > absVector.x && absVector.z > absVector.y) {\r\n        if (vector.z > 0) return 'north'\r\n        return 'south';\r\n    }\r\n    if (absVector.y > absVector.x && absVector.y > absVector.z) {\r\n        if (vector.y > 0) return 'down'\r\n        else return 'up'\r\n    }\r\n}\r\n\r\n/**\r\n * Returns a vector with each axis containing the maximal value found for that axis out of all the input vectors.\r\n * @param {Vector3[]} vectors \r\n * @returns {Vector3}\r\n */\r\nexport function getMaximalVector(vectors) {\r\n    const max = {\r\n        x: vectors[0].x,\r\n        y: vectors[0].y,\r\n        z: vectors[0].z\r\n    };\r\n    for (const axis of ['x','y','z']) {\r\n        for (const vector of vectors) {\r\n            const savedMaxValue = max[axis];\r\n            const currentValue = vector[axis];\r\n            if (savedMaxValue < currentValue) max[axis] = currentValue;\r\n        }\r\n    }\r\n    return max;\r\n}\r\n\r\n/**\r\n * Returns a vector with each axis containing the minimal value found for that axis out of all the input vectors.\r\n * @param {Vector3[]} vectors \r\n * @returns {Vector3}\r\n */\r\nexport function getMinimalVector(vectors) {\r\n    const min = {\r\n        x: vectors[0].x,\r\n        y: vectors[0].y,\r\n        z: vectors[0].z\r\n    };\r\n    for (const axis of ['x','y','z']) {\r\n        for (const vector of vectors) {\r\n            const savedMinValue = min[axis];\r\n            const currentValue = vector[axis];\r\n            if (savedMinValue > currentValue) min[axis] = currentValue;\r\n        }\r\n    }\r\n    return min;\r\n}\r\n\r\n/**\r\n * Performs a basic vector rotation.\r\n * @param {Vector3} vector Vector that will be rotated by a specified angle on a specified axis.\r\n * @param {number} angle Angle in radians.\r\n * @param {'x' | 'y' | 'z'} axis Axis to rotate the vector along.\r\n * @returns {Vector3}\r\n */\r\nexport function rotate(vector,angle,axis) {\r\n    const rotatedVector = {\r\n        x: vector.x,\r\n        y: vector.y,\r\n        z: vector.z\r\n    };\r\n    const angleSin = Math.sin(angle);\r\n    const angleCos = Math.cos(angle);\r\n\r\n    switch (axis) {\r\n        case 'x': {\r\n            rotatedVector.y = vector.y*angleCos - vector.z*angleSin;\r\n            rotatedVector.z = vector.y*angleSin + vector.z*angleCos;\r\n        } break;\r\n        case 'y': {\r\n            rotatedVector.x = vector.x*angleCos + vector.z*angleSin;\r\n            rotatedVector.z = vector.z*angleCos - vector.x*angleSin;\r\n        } break;\r\n        case 'z': {\r\n            rotatedVector.x = vector.x*angleCos - vector.y*angleSin;\r\n            rotatedVector.y = vector.x*angleSin + vector.y*angleCos;\r\n        } break;\r\n        default: throw new Error('Invalid Axis specified!');\r\n    }\r\n    return rotatedVector;\r\n}\r\n\r\n/**\r\n * Function that flips a `vector` on an `axis` relative to a defined `flipVector`.\r\n * @param {Vector3} vector \r\n * @param {Vector3} flipVector \r\n * @param {'x' | 'y' | 'z'} axis \r\n * @returns {Vector3} Result of flipping the vector along the selected axis relative to the defined point.\r\n */\r\nexport function flip(vector,flipVector,axis) {\r\n    const flippedVector = copy(vector);\r\n    flippedVector[axis] = flipVector[axis] - (vector[axis] - flipVector[axis]);\r\n    return flippedVector;\r\n}\r\n\r\n/**\r\n * Performs a basic vector rotation in a batch on multiple vectors. The main advantage of this is that `Math.sin` and `Math.cos` will only be called once during the entire function.\r\n * @param {Vector3[]} vectors Array of vectors that will be each rotated by a specified angle on a specified axis.\r\n * @param {number} angle Angle in radians.\r\n * @param {'x' | 'y' | 'z'} axis Axis to rotate the vector along.\r\n * @param {Vector3Callback} callback Callback that gets called with the result of the operation.\r\n */\r\nexport function rotateVectors(vectors,angle,axis,callback) {\r\n    const angleSin = Math.sin(angle);\r\n    const angleCos = Math.cos(angle);\r\n\r\n    for (let index = 0;index < vectors.length;index++) {\r\n        const vector = vectors[index];\r\n        const rotatedVector = {\r\n            x: vector.x,\r\n            y: vector.y,\r\n            z: vector.z\r\n        };\r\n        switch (axis) {\r\n            case 'x': {\r\n                rotatedVector.y = vector.y*angleCos - vector.z*angleSin;\r\n                rotatedVector.z = vector.y*angleSin + vector.z*angleCos;\r\n            } break;\r\n            case 'y': {\r\n                rotatedVector.x = vector.x*angleCos + vector.z*angleSin;\r\n                rotatedVector.z = vector.z*angleCos - vector.x*angleSin;\r\n            } break;\r\n            case 'z': {\r\n                rotatedVector.x = vector.x*angleCos - vector.y*angleSin;\r\n                rotatedVector.y = vector.x*angleSin + vector.y*angleCos;\r\n            } break;\r\n            default: throw new Error('Invalid Axis specified!');\r\n        }\r\n        callback(rotatedVector);\r\n    }\r\n}\r\n\r\n/**\r\n * Performs a basic vector rotation. The angle is defined by its `sin` and `cos` values.\r\n * @param {Vector3[]} vectors Array of vectors that will be each rotated by a specified angle on a specified axis.\r\n * @param {object} angle Angle definition.\r\n * @param {number} angle.sin Sinus result of the angle.\r\n * @param {number} angle.cos Cosin result of the angle.\r\n * @param {'x' | 'y' | 'z'} axis Axis to rotate the vector along.\r\n * @returns {Vector3}\r\n */\r\nexport function rotateSinCos(vector,angle,axis) {\r\n    const rotatedVector = {\r\n        x: vector.x,\r\n        y: vector.y,\r\n        z: vector.z\r\n    };\r\n    switch (axis) {\r\n        case 'x': {\r\n            rotatedVector.y = vector.y*angle.cos - vector.z*angle.sin;\r\n            rotatedVector.z = vector.y*angle.sin + vector.z*angle.cos;\r\n        } break;\r\n        case 'y': {\r\n            rotatedVector.x = vector.x*angle.cos + vector.z*angle.sin;\r\n            rotatedVector.z = vector.z*angle.cos - vector.x*angle.sin;\r\n        } break;\r\n        case 'z': {\r\n            rotatedVector.x = vector.x*angle.cos - vector.y*angle.sin;\r\n            rotatedVector.y = vector.x*angle.sin + vector.y*angle.cos;\r\n        } break;\r\n        default: throw new Error('Invalid Axis specified!');\r\n    }\r\n    return rotatedVector;\r\n}\r\n\r\n/**\r\n * Returns the first axis that contains the maximal value of all the axis of the vector.\r\n * @param {Vector3} vector \r\n * @returns {'x' | 'y' | 'z'}\r\n */\r\nexport function getMaxAxis(vector) {\r\n    const maxAxis = 'x';\r\n    for (const axis in vector) {\r\n        if (vector[axis] > vector[maxAxis]) maxAxis = axis;\r\n    }\r\n    return maxAxis\r\n}\r\n\r\n/**\r\n * Returns the first axis that contains the minimal value of all the axis of the vector.\r\n * @param {Vector3} vector \r\n * @returns {'x' | 'y' | 'z'}\r\n */\r\nexport function getMinAxis(vector) {\r\n    const minAxis = 'x';\r\n    for (const axis in vector) {\r\n        if (vector[axis] < vector[minAxis]) minAxis = axis;\r\n    }\r\n    return minAxis;\r\n}\r\n\r\n//# Types / Constants\r\n\r\n/**\r\n * @callback Vector3Callback Callback that gets called during a vector operation with multiple vector outputs.\r\n * @param {Vector3} vector Vector result of the operation.\r\n */"],"sourceRoot":"../../scripts/"}