{"version":3,"sources":["js_modules/array.js"],"names":[],"mappings":"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","file":"array.js","sourcesContent":["/*\n    \"geometry.js\" - Helper functions to work with arrays.\n    Copyright (C) 2023  PavelDobCZ23\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\n\n/**\n * @description Inserts value at the first empty index in the array and returns the index.\n * @param {any[]} array - Array to insert the value into.\n * @param {*} value - Value to insert into the array.\n * @returns {number|undefined|null} Index that the value was inserted to.\n **/\nexport function insertToArray(array, value) {\n    if (!Array.isArray(array)) return null\n    for (let index = 0;index <= array.length;index++) {\n        if (array[index] == null) {\n            array[index] = value;\n            return index;\n        }\n    }\n}\n\n/**\n * @description Deletes item from an array at a given index and shortenes the array if possible.\n * @param {any[]} array - Array to delete the item from.\n * @param {number} index - Index of the item to delete.\n * @returns {number} New length of the array.\n **/\nexport function deleteFromArray(array, index) {\n    let newLength = 0;\n    delete array[index];\n    for (let index = 0;index < array.length;index++) {\n        if (array[index] != null) {\n            newLength = index + 1;\n        }\n    }\n    array.length = newLength;\n    return newLength;\n}\n\n/**\n * Creates an object from an array. Values are each corresponding items of the array and keys are the return values of the callback.\n * @param {any[]} array - Array to convert into an object.\n * @param {callback} value - Callback that gets passed `value`,`index` and `array`. Its return value is the key inside of the new object.\n * @returns {object} New generated object.\n **/\nexport function arrayToObject(array, callback) {\n    const newObject = {};\n    for (let index = 0;index < array.length;index++) {\n        const value = array[index];\n        const key = callback(value,index,array);\n        newObject[key] = value;\n    }\n    return newObject;\n}\n\n/**\n * \n * @param {Array} array - Array to get the mode of.\n * @returns {Array} Array of 2 values - first value is array of all the modes found and second is the amount of times each mode is found in the array.\n */\nexport function getMode(array) {\n    const items = new Map();\n    let mode = [[null],-1];\n\n    for (const item of array) {\n        const value = items.get(item);\n        if (value == null) {\n            items.set(item, 1);\n        } else {\n            items.set(item, value+1);\n        }\n    }\n    for (const item of items) {\n        if (item[1] > mode[1]) {\n            mode[0] = [item[0]];\n            mode[1] = item[1];\n        } else if (item[1] === mode[1]) {\n            mode[0].push(item[0]);\n        }\n    }\n\n    return mode\n}\n\n\nexport function containsArray(array,item) {\n    const indexes = item.length;\n    let found = false;\n    arrayLoop: \n    for (const element of array) {\n        for (let index = 0; index < indexes; index++) {\n            if (!(element[index] === item[index])) {\n                continue arrayLoop\n            }\n        }\n        found = true;\n        break arrayLoop \n    }\n    return found\n}\n\n\nfunction subArrays(array1,array2) {\n    const newArray = [];\n    for (let index = 0;index < array1.length;index++) {\n        newArray[index] = array1[index] - array2[index];\n    }\n    return newArray;\n}\n\nexport function range(start,end,step = 1) {\n    if (end == null) {\n        end = start;\n        start = 0;\n    }\n    const rangeArray = [];\n    let number = start;\n    while (number < end) {\n        newArray.push(number);\n        number += step;\n    }\n    return rangeArray\n}\n\nexport function arrayDifference(array,subArray) {\n    return filter(array,(value) => !includes(subArray,value));\n}\n\n//*Built-in JS functions recreated\n//!Faster\nexport function includes(array,value) {\n    for (let index = 0;index < array.length;index++) {\n        if (array[index] === value) return true;\n    }\n    return false\n}\n\nexport function filter(array,condition) {\n    const filterArray = [];\n    for (let index = 0;index < array.length;index++) {\n        if (condition(array[index],index,array)) filterArray.push(array[index]);\n    }\n    return filterArray\n}\n\n//!Slower\nexport function findLast(array,condition,indexRange = null) {\n    const startIndex = indexRange?.[0] ?? 0;\n    const endIndex = indexRange?.[1] ?? array.length;\n    for (let index = endIndex;index > startIndex;index--) {\n        if (condition(array[index],index,array)) {\n            return {value: array[index], index};\n        }\n    }\n    return null;\n}\n\nexport function find(array,condition,indexRange = null) {\n    const startIndex = indexRange?.[0] ?? 0;\n    const endIndex = indexRange?.[1] ?? array.length;\n    for (let index = startIndex;index < endIndex;index++) {\n        if (condition(array[index],index,array)) {\n            return {value: array[index], index};\n        }\n    }\n    return null;\n}\n\nexport function mapArray(array,callback) {\n    const mappedArray = [];\n    for (let index = 0;index < array.length;index++) {\n        mappedArray[index] = callback(array[index],index,array);\n    }\n    return mappedArray;\n}"]}