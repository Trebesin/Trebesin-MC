{"version":3,"sources":["js_modules/geometry.js"],"names":[],"mappings":"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","file":"geometry.js","sourcesContent":["/*\n    \"geometry.js\" - Helper functions to work with geometric shapes.\n    Copyright (C) 2023  PavelDobCZ23\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n*/\nimport { logMessage } from '../plugins/debug/debug';\nimport * as ArrayOps from './array';\nimport * as VectorMath from './vectorMath';\n\n/**\n * Function that creates a line in 3D coordinate system.\n * @param {Object[]} coords Array specifing X,Y,Z starting and ending coordinates respectively. \n * @param {number} coords[].x X coordinate.\n * @param {number} coords[].y Y coordinate.\n * @param {number} coords[].z Z coordinate.\n * @param {Object} [options] Options defining behavior of the function.\n * @param {number} options.stepBy Increament of the loop generating the line. It will be automatically rounded to ensure it's dividable by the amount of steps. Negative values define the amount of steps instead.\n * @param {boolean} options.round Whether to round the calculated value added to the starting coordinate.\n * @param {Function} [callback] Callback that gets each step as an input, it will make the return `undefined`.\n * @returns {Object[]|undefined} Array containing X,Y,Z coordinates the line is composed of.\n */\nexport async function getGridLine(coordinates,callback,options = {}) {\n    let {stepBy, round} = Object.assign({stepBy:1,round:true},options);\n    let difference = VectorMath.sub(coordinates[1],coordinates[0]);\n    let absoluteDifference = VectorMath.absolute(difference);\n    \n    const steps = Math.max(absoluteDifference.x,absoluteDifference.y,absoluteDifference.z);\n\n    if (stepBy < 0) {\n        stepBy = steps/-stepBy;\n    }\n    if (stepBy > 0) {\n        stepBy = steps/Math.round(steps/stepBy);\n    } \n    if (stepBy === 0) {\n        stepBy = 1;\n    }\n\n    const portions = VectorMath.divide(difference,steps);\n    \n    for (let step = 0;step <= steps;step += stepBy) {\n        let stepVector = VectorMath.multiply(portions,step);\n        if (round) stepVector = VectorMath.round(stepVector);\n        await callback(VectorMath.sum(coordinates[0],stepVector));\n    }\n}\n\nexport async function getBlockOutline(coordinates,callback,options = {}) {\n    const {stepBy,width} = Object.assign({stepBy:1,width:1},options);\n    const span = VectorMath.sub(coordinates[1],coordinates[0]);\n\n    //!! this code is repeated for particles and this\n    for (const axis of ['x','y','z']) {\n        //~Prototype width code\n        const thickAxes = ArrayOps.arrayDifference(['x','y','z'],[axis]);\n        //~Prototype width code\n        const direction = {x:0,y:0,z:0};\n        direction[axis] = span[axis];\n\n        for (let spawnAxis of ['x','y','z']) {\n            const location = VectorMath.copy(coordinates[0]);\n            if (spawnAxis != axis) {\n                location[spawnAxis] = coordinates[1][spawnAxis];\n            }\n\n            if (width > 1) {\n                //~Prototype width code\n                for (let thickAxis0 = 0;thickAxis0 < width;thickAxis0++) \n                for (let thickAxis1 = 0;thickAxis1 < width;thickAxis1++) {\n                    const lineLocation = VectorMath.copy(location);\n                    lineLocation[thickAxes[0]] += (((thickAxes[0] === spawnAxis) === (span[thickAxes[0]] < 0)) ? thickAxis0 : -thickAxis0);\n                    lineLocation[thickAxes[1]] += (((thickAxes[1] === spawnAxis) === (span[thickAxes[1]] < 0)) ? thickAxis1 : -thickAxis1);\n                    \n                    await getGridLine([lineLocation,VectorMath.sum(lineLocation,direction)],callback,{stepBy});\n                }\n                //~Prototype width code\n            } else {\n                await getGridLine([location,VectorMath.sum(location,direction)],callback,{stepBy});\n            }\n        }\n\n        const location = VectorMath.copy(coordinates[1]);\n        location[axis] = coordinates[0][axis];\n        if (width > 1) {\n            //~Prototype width code\n            for (let thickAxis0 = 0;thickAxis0 < width;thickAxis0++) \n            for (let thickAxis1 = 0;thickAxis1 < width;thickAxis1++) {\n                const lineLocation = VectorMath.copy(location);\n                lineLocation[thickAxes[0]] += (span[thickAxes[0]] < 0 ? thickAxis0 : -thickAxis0);\n                lineLocation[thickAxes[1]] += (span[thickAxes[1]] < 0 ? thickAxis1 : -thickAxis1);\n                \n                await getGridLine([lineLocation,VectorMath.sum(lineLocation,direction)],callback,{stepBy});\n            }\n            //~Prototype width code\n        } else {\n            await getGridLine([location,VectorMath.sum(location,direction)],callback,{stepBy});\n        }\n    }\n}\n\nexport async function getGridBlock(coordinates,callback,options = {}) {\n    const {stepBy,hollow,width} = Object.assign({stepBy:{x:1,y:1,z:1},hollow:false,width:1},options);\n    const maxCorner = VectorMath.getMaximalVector(coordinates);\n    const minCorner = VectorMath.getMinimalVector(coordinates);\n\n    let hollowMaxCorner,hollowMinCorner;\n    if (hollow) {\n        const widthVector = {x:width,y:width,z:width};\n        hollowMaxCorner = VectorMath.sub(maxCorner,widthVector);\n        hollowMinCorner = VectorMath.sum(minCorner,widthVector);\n    }\n\n    for (const axis in stepBy) {\n        const steps = maxCorner[axis] - minCorner[axis];\n        if (stepBy[axis] < 0) {\n            stepBy[axis] = steps/-stepBy[axis];\n        }\n        if (stepBy[axis] > 0) {\n            stepBy[axis] = steps/Math.round(steps/stepBy[axis]);\n        }\n        if (stepBy[axis] === 0) {\n            stepBy[axis] = 1;\n        }\n    }\n\n    for (let x = minCorner.x;x <= maxCorner.x;x += stepBy.x) {\n        for (let y = minCorner.y;y <= maxCorner.y;y += stepBy.y) {\n            for (let z = minCorner.z;z <= maxCorner.z;z += stepBy.z) {\n                if (hollow && !(\n                    x > hollowMaxCorner.x ||\n                    y > hollowMaxCorner.y ||\n                    z > hollowMaxCorner.z ||\n                    x < hollowMinCorner.x ||\n                    y < hollowMinCorner.y ||\n                    z < hollowMinCorner.z \n                )) continue;\n                await callback({x,y,z});\n            }\n        }\n    }\n}\n\nexport function getMaximalVector(vectors) {\n    const max = {\n        x: vectors[0].x,\n        y: vectors[0].y,\n        z: vectors[0].z\n    };\n    for (const axis of ['x','y','z']) {\n        for (const vector of vectors) {\n            const savedMaxValue = max[axis];\n            const currentValue = vector[axis];\n            if (savedMaxValue < currentValue) max[axis] = currentValue;\n        }\n    }\n    return max;\n}\n\nexport function getMinimalVector(vectors) {\n    const min = {\n        x: vectors[0].x,\n        y: vectors[0].y,\n        z: vectors[0].z\n    };\n    for (const axis of ['x','y','z']) {\n        for (const vector of vectors) {\n            const savedMinValue = min[axis];\n            const currentValue = vector[axis];\n            if (savedMinValue > currentValue) min[axis] = currentValue;\n        }\n    }\n    return min;\n}\n\n/**\n * Transforms a single block location of area 1\\*1\\*1 into a new array of block locations which fill out scaled area of a new scaled block location.\n * @param {VectorMath.Vector3} blockLocation Block location of area 1\\*1\\*1 to scale.\n * @param {VectorMath.Vector3} scaleVector Vector that defines the scale on each axis.\n * @returns {VectorMath.Vector3[]}\n */\nexport function scaleBlockLocation(blockLocation,scaleVector) {\n    const scaledLocations = [];\n    scaledLocations.push(VectorMath.vectorMultiply(blockLocation,scaleVector));\n\n    for (const axis of ['x','y','z']) {\n        const addedLocations = [];\n        for (let spanStep = scaleVector[axis];spanStep > 1;--spanStep) {\n            const addedStep = Math.max(0,spanStep-1);\n            for (let locationIndex = 0; locationIndex < scaledLocations.length;++locationIndex) {\n                const location = scaledLocations[locationIndex];\n                const scaledLocation = VectorMath.copy(location);\n                scaledLocation[axis] += addedStep;\n                addedLocations.push(scaledLocation);\n            }\n        }\n        scaledLocations.push(...addedLocations);\n    }\n    return scaledLocations;\n}\n\nexport function generateBlockPyramid(startCoord,steps = 10,callback) {\n    const vectorDefinitions = {};\n    //Tertiary vectors are sent at the beginning from the starting coordinate and also from the secondary and primary vectors. Those cover the whole Y axis.\n    vectorDefinitions.tertiary = [\n            {\n                vector: {x:0,y:1,z:0}\n            },\n            {\n                vector: {x:0,y:-1,z:0}\n            }\n    ];\n    //Secondary vectors are sent by the primary vectors. Those cover each X,Z quadrant of the area.\n    vectorDefinitions.secondary = [\n            {\n                vector: {x:0,y:0,z:1},\n                sends: vectorDefinitions.tertiary\n            },\n            {\n                vector: {x:0,y:0,z:-1},\n                sends: vectorDefinitions.tertiary\n            },\n            {\n                vector: {x:-1,y:0,z:0},\n                sends: vectorDefinitions.tertiary\n            },\n            {\n                vector: {x:1,y:0,z:0},\n                sends: vectorDefinitions.tertiary\n            }\n    ];\n    //Primary vectors are sent at the beginning from the starting coordinate. Those are the edges between the X,Z quadrants of the area.\n    vectorDefinitions.primary = [\n            {\n                vector: {x:1,y:0,z:0},\n                sends: [vectorDefinitions.secondary[0],...vectorDefinitions.tertiary]\n            },\n            {\n                vector: {x:-1,y:0,z:0},\n                sends: [vectorDefinitions.secondary[1],...vectorDefinitions.tertiary]\n            },\n            {\n                vector: {x:0,y:0,z:1},\n                sends: [vectorDefinitions.secondary[2],...vectorDefinitions.tertiary]\n            },\n            {\n                vector: {x:0,y:0,z:-1},\n                sends: [vectorDefinitions.secondary[3],...vectorDefinitions.tertiary]\n            }\n  \n    ];\n    let sentVectors = [];\n    for (let step = 0;step <= steps;step++) {\n        const lastLength = sentVectors.length;\n        if (step === 0) {\n            const location = startCoord;\n            for (let index = 0;index < vectorDefinitions.primary.length;index++) {\n                sentVectors.push({\n                    location: location,\n                    definition: vectorDefinitions.primary[index]\n                });\n            }\n            for (let index = 0;index < vectorDefinitions.tertiary.length;index++) {\n                sentVectors.push({\n                    location: location,\n                    definition: vectorDefinitions.tertiary[index]\n                });\n            }\n            callback(location);\n        }\n        for (let index = 0;index < lastLength;index++) {\n            const vector = sentVectors[index];\n            const location = VectorMath.sumVectors(vector.location,vector.definition.vector);\n            vector.location = location;\n            callback(location);\n            if (vector.definition.sends) {\n                for (let sendIndex = 0;sendIndex < vector.definition.sends.length;sendIndex++) {\n                    sentVectors.push({\n                        location: location,\n                        definition: vector.definition.sends[sendIndex]\n                    });\n                }\n            }\n        }\n    }\n}\n\nfunction getGridTriangle(verticies,options = {},callback = null) {\n\n}\n\nfunction withinBounds(coords,coord) {\n    //* check if block is within a selection\n}"]}