{"version":3,"sources":["mc_modules/ui.js"],"names":[],"mappings":"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","file":"ui.js","sourcesContent":["import { Player } from '@minecraft/server';\nimport { ModalFormData, MessageFormData, ActionFormData } from \"@minecraft/server-ui\";\nimport { logMessage } from '../plugins/debug/debug';\n\n//Form with title, accepts text fields, toggles, sliders, graphical icons and dropdown menus\nconst modalMenuData = {\n    title: \"Example Title\",\n    withIds: false,\n    structure: [\n        {\n            type: \"toggle\",\n            label: \"Hello World\",\n            defaultValue: true,\n\n        },\n        {\n            type: \"textField\",\n            label: \"Hello World\",\n            defaultValue: \"\",\n            placeholderText: \"Insert Hello World!\"\n        },\n        {\n            type: \"slider\",\n            label: \"Hello World\",\n            defaultValue: 1,\n            minimalValue: 1,\n            maximalValue: 100,\n            valueStep: 10\n        },\n        {\n            type: \"icon\",\n            iconPath: \"/textures/blocks/grass\"\n        },\n        {\n            type: \"dropdown\",\n            label: \"Hello World\",\n            defaultValueIndex: 0,\n            options: [\n                \"Hello\",\n                \"There\"\n            ]\n        }\n    ]\n}\n\n//Form with body, title and 2 buttons\nconst messageMenuData = {\n    title: \"Example Title\",\n    body: \"Example Body\",\n    button1: \"Hello World\",\n    button2: \"Goodbye World\"\n}\n\n//Form with body and title, accepts only buttons with icons\nconst actionMenuData = {\n    title: \"Example Title\",\n    body: \"Example Body\",\n    withIds: true,\n    structure: [\n        {\n            id: \"testId\",\n            text: \"Hello World\",\n            iconPath: \"/textures/blocks/grass\"\n        }\n    ]\n}\n\n//!add new features forced shit yk the drill\n//Async\n\n/**\n * @typedef {object} ModalMenuElement\n * @property {'toggle'|'textField'|'slider'|'icon'|'dropdown'} type - Type of element.\n * @property {number} [valueStep] - The step between values for a slider.\n * @property {string} [iconPath] - Will document rest later.\n*/\n\n/**\n * @typedef {ModalMenuElement & {type: 'slider', valueStep: number}} SliderModalMenuElement\n */\n\n/**\n * @typedef ModalMenuData\n * @property {string} title\n * @property {boolean} [withIds]\n * @property {ModalMenuElement[]} structure\n */\n\n/**\n * \n * @param {ModalMenuData} menuData \n * @param {Player} player \n * @returns \n */\nexport async function modalMenu(menuData,player) {\n    let menu = new ModalFormData()\n    .title(menuData.title);\n    if (menuData.structure?.length === 0) throw new Error('No structure found!');\n    for (let index = 0;index < menuData.structure.length;index++) {\n        const element = menuData.structure[index];\n        switch (element.type) {\n            case \"toggle\":\n                menu.toggle(element.label, element.defaultValue);\n                break\n            case \"textField\":\n                menu.textField(element.label, element.placeholderText, element.defaultValue);\n                break\n            case \"slider\":\n                menu.slider(element.label, element.minimalValue, element.maximalValue, element.valueStep, element.defaultValue);\n                break\n            case \"icon\":\n                menu.icon(element.iconPath);\n                break\n            case \"dropdown\":\n                menu.dropdown(element.label, element.options, element.defaultValueIndex);\n                break\n            default: \n                console.warn(`[UI Parser]: Recieved invalid type of '${element.type}' during parsing! Element has been skipped.`);\n        }\n    }\n\n    let formValues;\n    const response = await menu.show(player);\n    if (response.canceled) return response;\n    if (menuData.withIds) {\n        formValues = {};\n        for (let index = 0;index < response.formValues.length;index++) {\n            const formValue = response.formValues[index];\n            const elementId = menuData.structure[index].id;\n            formValues[elementId] = formValue;\n        }\n    } else {\n        formValues = response.formValues;\n    }\n    \n    return { formValues, canceled: response.canceled, cancelationReason: response.cancelationReason }\n}\n\nexport async function actionMenu(menuData, player) {\n    let menu = new ActionFormData()\n    .title(menuData.title)\n    .body(menuData.body);\n    for (const button of menuData.structure) {\n        menu.button(button.text,button.iconPath);\n    }\n\n    let selection;\n    const response = await menu.show(player);\n    if (response.canceled) return response;\n    if (menuData.withIds) {\n        selection = {};\n        selection.index = response.selection;\n        selection.id = menuData.structure[response.selection].id;\n    } else {\n        selection = response.selection;\n    }\n\n    return {\n        canceled: response.canceled,\n        cancelationReason: response.cancelationReason,\n        selection\n    }\n}\n\nexport async function messageMenu(menuData, player) {\n    const menu = new MessageFormData()\n    .title(menuData.title)\n    .body(menuData.body)\n    .button1(menuData.button1)\n    .button2(menuData.button2);\n\n    const response = await menu.show(player);\n\n    return response;\n}"]}