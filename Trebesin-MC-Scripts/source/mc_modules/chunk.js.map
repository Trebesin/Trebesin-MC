{"version":3,"sources":["mc_modules/chunk.js"],"names":[],"mappings":"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","file":"chunk.js","sourcesContent":["/*\r\n    \"chunk.js\" - Helper functions to work with MC chunks.\r\n    Copyright (C) 2023  PavelDobCZ23\r\n\r\n    This program is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    This program is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU General Public License for more details.\r\n\r\n    You should have received a copy of the GNU General Public License\r\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\r\n*/\r\n\r\nimport { world } from '@minecraft/server';\r\nimport { arrayToObject, insertToArray } from '../js_modules/array';\r\n\r\nconst TICK_DISTANCE = 4;\r\nconst WORLD_HEIGHT_RANGE = [-64,319];\r\nconst DIMENSIONS = ['minecraft:overworld','minecraft:nether','minecraft:the_end'];\r\n\r\nfunction getOriginChunkCoord(location) {\r\n    const coordX = Math.floor(location.x/16) * 16;\r\n    const coordY = Math.floor(location.y/16) * 16;\r\n    const coordZ = Math.floor(location.z/16) * 16;\r\n    return {x:coordX,y:coordY,z:coordZ};\r\n}\r\n\r\nfunction getAbsoluteChunkCoord(location) {\r\n    const coordX = Math.floor(location.x/16);\r\n    const coordY = Math.floor(location.y/16);\r\n    const coordZ = Math.floor(location.z/16);\r\n    return {x:coordX,y:coordY,z:coordZ};\r\n}\r\n\r\nfunction getRelativeChunkCoord(location) {\r\n    const coordX = location.x % 16;\r\n    const coordY = location.y >= 0 ? location.y % 16 : 15 - location.y % 16;\r\n    const coordZ = location.z % 16;\r\n    return {x:coordX,y:coordY,z:coordZ};  \r\n}\r\n\r\nfunction iterateLoadedChunks(centerChunk,callback,tickDistance) {\r\n    const tickDistanceMax = tickDistance**2 + 1;\r\n    for (let xVector = 0;xVector <= tickDistance;xVector++) {\r\n        for (let zVector = 0;zVector**2 + xVector**2 <= tickDistanceMax;zVector++) {\r\n            callback({x:xVector + centerChunk.x ,z:zVector + centerChunk.z});\r\n            if (xVector !== 0) {\r\n                callback({x:-xVector + centerChunk.x ,z:zVector + centerChunk.z});\r\n                if (zVector !== 0) callback({x:-xVector + centerChunk.x, z:-zVector + centerChunk.z});\r\n            }\r\n            if (zVector !== 0) callback({x:xVector + centerChunk.x, z:-zVector + centerChunk.z});\r\n        }\r\n    }\r\n}\r\n\r\nfunction getSubchunksCoords(chunkCoord,realCoordinates = false) {\r\n    const range = (WORLD_HEIGHT_RANGE[1] - WORLD_HEIGHT_RANGE[0])/16;\r\n    const coords = [];\r\n    for (let index = 0;index <= range;index++) {\r\n        if (realCoordinates) {\r\n            coords.push({x:chunkCoord.x*16,y:index*16 + WORLD_HEIGHT_RANGE[0],z:chunkCoord.z*16});\r\n        } else {\r\n            coords.push({x:chunkCoord.x,y:index,z:chunkCoord.z});\r\n        }\r\n    }\r\n    return coords;\r\n}\r\nclass ChunkManager {\r\n    constructor(options = {}) {\r\n        Object.assign(options,{tickDistance:TICK_DISTANCE,dimensions:DIMENSIONS});\r\n        this.#tickDistance = options.tickDistance;\r\n        const dimensions = options.dimensions;\r\n        for (let index = 0;index < dimensions.length;index++) {\r\n            const dimension = DIMENSIONS[index];\r\n            this.#centerChunks[dimension] = [];\r\n            this.#loadedChunks[dimension] = [];\r\n            this.#forcedChunks[dimension] = [];\r\n        }\r\n    }\r\n\r\n    updateLoadedChunks(players = null) {\r\n        let updateChunks = false;\r\n        //Get all Ids and have everything as an object\r\n        const playerIds = new Set(Object.keys(this.#playerChunks));\r\n        const currentPlayers = arrayToObject(players ?? world.getAllPlayers(),(player) => player.id);\r\n        for (const playerId in currentPlayers) playerIds.add(playerId);\r\n\r\n        for (const playerId of playerIds) {\r\n            const player = currentPlayers[playerId];\r\n            const savedPlayerData = this.#playerChunks[playerId];\r\n\r\n            //Player is no longer in the world:\r\n            if (player == null) {\r\n                updateChunks = true;\r\n                //Update chunk player left from:\r\n                this.#playerChunks[playerId] = null;\r\n\r\n                const oldCenterChunk = this.#centerChunks[savedPlayerData.dimensionId].find((chunk) =>\r\n                    chunk.x === savedPlayerData.chunk.x &&\r\n                    chunk.z === savedPlayerData.chunk.z\r\n                );\r\n                oldCenterChunk.players--;\r\n                continue;\r\n            }\r\n\r\n            const playerData = {\r\n                dimensionId: player.dimension.id,\r\n                chunk: getAbsoluteChunkCoord(player.location)\r\n            };\r\n\r\n            if (\r\n                playerData.dimensionId !== savedPlayerData?.dimension ||\r\n                playerData.chunk.x !== savedPlayerData?.chunk.x ||\r\n                playerData.chunk.z !== savedPlayerData?.chunk.z\r\n            ) {\r\n                updateChunks = true;\r\n                //Update chunk player moved into:\r\n                const newCenterChunk = this.#centerChunks[playerData.dimensionId].find((chunk) =>\r\n                    chunk.x === playerData.chunk.x &&\r\n                    chunk.z === playerData.chunk.z\r\n                );\r\n                //Create new chunk if it isn't saved yet:\r\n                if (newCenterChunk == null) {\r\n                    this.#centerChunks[playerData.dimensionId].push({x: playerData.chunk.x ,z: playerData.chunk.z ,players: 1});\r\n                } else {\r\n                    newCenterChunk.players++;\r\n                }\r\n\r\n                //Update chunk player moved from, if player was saved in any:\r\n                if (savedPlayerData != null) {\r\n                    const oldCenterChunk = this.#centerChunks[savedPlayerData.dimensionId].find((chunk) =>\r\n                        chunk.x === savedPlayerData.chunk.x &&\r\n                        chunk.z === savedPlayerData.chunk.z\r\n                    );\r\n                    oldCenterChunk.players--;\r\n                }\r\n            }\r\n        }\r\n\r\n        //Update loaded chunks if players have moved between chunks, left or joined:\r\n        if (updateChunks) {\r\n            for (const dimensionId in this.#centerChunks) {\r\n                const centerChunks = this.#centerChunks[dimensionId];\r\n                const forcedChunks = this.#centerChunks[dimensionId];\r\n                const loadedChunks = [];\r\n                //Getting forced chunks:\r\n                for (let index = 0;index < forcedChunks.length;index++) {\r\n                    const chunk = forcedChunks[index];\r\n                    if (loadedChunks.find((value) => value.x === chunk.x && value.z === chunk.z) == null) loadedChunks.push({x:chunk.x,z:chunk.z});\r\n                }\r\n                //Getting player loaded chunks:\r\n                for (let index = 0;index < centerChunks.length;index++) {\r\n                    const centerChunk = centerChunks[index];\r\n                    iterateLoadedChunks(centerChunk,(chunk) => {\r\n                        if (loadedChunks.find((value) => value.x === chunk.x && value.z === chunk.z) == null) loadedChunks.push(chunk);\r\n                    },this.#tickDistance);\r\n                }\r\n                this.#loadedChunks[dimensionId] = loadedChunks;\r\n            }\r\n        }\r\n        return this.#loadedChunks;\r\n    }\r\n\r\n    addForcedChunk(dimensionId,chunk) {\r\n        return insertToArray(this.#forcedChunks[dimensionId],chunk);\r\n    }\r\n\r\n    removeForcedChunk(dimensionId,index) {\r\n        delete this.#forcedChunks[dimensionId][index];\r\n    }\r\n\r\n    get loadedChunks() {\r\n        return this.#loadedChunks;\r\n    }\r\n\r\n    #tickDistance;\r\n    #forcedChunks = {};\r\n    #playerChunks = {};\r\n    #centerChunks = {};\r\n    #loadedChunks = {};\r\n}\r\n\r\n\r\nexport {\r\n    ChunkManager, \r\n    getSubchunksCoords, \r\n    getAbsoluteChunkCoord, \r\n    getOriginChunkCoord, \r\n    getRelativeChunkCoord, \r\n    iterateLoadedChunks\r\n}"]}