{"version":3,"sources":["mc_modules/network/database-api.js"],"names":[],"mappings":"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","file":"database-api.js","sourcesContent":["\"use strict\";\nimport {http,HttpRequest,HttpRequestMethod} from '@minecraft/server-net';\nimport { SecretString } from '@minecraft/server-admin';\nimport { logMessage } from '../../plugins/debug/debug';\n\n/**\n * Class for creating asyncronous MySql database connections using DB REST API.\n */\nclass DatabaseConnection {\n    /**\n     * Base constructor for the DB REST API connection.\n     * @param {object} options Constructor options.\n     * @param {object} options.connection Required object that defines options of the connection to the database following the docs of Node.js `mysql2` library.\n     * @param {string} options.connection.host URL of the database.\n     * @param {string} options.connection.user Username to log into the database.\n     * @param {string} options.connection.password Password to log into the database.\n     * @param {object} options.server Information about the DB REST API host.\n     * @param {string} options.server.url URL to the DB REST API host.\n     * @param {string || SecretString} options.server.username Username for logging to the DB REST API.\n     * @param {string || SecretString} options.server.password Password for logging to the DB REST API.\n     */\n    constructor(options) {\n        if (\n            !options?.connection?.host || \n            !options?.connection?.user || \n            !options?.connection?.password || \n            !options?.server?.url || \n            !options?.server?.username || \n            !options?.server?.password\n        ) {\n            throw new Error('Missing required object properties!');\n        } else {\n            this.#options = options;\n        }\n    }\n\n    /**\n     * Attempts to disconnect the connection.\n     * @param {number} [attempts] Maximal amount of attemps it should make to disconnect.\n     */\n    async disconnect(attempts = 0) {\n        return new Promise(async (resolve,reject) => {\n            const request = new HttpRequest(this.#options.server.url+'/sql/disconnect')\n            .addHeader('password',this.#options.server.password)\n            .addHeader('username',this.#options.server.username)\n            .addHeader('content-type','application/json')\n            .addHeader('accept','text/plain')\n            .setBody('{}')\n            .setMethod(HttpRequestMethod.POST)\n            .setTimeout(4);\n            const response = await http.request(request);\n            if (response.status === 200) {\n                this.#token = null;\n                resolve(response);\n            } else if (response.status === 400) {\n                reject(response)\n            } else if (attempts > 0) {\n                resolve(await this.disconnect(attempts - 1));\n            } else {\n                resolve(response);\n            }\n        });\n    }\n\n    /**\n     * Attempts to connect to the DB REST API.\n     * @param {number} [attempts] Maximal amount of attemps it should make to connect.\n     */\n    async connect(attempts = 0) {\n        return new Promise(async (resolve,reject) => {\n            const request = new HttpRequest(this.#options.server.url+'/sql/connect')\n            .addHeader('password',this.#options.server.password)\n            .addHeader('username',this.#options.server.username)\n            .addHeader('content-type','application/json')\n            .addHeader('accept','text/plain')\n            .setBody(JSON.stringify(this.#options.connection))\n            .setMethod(HttpRequestMethod.POST)\n            .setTimeout(4);\n            const response = await http.request(request);\n            if (response.status === 200) {\n                logMessage('200!')\n                this.#token = JSON.parse(response.body).token;\n                resolve(response);\n            } else if (response.status === 400) {\n                logMessage('400!')\n                const disconnectResponse = await this.disconnect(2);\n                if (disconnectResponse.status === 200) {\n                    resolve(await this.connect(attempts));\n                } else {\n                    reject(`Unable to disconnect existing connection to reconnect!\\n[${disconnectResponse.status}] - ${disconnectResponse.body}`);\n                }\n            } else if (attempts > 0) {\n                logMessage('New attempt!')\n                resolve(await this.connect(attempts - 1));\n            } else {\n                logMessage('Other response!')\n                resolve(response);\n            }\n        });\n    }\n\n    /**\n     * Attempts to query the database.\n     * @param {object} queryOptions Required object that defines options to query the database following the docs of Node.js `mysql2` module.\n     * @param {string} queryOptions.sql SQL code used to query the database.\n     * @param {number} queryOptions.timeout Amount of time to wait before the query on the database gets timed out.\n     * @param {object} options\n     * @param {boolean} [options.fullResponse] Decides whether the full body reponse is required or if numerical code is enough.\n     * @param {number} [options.attempts] Maximal amount of attemps it should make to query the database.\n     * @param {number} [options.timeout] Timeout for the request in seconds.\n     */\n    async query(queryOptions,options = {}) {\n        const reqOptions = Object.assign({fullResponse:true,attempts:0,timeout:3},options);\n        return new Promise(async (resolve,reject) => {\n            if (!this.#token) reject('Not Connected!');\n            const request = new HttpRequest(this.#options.server.url+'/sql')\n            .addHeader('token',this.#token)\n            .addHeader('username',this.#options.server.username)\n            .addHeader('content-type','application/json')\n            .addHeader('full-response',reqOptions.fullResponse ? 'true' : 'false')\n            .addHeader('accept','text/plain')\n            .setBody(JSON.stringify(queryOptions))\n            .setMethod(HttpRequestMethod.POST)\n            .setTimeout(reqOptions.timeout);\n            const response = await http.request(request);\n            if (response.status === 200) {\n                resolve(JSON.parse(response.body));\n            } else if (response.status === 403) {\n                const reConnected = await this.connect(2);\n                if (reConnected.status === 200) {\n                    resolve(await this.query(queryOptions,reqOptions));\n                } else {\n                    reject(`Token denied, unable reconnect to the database!\\n[${reConnected.status}] - ${reConnected.body}`);\n                }\n            } else if (reqOptions.attempts > 0) {\n                resolve(await this.query(queryOptions,reqOptions));\n            } else {\n                reject(response);\n            }\n        });\n    }\n\n    #options = {\n        connection: {\n            host: null,\n            user: null,\n            password: null\n        },\n        server: {\n            url: null,\n            password: null,\n            username: null\n        }\n    };\n\n    #token = null;\n}\n\nexport { DatabaseConnection }"]}