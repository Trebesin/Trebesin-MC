{"version":3,"sources":["mc_modules/network/logging-api.js"],"names":[],"mappings":"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","file":"logging-api.js","sourcesContent":["import {http,HttpRequest,HttpRequestMethod} from '@minecraft/server-net';\r\nimport { SecretString } from '@minecraft/server-admin';\r\n\r\n/**\r\n * Class for sending log messages using Logging REST API.\r\n */\r\nclass LoggingConnection {\r\n    /**\r\n     * Base constructor for the Logging REST API connection.\r\n     * @param {object} options Constructor options.\r\n     * @param {object} options.server Information about the Logging REST API host.\r\n     * @param {string} options.server.url URL to the Logging REST API host.\r\n     * @param {string || SecretString} options.server.username Username for logging to the Logging REST API.\r\n     * @param {string || SecretString} options.server.password Password for logging to the Logging REST API.\r\n     */\r\n    constructor(options) {\r\n        if (\r\n            !options?.server?.url || \r\n            !options?.server?.username || \r\n            !options?.server?.password\r\n        ) {\r\n            throw new Error('Missing required object properties!');\r\n        } else {\r\n            this.#options = options;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Attempts to disconnect the connection.\r\n     * @param {number} [attempts] Maximal amount of attemps it should make to disconnect.\r\n     */\r\n    async disconnect(attempts = 0) {\r\n        return new Promise(async (resolve,reject) => {\r\n            const request = new HttpRequest(this.#options.server.url+'/log/disconnect')\r\n            .addHeader('password',this.#options.server.password)\r\n            .addHeader('username',this.#options.server.username)\r\n            .addHeader('content-type','application/json')\r\n            .addHeader('accept','text/plain')\r\n            .setBody('{}')\r\n            .setMethod(HttpRequestMethod.POST)\r\n            .setTimeout(4);\r\n            const response = await http.request(request);\r\n            if (response.status === 200) {\r\n                this.#token = null;\r\n                resolve(response);\r\n            } else if (response.status === 400) {\r\n                reject(response)\r\n            } else if (attempts > 0) {\r\n                resolve(await this.disconnect(attempts - 1));\r\n            } else {\r\n                resolve(response);\r\n            }\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Attempts to connect to the Logging REST API.\r\n     * @param {number} [attempts] Maximal amount of attemps it should make to connect.\r\n     */\r\n    async connect(attempts = 0) {\r\n        return new Promise(async (resolve,reject) => {\r\n            const request = new HttpRequest(this.#options.server.url+'/log/connect')\r\n            .addHeader('password',this.#options.server.password)\r\n            .addHeader('username',this.#options.server.username)\r\n            .addHeader('content-type','application/json')\r\n            .addHeader('accept','text/plain')\r\n            .setBody('{}')\r\n            .setMethod(HttpRequestMethod.POST)\r\n            .setTimeout(4);\r\n            const response = await http.request(request);\r\n            if (response.status === 200) {\r\n                this.#token = JSON.parse(response.body).token;\r\n                resolve(response);\r\n            } else if (response.status === 400) {\r\n                const disconnectResponse = await this.disconnect(2);\r\n                if (disconnectResponse.status === 200) {\r\n                    resolve(await this.connect(attempts));\r\n                } else {\r\n                    reject(`Unable to disconnect existing connection to reconnect!\\n[${disconnectResponse.status}] - ${disconnectResponse.body}`);\r\n                }\r\n            } else if (attempts > 0) {\r\n                resolve(await this.connect(attempts - 1));\r\n            } else {\r\n                resolve(response);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Attempts to log message to the API server consple.\r\n     * @param {string} message Message that gets logged into the API server console.\r\n     * @param {object} [options] Options\r\n     * @param {number} [options.attempts] Maximal amount of attemps it should make to log the message.\r\n     * @param {number} [options.timeout] Timeout for the request in seconds.\r\n     */\r\n    async sendLog(message,options = {}) {\r\n        const reqOptions = Object.assign({attempts:0,timeout:3},options);\r\n        return new Promise(async (resolve,reject) => {\r\n            if (!this.#token) reject('Not Connected!');\r\n            const request = new HttpRequest(this.#options.server.url+'/log')\r\n            .addHeader('token',this.#token)\r\n            .addHeader('username',this.#options.server.username)\r\n            .addHeader('content-type','application/json')\r\n            .addHeader('blank','true')\r\n            .setBody(JSON.stringify({message}))\r\n            .setMethod(HttpRequestMethod.POST)\r\n            .setTimeout(reqOptions.timeout);\r\n            const response = await http.request(request);\r\n            if (response.status === 200) {\r\n                resolve(JSON.parse(response.body));\r\n            } else if (response.status === 403) {\r\n                const reConnected = await this.connect(2);\r\n                if (reConnected.status === 200) {\r\n                    resolve(await this.sendLog(message,reqOptions));\r\n                } else {\r\n                    reject(`Token denied, unable to reconnect to the log!\\n[${reConnected.status}] - ${reConnected.body}`);\r\n                }\r\n            } else if (reqOptions.attempts > 0) {\r\n                reqOptions.attempts--;\r\n                resolve(await this.sendLog(message,reqOptions));\r\n            } else {\r\n                reject(response);\r\n            }\r\n        });\r\n    }\r\n\r\n    #options = {\r\n        connection: {\r\n            host: null,\r\n            user: null,\r\n            password: null\r\n        },\r\n        server: {\r\n            url: null,\r\n            password: null,\r\n            username: null\r\n        }\r\n    };\r\n\r\n    #token = null;\r\n}\r\n\r\nexport { LoggingConnection }"],"sourceRoot":"../../../scripts/"}