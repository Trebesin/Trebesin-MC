{"version":3,"sources":["mc_modules/particles.js"],"names":[],"mappings":"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","file":"particles.js","sourcesContent":["import * as Mc from '@minecraft/server';\nimport {arrayDifference} from '../js_modules/array';\nimport {getGridLine} from '../js_modules/geometry';\nimport * as VectorMath from '../js_modules/vectorMath';\nimport { logMessage } from '../plugins/debug/debug';\nimport { EDGE_AXES,EDGE_COORDS } from './constants';\n\nexport function spawnBlockSelection(particle,coords,dimension,molang) {\n    const cornerMin = [\n        Math.min(coords[0].x,coords[1].x),\n        Math.min(coords[0].y,coords[1].y),\n        Math.min(coords[0].z,coords[1].z)\n    ];\n    const cornerMax = [\n        Math.max(coords[0].x,coords[1].x),\n        Math.max(coords[0].y,coords[1].y),\n        Math.max(coords[0].z,coords[1].z)\n    ];\n    const corners = [cornerMin,cornerMax];\n    \n    for (let mainAxis = 0;mainAxis < 3;mainAxis++) {\n        const otherAxis = arrayDifference([0,1,2],[mainAxis]);\n        for (let axisPoint = cornerMin[mainAxis];axisPoint <= cornerMax[mainAxis] + 1;axisPoint++) {\n            for (let corner0 = 0;corner0 < corners.length;corner0++) {\n                for (let corner1 = 0;corner1 < corners.length;corner1++) {\n                    const location = [];\n                    location[mainAxis] = axisPoint;\n                    location[otherAxis[0]] = corners[corner0][otherAxis[0]] + corner0;\n                    location[otherAxis[1]] = corners[corner1][otherAxis[1]] + corner1;\n\n                    const spawnLocation = {x:location[0],y:location[1],z:location[2]};\n                    dimension.spawnParticle(particle,spawnLocation,molang);\n                }\n            }\n        }\n    }\n}\n\nexport function spawnLine(particle,coords,dimension,molang,stepBy = 1) {\n    getGridLine(coords,{stepBy,round:false},(coord) => {\n        dimension.spawnParticle(particle,coord,molang);\n    })\n}\n\nexport function highlightBlockCoords(particle,coords,dimension,molang) {\n    const blocksSet = createLocationSet(coords);\n    for (let blockIndex = 0;blockIndex < coords.length;blockIndex++) {\n        const block = coords[blockIndex];\n        for (let edgeAxisIndex = 0;edgeAxisIndex < EDGE_AXES.length;edgeAxisIndex++) {\n            const edgeAxis = EDGE_AXES[edgeAxisIndex];\n            for (let edgeCoordIndex = 0;edgeCoordIndex < EDGE_COORDS.length;edgeCoordIndex++) {\n                const edgeCoord = EDGE_COORDS[edgeCoordIndex];\n                const sideALoc = {};\n                sideALoc[edgeAxis[0]] = edgeCoord[0];\n                const sideACoord = sumLocations(block,sideALoc);\n                const sideABlock = blocksSet.has(`${sideACoord.x},${sideACoord.y},${sideACoord.z}`);\n\n                const sideBLoc = {};\n                sideBLoc[edgeAxis[1]] = edgeCoord[1];\n                const sideBCoord = sumLocations(block,sideBLoc);\n                const sideBBlock = blocksSet.has(`${sideBCoord.x},${sideBCoord.y},${sideBCoord.z}`);\n\n                const cornerLoc = {};\n                cornerLoc[edgeAxis[0]] = edgeCoord[0];\n                cornerLoc[edgeAxis[1]] = edgeCoord[1];\n                const cornerCoord = sumLocations(block,cornerLoc);\n                const cornerBlock = blocksSet.has(`${cornerCoord.x},${cornerCoord.y},${cornerCoord.z}`);\n\n                if ((!cornerBlock && sideABlock && sideBBlock) || (!sideABlock && !sideBBlock)) {\n                    drawCorner(block,cornerLoc,(location) => {\n                        dimension.spawnParticle(particle,location,molang);\n                    });\n                }\n            }\n        }\n    }\n}\n\nexport function getCornerLocations(coords,callback) {\n    const blocksSet = createLocationSet(coords);\n    for (let blockIndex = 0;blockIndex < coords.length;blockIndex++) {\n        const block = coords[blockIndex];\n        for (let edgeAxisIndex = 0;edgeAxisIndex < EDGE_AXES.length;edgeAxisIndex++) {\n            const edgeAxis = EDGE_AXES[edgeAxisIndex];\n            for (let edgeCoordIndex = 0;edgeCoordIndex < EDGE_COORDS.length;edgeCoordIndex++) {\n                const edgeCoord = EDGE_COORDS[edgeCoordIndex];\n                const sideALoc = {};\n                sideALoc[edgeAxis[0]] = edgeCoord[0];\n                const sideACoord = sumLocations(block,sideALoc);\n                const sideABlock = blocksSet.has(`${sideACoord.x},${sideACoord.y},${sideACoord.z}`);\n\n                const sideBLoc = {};\n                sideBLoc[edgeAxis[1]] = edgeCoord[1];\n                const sideBCoord = sumLocations(block,sideBLoc);\n                const sideBBlock = blocksSet.has(`${sideBCoord.x},${sideBCoord.y},${sideBCoord.z}`);\n\n                const cornerLoc = {};\n                cornerLoc[edgeAxis[0]] = edgeCoord[0];\n                cornerLoc[edgeAxis[1]] = edgeCoord[1];\n                const cornerCoord = sumLocations(block,cornerLoc);\n                const cornerBlock = blocksSet.has(`${cornerCoord.x},${cornerCoord.y},${cornerCoord.z}`);\n\n                if ((!cornerBlock && sideABlock && sideBBlock) || (!sideABlock && !sideBBlock)) {\n                    drawCorner(block,cornerLoc,callback);\n                }\n            }\n        }\n    }\n}\n\nexport function getEdgeLocations(coords,callback) {\n    const blocksSet = createLocationSet(coords);\n    for (let blockIndex = 0;blockIndex < coords.length;blockIndex++) {\n        const block = coords[blockIndex];\n        for (let edgeAxisIndex = 0;edgeAxisIndex < EDGE_AXES.length;edgeAxisIndex++) {\n            const edgeAxis = EDGE_AXES[edgeAxisIndex];\n            for (let edgeCoordIndex = 0;edgeCoordIndex < EDGE_COORDS.length;edgeCoordIndex++) {\n                const edgeCoord = EDGE_COORDS[edgeCoordIndex];\n                const sideALoc = {};\n                sideALoc[edgeAxis[0]] = edgeCoord[0];\n                const sideACoord = sumLocations(block,sideALoc);\n                const sideABlock = blocksSet.has(`${sideACoord.x},${sideACoord.y},${sideACoord.z}`);\n\n                const sideBLoc = {};\n                sideBLoc[edgeAxis[1]] = edgeCoord[1];\n                const sideBCoord = sumLocations(block,sideBLoc);\n                const sideBBlock = blocksSet.has(`${sideBCoord.x},${sideBCoord.y},${sideBCoord.z}`);\n\n                const cornerLoc = {};\n                cornerLoc[edgeAxis[0]] = edgeCoord[0];\n                cornerLoc[edgeAxis[1]] = edgeCoord[1];\n                const cornerCoord = sumLocations(block,cornerLoc);\n                const cornerBlock = blocksSet.has(`${cornerCoord.x},${cornerCoord.y},${cornerCoord.z}`);\n\n                if ((!cornerBlock && sideABlock && sideBBlock) || (!sideABlock && !sideBBlock)) {\n                    drawEdge(block,cornerLoc,callback);\n                }\n            }\n        }\n    }\n}\n\nexport function drawEdge(origin,corner,callback) {\n    const otherAxis = getStaleAxis(corner);\n    const particleCoord = getCornerOffset(origin,corner);\n    callback(particleCoord,otherAxis);\n}\n\nexport function drawCorner(origin,corner,callback) {\n    const otherAxis = getStaleAxis(corner);\n    const particleCoord = getCornerOffset(origin,corner);\n    for (let staleAxisStep = 0;staleAxisStep <= 1;staleAxisStep++) {\n        const staleAxisOffset = {};\n        staleAxisOffset[otherAxis] = staleAxisStep;\n        const particleLocation = sumLocations(particleCoord,staleAxisOffset);\n        callback(particleLocation);\n    }\n}\n/**\n * \n * @param {string} particle \n * @param {Vector3} coords \n * @param {Mc.Dimension} dimension \n * @param {Mc.MolangVariableMap} molang \n */\nexport function spawnBox(particle,coords,dimension,molang,edgeOffset = 0.005) {\n    for (const axis of ['x','y','z']) {\n        for (const addition of [-edgeOffset,1+edgeOffset]) {\n            const addedVector = {x:0,y:0,z:0};\n            addedVector[axis] = addition;\n            dimension.spawnParticle(\n                `${particle}${axis}`,\n                VectorMath.sum(coords,addedVector),\n                molang\n            );\n        }\n    }\n}\n\n/**\n * \n * @param {string} particle \n * @param {Vector3} coords \n * @param {Mc.Dimension} dimension \n * @param {Mc.MolangVariableMap} molang \n */\nexport function spawnBigBox(particle,coords,dimension,molang,span,edgeOffset) {\n    const additions = [-edgeOffset,edgeOffset];\n    for (const axis of ['x','y','z']) {\n        for (let i = 0;i < 2;i++) {\n            let addition = additions[i];\n            if (i === 1) {\n                addition = addition+span[axis];\n            }\n            const addedVector = {x:0,y:0,z:0};\n            addedVector[axis] = addition;\n            dimension.spawnParticle(\n                `${particle}${axis}`,\n                VectorMath.sum(coords,addedVector),\n                molang\n            );\n        }\n    }\n}\n\n/**\n * \n * @param {any[]} array \n * @param {Function} predicate \n * @returns {number}\n */\nfunction maxIndex(array,predicate) {\n    let maxIndex = 0;\n    for (let index = 1;index < array.length;index++) {\n        const item = predicate(array[index]);\n        if (item > predicate(array[maxIndex])) maxIndex = index;\n    }\n    return maxIndex;\n}\n\n/**\n * \n * @param {import('../js_modules/vectorMath').Vector3[]} locations \n * @param {number[]} expansionAmount \n */\nexport function expandArea(locations,expansionAmounts) {\n    let newLocations = [];\n    const maxIndexes = {\n        x: maxIndex(locations,(item) => item.x),\n        y: maxIndex(locations,(item) => item.y),\n        z: maxIndex(locations,(item) => item.z)\n    }\n    for (let locationIndex = 0;locationIndex<locations.length;locationIndex++) {\n        const location = locations[locationIndex];\n        const newLocation = {};\n        for (const axis in location) {\n            newLocation[axis] = location[axis] + expansionAmounts[(maxIndexes[axis] === locationIndex ? 1 : 0)];\n        }\n        newLocations.push(newLocation);\n    }\n    return newLocations;\n}\n\n\n//TODO origin vector will prolly be needed to be define beforehand in order to manage rotation and flipping that is maintained to the origin\n//TODO infact we might need to flip x with z or something and this system wouldnt allow for that \n//TODO we need to create more powerful function\n/**\n * \n * @param {string} particle \n * @param {import('../js_modules/vectorMath').Vector3[]} corners\n * @param {Mc.Dimension} dimension \n * @param {Mc.MolangVariableMap} molang \n */\nexport function spawnLineBox(particleName,corners,dimension,molang) {\n    const appliedCorners = expandArea(corners,[0,1]);\n    const span = VectorMath.sub(appliedCorners[0],appliedCorners[1]);\n\n    for (const axis of ['x','y','z']) {\n        const absoluteSpan = Math.abs(span[axis]);\n        const direction = span[axis] < 0 ? 1 : -1;\n\n        const vector = {x:0,y:0,z:0};\n        vector[axis] = direction;\n\n        let finalLocation =  VectorMath.copy(appliedCorners[1]);\n        finalLocation[axis] = appliedCorners[0][axis];\n        for (let spawnAxis of ['x','y','z']) {\n            let spawnLocation = VectorMath.copy(appliedCorners[0]);\n            if (spawnAxis != axis) {\n                spawnLocation[spawnAxis] = appliedCorners[1][spawnAxis];\n            }\n\n            molang.setSpeedAndDirection(`variable.size`,absoluteSpan,vector);\n            dimension.spawnParticle(particleName,spawnLocation,molang);\n        }\n\n        molang.setSpeedAndDirection(`variable.size`,absoluteSpan,vector);\n        dimension.spawnParticle(particleName,finalLocation,molang);\n    }\n}\n\n/**\n * \n * @param {import('../js_modules/vectorMath').Vector3[]} corners\n * @param {Mc.Color} defaultColor\n */\nexport function generateLineBox(corners,defaultColor) {\n    const particleDefinitions = [];\n    const appliedCorners = expandArea(corners,[0,1]);\n    \n    //~ Prototype code for axis colors\n    const minCorner = VectorMath.getMinimalVector(appliedCorners);\n    //~ Prototype code for axis colors\n\n    const span = VectorMath.sub(appliedCorners[1],appliedCorners[0]);\n\n    for (const axis of ['x','y','z']) {\n        //* This is a loop where the direction of the Particle is defined\n        //* 4 Particles of each direction form the box\n        const direction = {x:0,y:0,z:0};\n        direction[axis] = span[axis];\n        const length = Math.abs(direction[axis]);\n\n        for (let spawnAxis of ['x','y','z']) {\n            //* Here we take a spawn location, which is the 1st corner and then apply to it 1 coordinate of the other corner,\n            //* unless the axis is the same, that's what spawns the particle on the original corner location\n            const location = VectorMath.copy(appliedCorners[0]);\n            if (spawnAxis != axis) {\n                location[spawnAxis] = appliedCorners[1][spawnAxis];\n            }\n\n            //~ Prototype code for axis colors\n            const color = directionLiesOnOrigin(\n                location, direction, minCorner\n            ) ? {\n                red: axis === 'x' ? 1 : 0,\n                green: axis === 'y' ? 1 : 0,\n                blue: axis === 'z' ? 1 : 0,\n                alpha: defaultColor.alpha\n            } : defaultColor;\n            //~ Prototype code for axis colors\n\n            particleDefinitions.push({\n                location,direction,length,color\n            });\n        }\n        //* Here we take the 2nd corner and we apply to its axis that is rn the direction coordinate of the 1st one\n        //* That is essentially spawning it on the opposite side\n        const location = VectorMath.copy(appliedCorners[1]);\n        location[axis] = appliedCorners[0][axis];\n\n        //~ Prototype code for axis colors\n        const color = directionLiesOnOrigin(\n            location, direction, minCorner\n        ) ? {\n            red: axis === 'x' ? 1 : 0,\n            green: axis === 'y' ? 1 : 0,\n            blue: axis === 'z' ? 1 : 0,\n            alpha: defaultColor.alpha\n        } : defaultColor;\n        //~ Prototype code for axis colors\n\n        particleDefinitions.push({\n            location,direction,length,color\n        });\n    }\n\n    return particleDefinitions;\n}\n\n/**\n * Helper function to proccess the `location` and `direction` vectors and checks if one of its ends lies on the `origin`.\n * @param {object} vectors\n * @param {import('../js_modules/vectorMath').Vector3} location\n * @param {import('../js_modules/vectorMath').Vector3} direction\n * @param {import('../js_modules/vectorMath').Vector3} origin\n */\nfunction directionLiesOnOrigin(location,direction,origin) {\n    return (\n        VectorMath.compare(location,origin) ||\n        VectorMath.similar(VectorMath.sum(location,direction),origin,0.1)\n    );\n}\n\n/**\n * @param {string} particleName ID of the particle to spawn.\n * @param {Mc.Dimension} dimension The dimension where the particle should spawn.\n * @param {VectorMath.Vector3} location The origin location of the line particle/\n * @param {VectorMath.Vector3} direction Direction the line particle is pointing towards from the origin.\n * @param {number} length The length of the particle.\n * @param {number} time The time in seconds the particle should be alive for.\n * @param {Mc.Color} color Color the particle should have represneted in RGBA intensity 0-1.\n */\nexport function spawnParticleLine(particleName,dimension,location,direction,length = 1,time = 1,color = {red:0,green:0,blue:0,alpha:1}) {\n    const molang = new Mc.MolangVariableMap();\n    molang.setSpeedAndDirection(`variable.time`,time,{x:0,y:0,z:0});\n    molang.setSpeedAndDirection(`variable.size`,length,direction);\n    molang.setColorRGBA(`variable.color`,color);\n    dimension.spawnParticle(particleName,location,molang);\n}\n\n\n\nexport function createLocationSet(locations) {\n    const locationSet = new Set();\n    for (let locationIndex = 0;locationIndex < locations.length;locationIndex++) {\n        const location = locations[locationIndex];\n        locationSet.add(`${location.x},${location.y},${location.z}`);\n    }\n    return locationSet;\n}\n\nexport function createLocationSet2(locations) {\n    const locationSet = new Set();\n    for (let locationIndex = 0;locationIndex < locations.length;locationIndex++) {\n        const location = locations[locationIndex][0];\n        const axis = locations[locationIndex][1];\n        locationSet.add(`${location.x},${location.y},${location.z},${axis}`);\n    }\n    return locationSet;\n}\n\nexport function locationToString(location,axis) {\n    return `${location.x},${location.y},${location.z},${axis}`;\n}\n\nexport function stringToLocation(string) {\n    const positionArray = string.split(',');\n    return [\n        {\n            x:parseInt(positionArray[0]),\n            y:parseInt(positionArray[1]),\n            z:parseInt(positionArray[2])\n        },\n        positionArray[3]\n    ];\n}\n\nexport function sumLocations(locationA,locationB) {\n    return {\n        x: (locationA.x ?? 0) + (locationB.x ?? 0),\n        y: (locationA.y ?? 0) + (locationB.y ?? 0),\n        z: (locationA.z ?? 0) + (locationB.z ?? 0)\n    }\n}\n\nexport function getStaleAxis(coord) {\n    if ((coord.x ?? 0) === 0) return 'x';\n    if ((coord.y ?? 0) === 0) return 'y';\n    if ((coord.z ?? 0) === 0) return 'z';\n}\n\nexport function getCornerOffset(origin,corner) {\n    return {\n        x: origin.x + (corner.x === 1 ? 1 : 0),\n        y: origin.y + (corner.y === 1 ? 1 : 0),\n        z: origin.z + (corner.z === 1 ? 1 : 0)\n    }\n}"]}