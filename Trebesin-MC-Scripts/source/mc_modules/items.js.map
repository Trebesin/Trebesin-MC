{"version":3,"sources":["mc_modules/items.js"],"names":[],"mappings":"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","file":"items.js","sourcesContent":["import * as Mc from '@minecraft/server';\r\nimport { ITEM_STATE_COMPONENTS } from './constants';\r\n\r\nexport function compare(itemA,itemB) {\r\n    if (\r\n        itemA?.typeId !== itemB?.typeId || \r\n        itemA?.data !== itemB?.data ||\r\n        itemA?.nameTag !== itemB?.nameTag\r\n    ) return false;\r\n    return true;\r\n}\r\n\r\n//## Comparing state data:\r\n/**\r\n * Function to compare if 2 item states are matching.\r\n * @param {ItemState} itemStateA First item state data to compare.\r\n * @param {ItemState} itemStateB Second item state data to compare.\r\n * @returns {boolean} Result of the comparison.\r\n */\r\nexport function compareStates(itemStateA, itemStateB) {\r\n    //### Checking lore\r\n    const maxLoreLength = Math.max(itemStateA?.lore?.length,itemStateB?.lore?.length);\r\n    for (let loreIndex = 0;loreIndex < maxLoreLength;++loreIndex) {\r\n        if (itemStateA.lore[loreIndex] !== itemStateB.lore[loreIndex]) return false;\r\n    }\r\n    //### Rest of the item\r\n    return (\r\n        itemStateA.typeId === itemStateB.typeId &&\r\n        itemStateA.nameTag === itemStateB.nameTag &&\r\n        itemStateA.amount === itemStateB.amount &&\r\n        itemStateA.keepOnDeath === itemStateB.keepOnDeath &&\r\n        itemStateA.lockMode === itemStateB.lockMode &&\r\n        compareComponents(itemStateA.components,itemStateB.components)\r\n    );\r\n}\r\n/**\r\n * Function to compare if 2 item component states are matching.\r\n * @param {ItemComponentState} componentsA First item component data to compare.\r\n * @param {ItemComponentState} componentsB Second item component data to compare.\r\n * @returns {boolean | undefined} Returns the result of the comparison or `undefined` if any of the components are invalid.\r\n */\r\nexport function compareComponents(componentsA,componentsB) {\r\n    if (componentsA == null || componentsB == null) return undefined;\r\n\r\n    for (const componentId in ITEM_STATE_COMPONENTS) {\r\n        const componentDataA = componentsA[componentId];\r\n        const componentDataB = componentsB[componentId];\r\n        if (componentDataA != null && componentDataB != null) {\r\n            switch (componentId) {\r\n                case 'durability': {\r\n                    if (componentDataA.damage !== componentDataB.damage) return false;\r\n                }   break;\r\n                case 'enchantments': {\r\n                    for (const enchantId in componentDataA) {\r\n                        if (componentDataA[enchantId] != componentDataB[enchantId]) return false;\r\n                    }\r\n                    for (const enchantId in componentDataB) {\r\n                        if (componentDataB[enchantId] != componentDataA[enchantId]) return false;\r\n                    }\r\n                }   break;\r\n            }\r\n        } else if (\r\n            (componentDataA != null && componentDataB == null) ||\r\n            (componentDataA == null && componentDataB != null)\r\n        ) return false;\r\n    }\r\n    return true;\r\n}\r\n\r\n//## Getting state data:\r\n/**\r\n * Function to create `ItemStack` class from an `ItemState` that defines it.\r\n * @param {ItemState} itemState Item state defining what item to create.\r\n * @returns {Mc.ItemStack} Item stack created from the item state.\r\n */\r\nexport function createStack(itemState) {\r\n    if (itemState?.typeId == null) return null;\r\n    const itemStack = new Mc.ItemStack(itemState.typeId,itemState.amount);\r\n    itemStack.nameTag = itemState.nameTag;\r\n    itemStack.setLore(itemState.lore);\r\n    itemStack.keepOnDeath = itemState.keepOnDeath;\r\n    itemStack.lockMode = itemState.lockMode;\r\n    applyComponents(itemStack,itemState.components);\r\n    return itemStack;\r\n}\r\n/**\r\n * \r\n * @param {Mc.ItemStack} itemStack \r\n * @param {ItemComponentState} itemComponents \r\n */\r\nexport function applyComponents(itemStack,itemComponents) {\r\n    for (let componentId in itemComponents) {\r\n        const componentData = itemComponents[componentId];\r\n        const component = itemStack.getComponent(componentId);\r\n        if (component == null) continue;\r\n        switch (componentId) {\r\n            case 'durability': {\r\n                component.damage = componentData.damage;\r\n            }   break;\r\n            case 'enchantments': {\r\n                const enchantList = component.enchantments;\r\n                for (const enchantId in componentData) {\r\n                    enchantList.addEnchantment(\r\n                        new Mc.Enchantment(\r\n                            Mc.MinecraftEnchantmentTypes[enchantId],\r\n                            componentData[enchantId]\r\n                        )\r\n                    );\r\n                }\r\n            }   break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//## Getting state data:\r\n/**\r\n * Function to copy `ItemStack` class objects with data that define its state.\r\n * @param {Mc.ItemStack} item Item to copy.\r\n * @returns {ItemState} Object containing copies of selected properties of the item.\r\n */\r\nexport function copyState(item) {\r\n    if (item?.typeId == null) return null;\r\n    return {\r\n        typeId: item.typeId,\r\n        nameTag: item.nameTag,\r\n        amount: item.amount,\r\n        lore: item?.getLore(),\r\n        keepOnDeath: item.keepOnDeath,\r\n        lockMode: item.lockMode,\r\n        components: copyComponents(item)\r\n    };\r\n}\r\n/**\r\n * Function to copy all components of an item.\r\n * @param {Mc.ItemStack} item Item to copy.\r\n * @returns {ItemComponentState} Object containing copies of components of the item. `undefined` if the item is invalid.\r\n */\r\nexport function copyComponents(item) {\r\n    if (item == null) return undefined;\r\n    const itemComponents = {};\r\n\r\n    /** @type {Mc.ItemDurabilityComponent} */\r\n    const durability = item.getComponent('durability');\r\n    if (durability != null) {\r\n        itemComponents.durability = {};\r\n        itemComponents.durability.damage = durability.damage;\r\n    }\r\n\r\n    /** @type {Mc.ItemEnchantsComponent} */\r\n    const enchants = item.getComponent('enchantments');\r\n    if (enchants != null) {\r\n        itemComponents.enchantments = {};\r\n        for (const enchant of enchants.enchantments) itemComponents.enchantments[enchant.type.id] = enchant.level;\r\n    }\r\n\r\n    return itemComponents;\r\n}\r\n\r\n//# Types / Constants:\r\n\r\n/**\r\n * @typedef ItemState\r\n * @prop {string} typeId ID of the type of the item.\r\n * @prop {state} nameTag The name of the item.\r\n * @prop {number} amount Number of items in the stack.\r\n * @prop {string[]} lore Lore strings of the item.\r\n * @prop {boolean} keepOnDeath Defines if the item is kept in player's inventory after death.\r\n * @prop {Mc.ItemLockMode} lockMode Defines if and how the item is locked in player's inventory.\r\n * @prop {ItemComponentState} components State of the item components.\r\n */\r\n\r\n/**\r\n * @typedef ItemComponentState Contains data of item components saved in a simple object.\r\n * @prop {object} durability Defines durability of the item.\r\n * @prop {number} durability.damage Defines how damaged the item is.\r\n * @prop {Object.<string,number>} enchantments Object of numerical value with keys defining the specific enchanment type and the number its level.\r\n */"],"sourceRoot":"../../scripts/"}