{"version":3,"sources":["mc_modules/commandParser.js"],"names":[],"mappings":"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","file":"commandParser.js","sourcesContent":["import { world, system, BlockAreaSize, Player, MinecraftBlockTypes, BlockPermutation } from '@minecraft/server';\r\nimport { setVectorLength } from './../js_modules/vector';\r\nimport { filter } from '../js_modules/array';\r\nimport { randInt } from '../js_modules/random';\r\nimport { findCharIndex, findLastCharIndex, findNumber } from '../js_modules/string';\r\nimport { sendMessage } from './players';\r\nimport { logMessage } from '../plugins/debug/debug';\r\nimport { sendLongMessage } from '../plugins/backend/backend';\r\n\r\n//# Type Definitions:\r\n/**\r\n* @callback CommandDefinitionRun\r\n* @param {Player} sender - Actor that has invoked the command.\r\n* @param {object} parameters - Object of parameters, keys are named after ids specified in command definition parameters and values are parsed user input.\r\n*/\r\n\r\n/**\r\n* @callback CommandDefinitionSenderCheck\r\n* @param {Player} sender Actor that has invoked the command.\r\n*/\r\n\r\n/**\r\n* @typedef CommandDefinitionParameter\r\n* @property {string} id ID of the parameter.\r\n* @property {('string'|'integer'|'float'|'boolean'|'position'|'selector'|'json'|'blockPermutation')} type - Type of the parameter defining what the user input should look like.\r\n* @property {number} [array] Number defining an array of parameters, the value corresponds to its length.\r\n* @property {boolean} [optional] Defines that the command will successfully execute even without this and following parameters specified by the user.\r\n* @property {boolean} [fullArray] Only for `array: <number>`, allows the array to be returned even if it doesn't contain the same amount of elements as specified by the property.\r\n* @property {boolean} [playersOnly] Only for `type: 'selector'`, sets the selector to only allow `@a`,`@p` and `@r(type: 'minecraft:player')`\r\n* @property {Object.<string,CommandDefinitionParameter[]>} [choice] Makes parameter only allow values that correspond to keys of this object and then starts parsing the following parameters according to its value.\r\n*/\r\n\r\n/**\r\n* @typedef CommandDefinition\r\n* @property {string} description Description of the command shown in the default help command.\r\n* @property {string[]} [aliases] Aliases to invoke the command. Repeating the same aliases might have unexpected results.\r\n* @property {CommandDefinitionParameter[]} parameters All parameters that the command takes.\r\n* @property {any[]} [arguments] Array of any additional arguments that will be passed to the command function when it's ran.\r\n* @property {CommandDefinitionSenderCheck} [senderCheck] Optional function that needs to return `true` in order to allow execution of the command.\r\n* @property {CommandDefinitionRun} run Function that runs when the command is invoked.\r\n*/\r\n\r\n//#Main Command Parser Class:\r\n//Finish help command, add parameter preprocesser\r\nclass CommandParser {\r\n    /**\r\n     * Creates a new command parser instance.\r\n     * @param {object} options \r\n     */\r\n    constructor(options = {}) {\r\n        for (const option in options) {\r\n            this.#options[option] = options[option];\r\n        }\r\n        world.beforeEvents.chatSend.subscribe(async (eventData) => {\r\n            const {message, sender} = eventData;\r\n\r\n            if (message.startsWith(this.#options.prefix)) {\r\n                eventData.cancel = true;\r\n                logMessage(`player ${sender.name} executed command: ${message}`)\r\n                const messageArray = message.split(' ');\r\n                let commandInput = messageArray[0].slice(this.#options.prefix.length);\r\n                if (!this.#options.caseSensitive) {\r\n                    commandInput = commandInput.toLowerCase();\r\n                }\r\n                system.runTimeout(\r\n                    () => this.runCommand(commandInput,messageArray.slice(1).join(' '),sender), 1\r\n                );\r\n            }\r\n        });\r\n        \r\n        this.registerCommand('help',{\r\n            aliases: ['?'],\r\n            description: 'Lists all commands or explains specific command in more detail.',\r\n            parameters: [{id:'command',type:'string',optional: true}],\r\n            arguments: [this.#commands,this.#options],\r\n            run: this.#helpCommand\r\n        });\r\n    }\r\n\r\n    #helpCommand(sender, parameters,commandRegister,commandOptions) {\r\n        let helpMessage = '';\r\n        if (parameters.command) {\r\n            const command = findRegisteredCommand(parameters.command,commandRegister);\r\n            if (command == null) {\r\n                throw new CommandError(`§cCommand §r§l'${parameters.command}'§r§c not found!`);\r\n            }\r\n            const definition = command.definition;\r\n            const commandName = command.name;\r\n            if (definition.senderCheck && !commandOptions.adminCheck(sender) && !definition.senderCheck(sender)) {\r\n                throw new CommandError(`§cYou do not meet requirements to use the command §r§l'${commandName}'§r§c!`);\r\n            }\r\n            const aliases = definition.aliases?.length ? `[§7§o${definition.aliases.join(',')}§r]` : '';\r\n            helpMessage += `§a§l${commandName}§r ${aliases}\\n`;\r\n            helpMessage += `§l§bDescription§r: ${definition.description ?? 'None'}\\n`;\r\n            helpMessage += `§l§bParamaters§r:\\n`;\r\n            const parameterHelp = parseParameterHelp(definition.parameters);\r\n            helpMessage += parameterHelp.join('\\n');\r\n        } else {\r\n            helpMessage += `§l§btip:§r use help [command] for detailed command description\\n`\r\n            for (const commandName in commandRegister) {\r\n                const command = commandRegister[commandName];\r\n                if (command.senderCheck && !commandOptions.adminCheck(sender) && !command.senderCheck(sender)) continue;\r\n                const description = command.description ? command.description.slice(0,32) : '';\r\n                const ending = command.description?.length > 32 ? '...' : '';\r\n                const aliases = command.aliases?.length ? `[§7§o${command.aliases.join(',')}§r]` : '';\r\n                helpMessage += `§l§a${commandName}§r${aliases == ''?'':` ${aliases}`}${(description + ending) == ''? `` : ` - ${description + ending}`}\\n`;\r\n            }\r\n        }\r\n        sendLongMessage(\"help\", helpMessage, sender);\r\n    }\r\n\r\n    /** \r\n     * @param {string} name - Identification of the command.\r\n     * @param {CommandDefinition} definition - Definitions of the command.\r\n     **/\r\n    registerCommand(name,definition) {\r\n        if (!this.#options.caseSensitive) {\r\n            name = name.toLowerCase();\r\n        }\r\n        if (!definition.arguments) {\r\n            definition.arguments = [];\r\n        }\r\n        this.#commands[name] = definition;\r\n    }\r\n\r\n    /**\r\n     * A function used to execute a command.\r\n     * @param {string} name Name of the command to run.\r\n     * @param {string} parameterString String input of the parameters.\r\n     * @param {Player} sender Player to use as the context of the command execution.\r\n     * @param {boolean} sudo Wheter or not to run the command if sender doesn't have permisions\r\n     */\r\n     async runCommand(name,parameterString,sender, sudo = false) {\r\n        const command = findRegisteredCommand(name,this.#commands)?.definition;\r\n        try {\r\n            if (command == null) {\r\n                throw new CommandError(`§cCommand §r§l'${name}'§r§c not found!`);\r\n            }\r\n            if (command.senderCheck && !this.#options.adminCheck(sender) && !command.senderCheck(sender) && !sudo) {\r\n                throw new CommandError(`§cYou do not meet requirements to use the command §r§l'${name}'§r§c!`);\r\n            }\r\n\r\n            const parameterParser = new ParameterStringParser(parameterString,this.#options.parameterChars);\r\n            const parameters = this.#getParameterChain(parameterParser,command.parameters,sender);\r\n\r\n            await command.run(sender, parameters, ...command.arguments);\r\n        } catch (error) {\r\n            if (error instanceof CommandError) {\r\n                sendMessage(error.message,'CMD',sender);\r\n            } else {\r\n                sendMessage(`§cFatal error has occurred during the execution of §r§l'${name}'§r§c!`,sender,'CMD');\r\n            }\r\n        }\r\n    }\r\n\r\n    #commands = {}\r\n    #options = {\r\n        prefix: '!',\r\n        caseSensitive: true,\r\n        parameterChars: {\r\n            escape: '\\\\',\r\n            quote: '\\\"',\r\n            separator: ' ',\r\n            selector: '@'\r\n        },\r\n        adminCheck: () => false\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {ParameterStringParser} parameters \r\n     * @param {CommandDefinitionParameter[]} options \r\n     * @param {Player} sender \r\n     * @returns \r\n     */\r\n    #getParameterChain(parameters,options,sender) {\r\n        const output = {};\r\n        let optional = false;\r\n        let currentOptions = options;\r\n        for (let optionIndex = 0;optionIndex < currentOptions.length;optionIndex++) {\r\n            const option = currentOptions[optionIndex];\r\n            const parameter = parameters.next(option);\r\n\r\n            if (option.optional) optional = true;\r\n\r\n            if (parameter == null) {\r\n                if (optional) return output;\r\n                throw new CommandError(`Missing parameter '${option.id}'!`);\r\n            }\r\n            //Array type\r\n            if (option.array > 0) {\r\n                output[option.id] = parameter.map((value) => this.#parseParameterType(value,sender,option));\r\n                continue;\r\n            }\r\n\r\n            const parsedParameter = this.#parseParameterType(parameter,sender,option);\r\n\r\n            output[option.id] = parsedParameter;\r\n            //Choice type\r\n            if (option.choice) {\r\n                output[option.id] = parsedParameter;\r\n                if (!(parameter in option.choice)) {\r\n                    throw new CommandError(`Invalid choice of '${parameter}' at ${option.id}!`);\r\n                }\r\n                //Restart with new options defined by the choice\r\n                currentOptions = option.choice[parameter];\r\n                optionIndex = -1;//increment will make it 0\r\n                optional = false;//reset optional to false //![experimental]\r\n            }\r\n        }\r\n\r\n        return output;\r\n    }   \r\n\r\n    /**\r\n     * \r\n     * @param {string} parameter \r\n     * @param {Player} sender \r\n     * @param {} option \r\n     * @returns \r\n     */\r\n    #parseParameterType(parameter,sender,option) {\r\n        let parsedParameter, value;\r\n\r\n        switch (option.type) {\r\n            case 'string':\r\n            case 'str':\r\n                value = parameter;\r\n                parsedParameter = value;\r\n                break;\r\n            case 'integer':\r\n            case 'int':\r\n                value = parseInt(parameter);\r\n                if (!isNaN(value)) parsedParameter = value;\r\n                else throw new CommandError(`Value of '${option.id}' couldn't be parsed as integer number!`);\r\n                break;\r\n            case 'float':\r\n            case 'flt':\r\n                value = parseFloat(parameter);\r\n                if (!isNaN(value)) parsedParameter = value;\r\n                else throw new CommandError(`Value of '${option.id}' couldn't be parsed as floating-point number!`);\r\n                break;\r\n            case 'boolean':\r\n            case 'bool':\r\n                value = parameter.toLowerCase();\r\n                if (value === 'true' || value === '1') parsedParameter = true;\r\n                else if (value === 'false' || value === '0') parsedParameter = false;\r\n                else throw new CommandError(`Value of '${option.id}' couldn't be parsed as boolean value!`);\r\n                break;\r\n            case 'json':\r\n                try {\r\n                    value = JSON.parse(parameter);\r\n                    parsedParameter = value;\r\n                } catch (error) {\r\n                    throw new CommandError(`Failed parsing of '${option.id}' as JSON! Error: ${error}`);\r\n                }\r\n                break;\r\n            case 'pos':\r\n            case 'position':\r\n                value = this.#parsePosition(parameter,sender,option);\r\n                parsedParameter = value;\r\n                break;\r\n            case 'selector':\r\n            case 'select':\r\n                value = this.#parseSelector(parameter,sender,option);\r\n                parsedParameter = value;\r\n                break;\r\n            case 'blockPermutation':\r\n                const typeId = parameter.type.match(':') == null ? `minecraft:${parameter.type}` : parameter.type;\r\n                let blockStates;\r\n                try {\r\n                    const stateJsonString = parameter.states === '' ? '{}' : parameter.states;\r\n                    blockStates = JSON.parse(stateJsonString);\r\n                } catch (error) {\r\n                    throw new CommandError(`Failed parsing of '${option.id}' block states as JSON! Error: ${error}`);\r\n                }\r\n                try {\r\n                    parsedParameter = {\r\n                        userStates: parameter.states !== '',\r\n                        permutation: BlockPermutation.resolve(typeId,blockStates)\r\n                    };\r\n                } catch {\r\n                    throw new CommandError(`Failed resolving block with id '${typeId}' and its states!`);\r\n                }\r\n                break;\r\n            default:\r\n                throw new Error(`Unknown type of '${option.type}' found while parsing parameters!`);\r\n        }\r\n        if (option.selection?.contains(parsedParameter) === false){\r\n            throw CommandError(`Value of '${option.id}' isn't in the allowed selection list.`);\r\n        }\r\n\r\n        return parsedParameter;\r\n    }\r\n\r\n    #parsePosition(stringArray,entity,option) {\r\n        const coord = [0,0,0];\r\n        let vector = null;\r\n        const axisIndexes = ['x','y','z'];\r\n        for (let index = 0;index < stringArray.length;index++) {\r\n            const string = stringArray[index];\r\n            const axis = axisIndexes[index];\r\n    \r\n            if (vector === null) {\r\n                vector = string[0] === '\\^';\r\n            }\r\n            if ((vector === true && string[0] !== '\\^') || (vector === false && string[0] === '\\^')) {\r\n                throw new CommandError(`All or none of the coordinates at parameter '${option.id}' must be a vector!`);\r\n            }\r\n            if (string[0] === '~') {\r\n                if (string[1] === '(' && string[string.length - 1] === ')') {\r\n                    const number = parseFloat(string.slice(2,string.length-1));\r\n                    coord[index] = Math.round(entity.location[axis]) + (isNaN(number) ? 0 : number);\r\n                } else if (string[1] === '[' && string[string.length - 1] === ']') {\r\n                    const number = parseFloat(string.slice(2,string.length-1));\r\n                    coord[index] = Math.floor(entity.location[axis]) + (isNaN(number) ? 0 : number);\r\n                } else {\r\n                    const number = parseFloat(string.slice(1));\r\n                    coord[index] = entity.location[axis] + (isNaN(number) ? 0 : number);\r\n                }\r\n            } else {\r\n                if (vector) {\r\n                    coord[index] += entity.location[axis];\r\n                    const number = parseFloat(string.slice(1));\r\n    \r\n                    if (isNaN(number)) continue;\r\n                    let useVector;\r\n                    const vector = entity.getViewDirection();\r\n                    switch (index) {\r\n                        case 0:\r\n                            useVector = setVectorLength({x:vector.z,y:0,z:-vector.x},number);\r\n                            break;\r\n                        case 1:\r\n                            const total = Math.sqrt(vector.x**2+vector.z**2);\r\n                            useVector = setVectorLength({x:(vector.x/total)*-vector.y,y:total,z:(vector.z/total)*-vector.y},number);\r\n                            break;\r\n                        case 2:\r\n                            useVector = setVectorLength(vector,number);\r\n                            break;\r\n                    }\r\n                    coord[0] += useVector.x;\r\n                    coord[1] += useVector.y;\r\n                    coord[2] += useVector.z;\r\n                } else {\r\n                    let number = parseFloat(string);\r\n                    if (isNaN(number)) throw new CommandError(`Couldn't parse absolute coordinate as number at parameter '${option.id}'!`)\r\n                    coord[index] = number;\r\n                }\r\n            }\r\n        }\r\n        return {x:coord[0],y:coord[1],z:coord[2]};\r\n    }\r\n\r\n    #parseSelector(selector,sender,option) {\r\n        const queryOptions = {};\r\n        let selectedEntities = [];\r\n        let entityLimit = parseInt(selector.values.limit?.[0]);\r\n        let randomize = false;\r\n        let allPlayersOnly = false;\r\n        //Player only selector:\r\n        if (option.playerOnly && !(selector.name === 'a' || selector.name === 'p' || selector.name === 'r')) throw new CommandError(`'${option.id}' is a player-only selector!`);\r\n        //Overridable entity queries from selector type:\r\n        if (selector.name === 'r') queryOptions.type = 'minecraft:player';\r\n        if (selector.name === 'a') allPlayersOnly = true;\r\n        //All entity queries from selector arguments:\r\n        let idSelection = new Set(selector.values.id);\r\n\r\n        //Entity property filtering:\r\n        if (selector.values.name) {\r\n            parseListSelectorArg(\r\n                selector.values.name,\r\n                {options:queryOptions,include:'name',exclude:'excludeNames'},\r\n                {includeSingleItem:true}\r\n            );\r\n        }\r\n        if (selector.values.type) {\r\n            parseListSelectorArg(\r\n                selector.values.type,\r\n                {options:queryOptions,include:'type',exclude:'excludeTypes'},\r\n                {includeSingleItem:true}\r\n            );\r\n        }\r\n        if (selector.values.tag) {\r\n            parseListSelectorArg(\r\n                selector.values.tag,\r\n                {options:queryOptions,include:'tags',exclude:'excludeTags'}\r\n            );\r\n        }\r\n        if (selector.values.family) {\r\n            parseListSelectorArg(\r\n                selector.values.family,\r\n                {options:queryOptions,include:'families',exclude:'excludeFamilies'}\r\n            );\r\n        }\r\n        if (selector.values.gamemode) {\r\n            parseListSelectorArg(\r\n                selector.values.gamemode,\r\n                {options:queryOptions,include:'gameMode',exclude:'excludeGameModes'},\r\n                {includeSingleItem:true}\r\n            );\r\n        }\r\n        if (selector.values.level) {\r\n            parseRangeSelectorArg(\r\n                selector.values.level[0],\r\n                {options:queryOptions,max:'maxLevel',min:'minLevel'}\r\n            );\r\n        };\r\n        if (selector.values.x_rotation) {\r\n            parseRangeSelectorArg(\r\n                selector.values.x_rotation[0],\r\n                {options:queryOptions,max:'maxHorizontalRotation',min:'minHorizontalRotation'}\r\n            );\r\n        }\r\n        if (selector.values.y_rotation) {\r\n            parseRangeSelectorArg(\r\n                selector.values.y_rotation[0],\r\n                {options:queryOptions,max:'maxVerticalRotation',min:'minVerticalRotation'}\r\n            );\r\n        }\r\n\r\n        //Entity location filtering:\r\n        if (selector.values.distance) {\r\n            parseRangeSelectorArg(\r\n                selector.values.distance[0],\r\n                {options:queryOptions,max:'maxDistance',min:'minDistance'}\r\n            );\r\n        }\r\n        if (selector.values.x && selector.values.y && selector.values.z) {\r\n            allPlayersOnly = false;\r\n            queryOptions.location = this.#parsePosition(\r\n                [selector.values.x[0],selector.values.y[0],selector.values.z[0]],sender,option\r\n            );\r\n        }\r\n        if (selector.values.dx && selector.values.dy && selector.values.dz) {\r\n            allPlayersOnly = false;\r\n            queryOptions.volume = new BlockAreaSize(\r\n                parseInt(selector.values.dx[0]),parseInt(selector.values.dy[0]),parseInt(selector.values.dz[0])\r\n            );\r\n        }\r\n\r\n        //Entity score filtering:\r\n        if (selector.values.scores) {\r\n            queryOptions.scoreOptions = {};\r\n            parseScoresSelectorArg(selector.values.scores[0],{options:queryOptions,scores:'scoreOptions'});\r\n        }\r\n\r\n        //Sorts:\r\n        if (selector.values.sort) {\r\n            switch (selector.values.sort[0]) {\r\n                case 'furthest':\r\n                    queryOptions.farthest = isNaN(entityLimit) ? 99 : entityLimit;//can set this by default to a real high value ?Infinity to make limit selectors work well with ID patch and other future possible patches\r\n                    break;\r\n                case 'nearest':\r\n                    queryOptions.closest = isNaN(entityLimit) ? 99 : entityLimit;//same as above\r\n                    break;\r\n                case 'random':\r\n                    randomize = true; //Prepares to randomize after getting all the entities from the query.\r\n                    break;\r\n            }\r\n        }\r\n\r\n        //Forced entity queries from selector type:\r\n        switch (selector.name) {\r\n            case 'e':\r\n                break\r\n            case 'a':\r\n                if (allPlayersOnly) {\r\n                    delete queryOptions.type;\r\n                    delete queryOptions.excludeTypes;\r\n                } else {\r\n                    queryOptions.type = 'minecraft:player';\r\n                    queryOptions.excludeTypes = [];\r\n                }\r\n                break\r\n            case 'p':\r\n                delete queryOptions.farthest;\r\n                queryOptions.closest = isNaN(entityLimit) ? 1 : entityLimit;\r\n                queryOptions.type = 'minecraft:player';\r\n                queryOptions.excludeTypes = [];\r\n                break\r\n            case 'r':\r\n                if (option.playerOnly) queryOptions.type = 'minecraft:player';\r\n                entityLimit = isNaN(entityLimit) ? 1 : entityLimit;\r\n                delete queryOptions.farthest;\r\n                delete queryOptions.closest;\r\n                randomize = true;\r\n                break\r\n            case 's':\r\n                entityLimit = 1;\r\n                idSelection = new Set();\r\n                idSelection.add(sender.id);\r\n                break\r\n            default:\r\n                throw new CommandError(`Invalid selector type at '${option.id}'!`);\r\n        }\r\n        //Getting all entities from a chosen/default dimension:\r\n        let entities;\r\n        if (allPlayersOnly) {\r\n            entities = world.getPlayers(queryOptions);\r\n        } else {\r\n            const dimension = world.getDimension(selector.values.dimension?.[0] ?? sender.dimension.id);\r\n            entities = dimension.getEntities(queryOptions);\r\n        }\r\n        //Custom entity filters & limit for unsorted entity queries:\r\n        for (const entity of entities) {\r\n            if (idSelection.size === 0 || idSelection.has(entity.id)) selectedEntities.push(entity);\r\n            if (!randomize && selectedEntities.length === entityLimit) break;\r\n        }\r\n        //Randomize if @r/sort=random:\r\n        if (randomize) {\r\n            const randomizedEntities = [];\r\n            for (let randomStep = 0;randomStep < entityLimit;randomStep++) {\r\n                const randomIndex = randInt(0,selectedEntities.length-1);\r\n                randomizedEntities.push(selectedEntities[randomIndex]);\r\n                selectedEntities.splice(randomIndex,1);\r\n            }\r\n            selectedEntities = randomizedEntities;\r\n        }\r\n        \r\n        return selectedEntities;\r\n    }\r\n}\r\n\r\nclass CommandError extends Error {\r\n    constructor(message) {\r\n        super(`§c${message}`);\r\n        this.name = 'CommandError';\r\n    }\r\n}\r\n\r\nclass ParameterStringParser {\r\n    constructor(string,options = {},index = 0) {\r\n        this.#string = string;\r\n        Object.assign(this.#options,options);\r\n        this.#index = index;\r\n    }\r\n\r\n    #index;\r\n    #string;\r\n    #options = {\r\n        quote: '\\\"',\r\n        escape: '\\\\',\r\n        selector: '@',\r\n        separator: ' ',\r\n        selectorSeparator: ','\r\n    };\r\n\r\n    next(option) {\r\n        const {quote:quoteChar,escape:escapeChar,separator,selector:selectorChar,selectorSeparator} = this.#options;\r\n        const string = this.#string;\r\n        let index = this.#index;\r\n        //Basic\r\n        let item = null;\r\n        let escaped = false;\r\n        let quoted = false;\r\n        //Json / Block Permutation\r\n        let blockPhase = null;\r\n        let json = null;\r\n        //Selector\r\n        let selector = null\r\n        let selectorName = '';\r\n        //Array selectors:\r\n        let parameterArray = null;\r\n        let parameterLength = option.array ?? (option.type === 'pos' || option.type === 'position' ? 3 : null);\r\n        if (parameterLength) parameterArray = [];\r\n        \r\n\r\n        for (let parsePhase = 0;parsePhase < 2;index++) {\r\n            const char = string[index];\r\n            const nextChar = string[index+1];\r\n    \r\n            if (!escaped && char === escapeChar) {\r\n                escaped = true;\r\n                continue;\r\n            }\r\n\r\n            if (parsePhase === 0) {\r\n                if (char == null && parameterArray && !(option.fullArray ?? true)) return parameterArray;\r\n                if (char == null) return null;\r\n\r\n                if (!escaped && char === separator) continue;\r\n\r\n                parsePhase = 1;\r\n                if (option.type === 'selector' || option.type === 'select') {\r\n                    item = {\r\n                        name: '',\r\n                        values: {}\r\n                    };\r\n                    if (char !== selectorChar) {\r\n                        selector = -1;\r\n                        item.name = 'a';\r\n                        item.values.name = [''];\r\n                    } else {\r\n                        selector = 0;\r\n                        continue;\r\n                    }\r\n                } else if (option.type === 'blockPermutation') {\r\n                    item = {\r\n                        type: '',\r\n                        states: ''\r\n                    }\r\n                    blockPhase = 0;\r\n                } else {\r\n                    item = '';\r\n                }\r\n\r\n                if (option.type === 'json') {\r\n                    if (char !== '{' || escaped) throw new CommandError('Unexpected start of JSON!');\r\n                    json = 0;\r\n                }\r\n\r\n                if (!escaped && char === quoteChar && blockPhase == null) {\r\n                    quoted = true;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            if (parsePhase === 1) {\r\n                if ((char == null && (selector == null || selector <= 0)) || (selector > 0 && char === ']')) {\r\n                    parsePhase = 2;\r\n                } else {\r\n                    if (json != null) {\r\n                        //## JSON / Block Permutation State\r\n                        if (!escaped && char === '{') json++;\r\n                        if (!escaped && char === '}') json--;\r\n                        if (nextChar == null && json > 0) throw new CommandError('Unexpected end of JSON!');\r\n\r\n                        if (blockPhase === 1) item.states += char;\r\n                        else item += char;\r\n\r\n                        if (json === 0) {\r\n                            if (nextChar !== separator && nextChar != null) throw new CommandError('Unexpected end of JSON!');\r\n                            parsePhase = 2;\r\n                        }\r\n                    } else if (blockPhase === 0) {\r\n                        //## Block Permutation Type\r\n                        if (!escaped && char === '{') {\r\n                            blockPhase = 1;\r\n                            json = 1;\r\n                            item.states += char;\r\n                        } else if (!escaped && char === separator) {\r\n                            parsePhase = 2;\r\n                        } else {\r\n                            item.type += char;\r\n                        }\r\n                    } else if (selector != null) {\r\n                        //## Selector\r\n                        if (char === ']' && selector === 2) parsePhase = 2;\r\n                        //Name Selector:\r\n                        if (selector === -1) {\r\n                            if (quoted) {\r\n                                if (!escaped && char === quoteChar) {\r\n                                    if (nextChar === separator || nextChar == null) parsePhase = 2;\r\n                                    else throw new CommandError('Unescaped quote inside the parameters!');\r\n                                } else {\r\n                                    if (nextChar == null) throw new CommandError('Unfinished quoted parameter!');\r\n                                    item.values.name[0] += char;\r\n                                }\r\n                            } else {\r\n                                if (!escaped && char === separator) {\r\n                                    parsePhase = 2;\r\n                                } else {\r\n                                    item.values.name[0] += char;\r\n                                }\r\n                            }\r\n                        }\r\n                        //Normal Selector:\r\n                        if (selector === 0) {\r\n                            if (char === '[') {\r\n                                selector = 1;\r\n                                continue;\r\n                            };\r\n                            if (char !== separator) {\r\n                                item.name += char;\r\n                            } else {\r\n                                parsePhase = 2;\r\n                            }\r\n                        }\r\n                        if (selector === 1) {\r\n                            if (char == null) throw new CommandError(`Unexpected end of selector at parameter '${option.id}'!`);\r\n                            if (!escaped && char === selectorSeparator) {\r\n                                if (item.values[selectorName] == null) item.values[selectorName] = [];\r\n                                selectorName = '';\r\n                            }\r\n                            if (!escaped && char === '=') {\r\n                                if (item.values[selectorName] == null) item.values[selectorName] = [];\r\n                                const nextItemIndex = item.values[selectorName].length;\r\n                                selector = 2;\r\n                                item.values[selectorName][nextItemIndex] = '';\r\n                                continue;\r\n                            }\r\n                            if (char !== separator) selectorName += char;\r\n                        }\r\n                        if (selector === 2) {\r\n                            if (char == null) throw new CommandError(`Unexpected end of selector at parameter '${option.id}'!`);\r\n                            const itemIndex = item.values[selectorName].length - 1;\r\n                            if (!escaped && char === quoteChar) {\r\n                                if (!quoted && item.values[selectorName][itemIndex].length <= 1) {\r\n                                    quoted = true;\r\n                                    continue;\r\n                                }\r\n                                if (quoted) {\r\n                                    quoted = false;\r\n                                    continue;\r\n                                }\r\n                            }\r\n                            if (!escaped && !quoted && char === selectorSeparator) {\r\n                                selector = 1;\r\n                                selectorName = '';\r\n                                continue;\r\n                            }\r\n                            if (quoted || (char !== separator)) item.values[selectorName][itemIndex] += char;\r\n                        }\r\n                    } else {\r\n                        //# Other types\r\n                        if (quoted) {\r\n                            if (!escaped && char === quoteChar) {\r\n                                if (nextChar === separator || nextChar == null) parsePhase = 2;\r\n                                else throw new CommandError('Unescaped quote inside the parameters!');\r\n                            } else {\r\n                                if (nextChar == null) throw new CommandError('Unfinished quoted parameter!');\r\n                                item += char;\r\n                            }\r\n                        } else {\r\n                            if (!escaped && char === separator) {\r\n                                parsePhase = 2;\r\n                            } else {\r\n                                item += char;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (parsePhase === 2) {\r\n                if (parameterArray != null) {\r\n                    parameterLength--;\r\n                    parameterArray.push(item);\r\n                    if (parameterLength === 0) {\r\n                        this.#index = ++index;\r\n                        return parameterArray;\r\n                    } else {\r\n                        parsePhase = 0;\r\n                    }\r\n                } else {\r\n                    this.#index = ++index;\r\n                    return item;\r\n                }\r\n            }\r\n\r\n            if (escaped) escaped = false;\r\n        }\r\n    }\r\n}\r\n\r\n\r\n//# Helper Functions:\r\n\r\nfunction parseRangeSelectorArg(selectorArg,query,options = {}) {\r\n    let min,max;\r\n    const firstDotIndex = findCharIndex(selectorArg,'.');\r\n    const lastDotIndex = findLastCharIndex(selectorArg,'.');\r\n    if (firstDotIndex != null) {\r\n        if (lastDotIndex < selectorArg.length-1) {\r\n            max = findNumber(selectorArg,lastDotIndex);\r\n        }\r\n        if (firstDotIndex > 0) {\r\n            min = findNumber(selectorArg);\r\n        }\r\n    } else {\r\n        min = parseInt(selectorArg);\r\n        max = parseInt(selectorArg);\r\n    }\r\n\r\n    query.options[query.max] = max;\r\n    query.options[query.min] = min;\r\n}\r\n\r\nfunction parseListSelectorArg(selectorArg,query,options = {}) {\r\n    let include,exclude;\r\n    include = filter(selectorArg,element => element[0] !== '!');\r\n    if (options.includeSingleItem) include = include[0];\r\n    exclude = filter(selectorArg,element => element[0] === '!').map((element) => element.slice(1));\r\n\r\n    query.options[query.include] = include;\r\n    query.options[query.exclude] = exclude;\r\n}\r\n\r\nfunction parseScoresSelectorArg(selectorArg,query,options = {}) {\r\n    const scoreOptions = [];\r\n    if (selectorArg[0] === '{' && selectorArg[selectorArg.length-1] === '}') {\r\n        const scoreStrings = getScoreSelectors(selectorArg);\r\n        for (const objective in scoreStrings) {\r\n            let objectiveValue = scoreStrings[objective];\r\n            let exclude = false;\r\n            if (objectiveValue[0] === '!') {\r\n                exclude = true;\r\n                objectiveValue = objectiveValue.slice(1);\r\n            }\r\n            const scoreQuery = {objective,exclude};\r\n            parseRangeSelectorArg(objectiveValue,{options:scoreQuery,min:'scoreMin',max:'scoreMax'});\r\n            scoreOptions.push(scoreQuery);\r\n        }\r\n    }\r\n\r\n    query.options[query.scores] = scoreOptions;\r\n}\r\n\r\nfunction getScoreSelectors(string,options = {escapeChar: '\\\\', separator: ','}) {\r\n    const selector = {};\r\n    const {escapeChar,separator} = options;\r\n    let part = 0; //0: objective name; 1: objective value\r\n    let currentName = '';\r\n    let escaped;\r\n\r\n    for (let index = 1;index < string.length-1;index++) {\r\n        const char = string[index];\r\n        if (!escaped && char === escapeChar) {\r\n            escaped = true;\r\n            continue;\r\n        }\r\n\r\n        if (part === 0) {\r\n            if (!escaped && char === '=') {\r\n                if (selector[currentName] == null) selector[currentName] = '';\r\n                part = 1;\r\n                selector[currentName] = '';\r\n                continue;\r\n            };\r\n            if (char !== ' ') currentName += char ?? '';\r\n        }\r\n        \r\n        if (part === 1) {\r\n            if (!escaped && (char === separator || char === null)) {\r\n                part = 0;\r\n                currentName = '';\r\n                continue;\r\n            }\r\n            if (char !== ' ') selector[currentName] += char ?? '';\r\n        }\r\n\r\n        if (escaped) escaped = false;\r\n    }\r\n    return selector\r\n}\r\n\r\n/**\r\n* @typedef CommandRegisterEntry\r\n* @property {string} name - Name of the command.\r\n* @property {CommandDefinition} [definition] - Definition of the command.\r\n*/\r\n\r\n/**\r\n * \r\n * @param {string} input \r\n * @param {object} commands \r\n * @returns {CommandRegisterEntry}\r\n */\r\nfunction findRegisteredCommand(input,commands) {\r\n    for (const commandName in commands) {\r\n        if (commandName === input || commands[commandName].aliases?.includes(input)) {\r\n            return {name: commandName,definition: commands[commandName]};\r\n        }\r\n    }\r\n}\r\n\r\nfunction parseParameterHelp(paremeters) {\r\n    const messages = [];\r\n    let helpMessage = '';\r\n    let optional = false;\r\n    for (let paramaterIndex = 0;paramaterIndex < paremeters.length;paramaterIndex++) {\r\n        const definition = paremeters[paramaterIndex];\r\n        const type = normalizeParameterType(definition.type);\r\n        if (definition.optional) optional = true;\r\n        if (definition.choice) {\r\n            for (const choice in definition.choice) {\r\n                const choiceParameters = parseParameterHelp(definition.choice[choice]);\r\n                for (let choiceIndex = 0;choiceIndex < choiceParameters.length;choiceIndex++) {\r\n                    messages.push(helpMessage+`${choice}`+' '+choiceParameters[choiceIndex]);\r\n                }\r\n            }\r\n        } else {\r\n            const optionalString = optional ? `§b?§r` : '';\r\n            const arrayString = definition.array ? `(§d${definition.array}§r)` : '';\r\n            helpMessage += `${definition.id}${optionalString}[§c${type}§r${arrayString}] `;\r\n        }\r\n    }\r\n    if (messages.length === 0) messages.push(helpMessage);\r\n    return messages;\r\n}\r\n\r\nfunction normalizeParameterType(type) {\r\n    let normalizedType = 'unknown';\r\n    switch (type) {\r\n        case 'string':\r\n        case 'str':\r\n            normalizedType = 'str';\r\n            break;\r\n        case 'integer':\r\n        case 'int':\r\n            normalizedType = 'int';\r\n            break;\r\n        case 'float':\r\n        case 'flt':\r\n            normalizedType = 'float';\r\n            break;\r\n        case 'boolean':\r\n        case 'bool':\r\n            normalizedType = 'bool';\r\n            break;\r\n        case 'json':\r\n            normalizedType = 'json';\r\n            break;\r\n        case 'pos':\r\n        case 'position':\r\n            normalizedType = 'position';\r\n            break;\r\n        case 'selector':\r\n        case 'select':\r\n            normalizedType = 'selector';\r\n            break;\r\n        case 'blockPermutation':\r\n            normalizedType = 'blockPermutation';\r\n            break;\r\n    }\r\n    return normalizedType;\r\n}\r\n\r\nexport {CommandParser, CommandError}"],"sourceRoot":"../../scripts/"}