{"version":3,"sources":["plugins/commands/workers/debug.js"],"names":[],"mappings":"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","file":"debug.js","sourcesContent":["//APIs:\r\nimport { Block, BlockPermutation } from \"@minecraft/server\";\r\nimport { variables as ServerConfig } from '@minecraft/server-admin';\r\n//Plugins:\r\nimport {isAdmin} from \"./admin\";\r\nimport { Commands, DB } from '../../backend/backend';\r\n//Modules:\r\nimport { sendMessage } from '../../../mc_modules/players';\r\nimport { logMessage } from \"../../debug/debug\";\r\nimport { setBlockPermutation, setBlockType } from '../../block_history/block_history';\r\n\r\n\r\nexport function main(){\r\n  if(!ServerConfig.get('debug-enabled')) return;\r\n  /*\r\n\r\n  ----these feature has been tested and the propability of them beraking is low that's why the code is commented.---\r\n  ----It's not removed hovewer in case those features unexpactably breaks---\r\n\r\n  Commands.registerCommand('testArray', { aliases:[], parameters:[\r\n        {type:'pos',id:'location'},\r\n        {type:'string',id:'strArray',array:3},\r\n        {type:'string',id:'option',choice:{test:[],not:[]}}\r\n    ],\r\n    senderCheck: isAdmin,\r\n    run(sender,parameters) {\r\n    logMessage(`${parameters.location.x},${parameters.location.y},${parameters.location.z}`);\r\n    logMessage(`${parameters.strArray[0]},${parameters.strArray[1]},${parameters.strArray[2]}`);\r\n    logMessage(`${parameters.option}`)\r\n  }})\r\n\r\n  Commands.registerCommand('testedge', {\r\n    parameters:[{type:'pos',id:'location'},{type:'int',id:'colour',array:3}],\r\n    senderCheck: isAdmin,\r\n    run(sender,parameters) {\r\n      getEdgeLocations([{\r\n        x:Math.floor(parameters.location.x),\r\n        y:Math.floor(parameters.location.y),\r\n        z:Math.floor(parameters.location.z)\r\n      }],(loc,axis) => {\r\n        const molang = new MolangVariableMap()\r\n        .setColorRGBA('variable.color',new Color(parameters.colour[0]/255,parameters.colour[1]/255,parameters.colour[2]/255,1));\r\n        sender.dimension.spawnParticle(`trebesin:edge_highlight_${axis}`,loc,molang)\r\n      })\r\n    }\r\n  })\r\n\r\n  */\r\n \r\n  Commands.registerCommand(\"databasedisconnect\", {aliases: [\"dbdisconnect\", \"dbdis\"], parameters: [], senderCheck: isAdmin, run: async (sender) =>  {\r\n      try {\r\n        await DB.disconnect();\r\n        sendMessage(`§asuccesfully disconnected from the database.`,'cmd',sender);\r\n      } catch(error) {\r\n        sendMessage(`${error}`,'cmd',sender);\r\n      }\r\n    }\r\n  })\r\n\r\n  Commands.registerCommand(\"databaseconnect\", {aliases: [\"dbconnect\", \"dbcon\"], parameters: [], senderCheck: isAdmin, run: async (sender) => {\r\n      try {\r\n        await DB.connect();\r\n        sendMessage(`§asuccesfully connected to the database.`,'cmd',sender);\r\n      } catch(error) {\r\n        sendMessage(`${error}`,'cmd',sender);\r\n      }\r\n    }\r\n  })\r\n\r\n  Commands.registerCommand(\"block\", {parameters: [], senderCheck: isAdmin, run: (sender,parameters) => {\r\n      const location = {x: Math.round(sender.location.x), y: Math.round(sender.location.y), z: Math.round(sender.location.z)}\r\n      sendMessage(`${sender.dimension.getBlock(location).typeId}`, 'cmd - debug', sender);\r\n    }\r\n  })\r\n  //movement commands\r\n\r\n  Commands.registerCommand(\"getvector\", {\r\n    aliases: [\"vector\"], parameters: [],senderCheck: isAdmin, run: (sender) => sendMessage(`${sender.getViewDirection().x}, ${sender.getViewDirection().y}, ${sender.getViewDirection().z}`,'CMD',sender)\r\n  });\r\n\r\n  Commands.registerCommand(\"getcoords\", {\r\n    aliases: [\"vector\"], parameters: [],senderCheck: isAdmin, run: (sender) => sendMessage(`${sender.location.x}, ${sender.location.y}, ${sender.location.z}`,'CMD',sender)\r\n  });\r\n\r\n  Commands.registerCommand('testSelector', {\r\n    parameters: [{type:'selector',id:'entities'}],aliases:[], senderCheck: isAdmin, run(sender,parameters) {\r\n      sendMessage(`${parameters.entities.length}`, 'cmd - debug', sender)\r\n      for (const entity of parameters.entities) {\r\n        sendMessage(`Entity: ${entity.typeId}, ${entity.nameTag}, ${entity.id}`, 'cmd - debug', sender);\r\n      }\r\n    }\r\n  });\r\n\r\n  Commands.registerCommand('testBlockPermutation', {\r\n    parameters: [\r\n      {\r\n        id: 'permutation',\r\n        type:'blockPermutation'\r\n      }\r\n    ],\r\n    run(sender, parameters) {\r\n      const {permutation,userStates} = parameters.permutation;\r\n      const allStates = permutation.getAllProperties();\r\n      logMessage(permutation.type.id);\r\n      logMessage(userStates);\r\n      logMessage(JSON.stringify(permutation.getTags()));\r\n      for (const state in allStates) {\r\n        logMessage(`${state} = ${allStates[state]}`);\r\n      }\r\n      setBlockPermutation(sender.dimension.getBlock(sender.location),permutation,{actorId:player.id,updateType:'blockyTools: player'});\r\n    }\r\n  })\r\n\r\n  Commands.registerCommand('testpos', {\r\n    parameters:[{type:'pos',id:'location'}],\r\n    senderCheck: isAdmin,\r\n    run(sender,parameters) {\r\n      sendMessage(`${parameters.location.x} ${parameters.location.y} ${parameters.location.z}`, \"cmd - debug\", sender);\r\n    }\r\n  })\r\n\r\n}"]}