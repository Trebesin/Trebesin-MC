{"version":3,"sources":["plugins/block_history/workers/commands.js"],"names":[],"mappings":"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","file":"commands.js","sourcesContent":["//APIs:\nimport {CommandResult, MinecraftEffectTypes , world, TicksPerDay, TicksPerSecond, MolangVariableMap, system, MinecraftBlockTypes, BlockPermutation, Player} from \"@minecraft/server\";\n//Plugins:\nimport * as BlockHistoryPlugin from \"../block_history\";\nimport { Commands, sendLongMessage, DB } from '../../backend/backend';\nimport { isAdmin, isMod } from \"../../commands/workers/admin\";\nimport { logMessage, sendLogMessage } from \"../../debug/debug\";\n//sdf\n//Modules:\nimport * as VectorMath from '../../../js_modules/vectorMath'\nimport * as Blocks from \"../../../mc_modules/blocks\";\nimport { sendMessage} from \"../../../mc_modules/players\";\nimport { getEdgeLocations, locationToString, stringToLocation } from \"../../../mc_modules/particles\";\nimport { CommandError } from \"../../../mc_modules/commandParser\";\n\n//const {BlockHistoryUpdateTypes,BlockHistoryUpdateTypeNames} = BlockHistoryPlugin;\n\n/**\n * Object with defining IDs for `BlockHistoryOptions` `updateType` entries.\n */\nconst BlockHistoryUpdateTypes = {\n    /** Block updated by a player in a usual vanilla MC interaction. */\n    playerUpdate: 0,\n    /** Block updated by a player using block history plugin reverse feature. */\n    blockHistoryReverse: 1,\n    /** Block updated by a player using blocky tools plugin. */\n    blockyTools: 2,\n    /** Block updated by the system for a technical reason in an automated fashion. */\n    system: 3\n\n};\n\nconst BlockHistoryUpdateTypeNames = [\n    'Player Update',\n    'Block History: Reverse',\n    'Blocky Tools: Player',\n    'System'\n];\n\n\nlet particlesPerPlayers = {}\nlet confirmationPerPlayer = {}\nlet lastParticleCall = {}\nlet lastCall = {}\nconst PARTICLE_LIMIT = 1000//particle limit per player\n\nexport function main(){\n    system.runInterval(() => {\n        for (const player in particlesPerPlayers) {\n            //## Particles:\n            let limitIndex = 0;\n            for(const locationString of particlesPerPlayers[player].particleLocations){\n                if(limitIndex > PARTICLE_LIMIT){\n                    sendMessage(\"§c§lTOO MANY PARTICLES §r- removing all your particles\", \"§cBH - CHAOS MANAGER\",particlesPerPlayers[player].player)\n                    delete particlesPerPlayers[player];\n                    break;\n                }\n                limitIndex++\n                const particleLocation = stringToLocation(locationString);\n                spawnParticles(particleLocation[0], particleLocation[1], particlesPerPlayers[player].player);\n            }\n        }\n        for(const player in confirmationPerPlayer) {\n            if (!confirmationPerPlayer[player].confirmed && confirmationPerPlayer[player].countdown > 0) {\n                confirmationPerPlayer[player].countdown - 4;\n            }\n            else if(confirmationPerPlayer[player].confirmed) {\n                try {\n                    confirmationPerPlayer[player].callback();\n                } catch(error) {\n                    logMessage(error);\n                }\n                delete confirmationPerPlayer[player];\n            }\n            else {\n                sendMessage('The confirmation has expired!', 'blockHistory', confirmationPerPlayer[player].player)\n                delete confirmationPerPlayer[player];\n            }\n        }\n    },4);\n\n\n\n    /**\n     * \n     * @param {Player} sender \n     * @param {*} parameter \n     */\n    async function blockHistoryHandler(sender, parameter){\n        switch(parameter.command){\n            case 'warp':\n                if(!lastCall[sender.id]){\n                    sendMessage(\"there is nothing to warp to\", \"blockHistory\", sender)\n                }\n                {\n                    const index = parameter.index ?? 1\n                    if(index < 0 || index >= lastCall[sender.id].length){\n                        sendMessage('invalid index', 'blockHistory', sender)\n                    }\n                    sender.teleport(lastCall[sender.id][index-1]);\n                }\n                break;\n            case 'rb':\n            case 'reverseblock':\n                if(!isMod(sender)){\n                    sendMessage('sorry you don\\'t have permision to use this command. use !bh help for available commands')\n                    break;\n                }\n                {\n                    const pos = VectorMath.floor(parameter.coords ?? sender.location);\n                    let request = {};\n                    try{\n                        request = sqlRequestHandler(parameter, {type: \"block\", pos: pos})\n                    }\n                    catch(error){\n                        sendMessage(`invalid until/startingFrom parameter: ${error}`, \"blockHistory\", sender)\n                        break;\n                    }\n                    const response = await DB.query(request);\n\n                    if(!response.result[0]?.x && response.result != \"\"){\n                        sendMessage('§c critical Mysql error. Contact admins for fix', 'BlockHistory', sender)\n                        sendLogMessage(JSON.stringify(response.result))\n                        break;\n                    }\n\n                    if(!printBlockHistory(response, {type: \"block\", pos: pos}, sender))break;\n\n                    lastCall[sender.id] = response.result\n                    sendMessage('You can use !bh warp [index] to warp to a block', \"blockHistory\", sender)\n\n                    if(parameter.particles ?? false){\n                        getEdgeLocations([pos], (loc,axis) => {\n                            addActiveParticles(loc,axis,sender);\n                        })\n                    }\n                    else{\n                        if(lastParticleCall[sender.id])delete lastParticleCall[sender.id]\n                        sendMessage(`you can use !bh show to see these changes using particles`, \"blockHistory\", sender)\n                        lastParticleCall[sender.id] = {\n                            callback: () => {\n                                getEdgeLocations([pos], (loc,axis) => {\n                                    addActiveParticles(loc,axis,sender);\n                                })\n                            }\n                        }\n                    }\n                    sendMessage(`are you sure you want to reverse these changes?\\n - !bh confirm to confirm or !bh cancel to cancel`,'blockHistory',sender);\n\n                    if(confirmationPerPlayer[sender.id]) delete confirmationPerPlayer[sender.id];\n                    confirmationPerPlayer[sender.id] = {\n                        player: sender,\n                        confirmed: false,\n                        callback: () => {\n                            reverseBlocks(response.result, sender)\n                        },\n                        countdown: 1200\n                    };\n                }\n                break;\n            case \"show\":\n                if(!isMod(sender)){\n                    sendMessage('sorry you don\\'t have permision to use this command. use !bh help for available commands')\n                    break;\n                }\n                {\n                    if(lastParticleCall[sender.id]){\n                        lastParticleCall[sender.id].callback()\n                        delete lastParticleCall[sender.id]\n                        sendMessage(\"showing particles..\", \"blockHistory\", sender)\n                    }\n                    else sendMessage(\"there is nothing to show\", \"blockHistory\", sender)\n                }\n                break;\n            case 'b':\n            case 'block':\n                if(!isMod(sender)){\n                    sendMessage('sorry you don\\'t have permision to use this command. use !bh help for available commands')\n                    break;\n                }\n                {\n                    const pos = VectorMath.floor(parameter.coords ?? sender.location);\n                    let request = {}\n                    try{\n                        request = sqlRequestHandler(parameter, {type: \"block\", pos: pos})\n                    }\n                    catch(error){\n                        sendMessage(`invalid until/startingFrom parameter: ${error}`, \"blockHistory\", sender)\n                        break;\n                    }\n                    const response = await DB.query(request);\n\n                    if(!response.result[0]?.x && response.result != \"\"){\n                        sendMessage('§c critical Mysql error. Contact admins for fix', 'BlockHistory', sender)\n                        sendLogMessage(JSON.stringify(response.result))\n                        break;\n                    }\n\n                    if(!printBlockHistory(response, {type: \"block\", pos: pos}, sender))break;\n\n                    lastCall[sender.id] = response.result\n                    sendMessage('You can use !bh warp [index] to warp to a block', \"blockHistory\", sender)\n\n                    if(parameter.particles ?? false){\n                            getEdgeLocations([pos], (loc,axis) => {\n                                addActiveParticles(loc,axis,sender);\n                            })\n                    }\n                    else{\n                        if(lastParticleCall[sender.id])delete lastParticleCall[sender.id]\n                        sendMessage(`you can use !bh show to see these changes using particles`, \"blockHistory\", sender)\n                        lastParticleCall[sender.id] = {\n                            callback: () => {\n                                getEdgeLocations([pos], (loc,axis) => {\n                                    addActiveParticles(loc,axis,sender);\n                                })\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'p':\n            case 'player':\n                if(!isMod(sender)){\n                    sendMessage('sorry you don\\'t have permision to use this command. use !bh help for available commands')\n                    break;\n                }\n                {\n                    const playerName = parameter.player ?? sender.name\n                    let request = {}\n                    try{\n                        request = sqlRequestHandler(parameter, {type: \"player\", playerName: playerName})\n                    }\n                    catch(error){\n                        sendMessage(`invalid until/startingFrom parameter: ${error}`, \"\", sender)\n                        break;\n                    }\n                    const response = await DB.query(request);\n                    \n                    if(!response.result[0]?.x && response.result != \"\"){\n                        sendMessage('§c critical Mysql error. Contact admins for fix', 'BlockHistory', sender)\n                        sendLogMessage(JSON.stringify(response.result))\n                        break;\n                    }\n\n\n                    if(!printBlockHistory(response, {type: \"player\"}, sender))break;\n\n                    lastCall[sender.id] = response.result\n                    sendMessage('You can use !bh warp [index] to warp to a block', \"blockHistory\", sender)\n\n                    if(parameter.particles ?? false){\n                        getEdgeLocations(response.result, (loc,axis) => {\n                            addActiveParticles(loc,axis,sender);\n                        })\n                    }\n                    else{\n                        if(lastParticleCall[sender.id])delete lastParticleCall[sender.id]\n                        sendMessage(`you can use !bh show to see these changes using particles`, \"blockHistory\", sender)\n                        lastParticleCall[sender.id] = {\n                            callback: () => {\n                                getEdgeLocations(response.result, (loc,axis) => {\n                                    addActiveParticles(loc,axis,sender);\n                                })\n                            }\n                        }\n                    }\n                }\n                break;\n            case 'redo':\n                if(!isMod(sender)){\n                    sendMessage('sorry you don\\'t have permision to use this command. use !bh help for available commands')\n                    break;\n                }\n                {\n                    const playerName = parameter.player ?? sender.name\n                    const request = {\n                        sql : `\n                            SELECT DISTINCT block_history.*, PlayerConnections.PlayerName \n                            FROM \\`block_history\\` \n                            JOIN (SELECT PlayerID, MAX(ID) AS latest_id \n                                FROM PlayerConnections \n                                GROUP BY PlayerID) AS latest_connections \n                            ON block_history.actor_id = latest_connections.PlayerID \n                            JOIN PlayerConnections \n                            ON latest_connections.latest_id = PlayerConnections.ID\n                            WHERE PlayerName = ? AND update_type = ${BlockHistoryUpdateTypes.blockHistoryReverse} AND update_id = ?\n                            ORDER BY \\`block_history\\`.\\`tick\\` DESC\n                        `,\n                        values : [playerName, parameter.id]\n                    }\n                    const response = await DB.query(request);\n\n                    if(!response.result[0]?.x && response.result != \"\"){\n                        sendMessage('§c critical Mysql error. Contact admins for fix', 'BlockHistory', sender)\n                        sendLogMessage(JSON.stringify(response.result))\n                        break;\n                    }\n\n                    if(!printBlockHistory(response, {type: \"reverse\"}, sender))break;\n\n                    lastCall[sender.id] = response.result\n                    sendMessage('You can use !bh warp [index] to warp to a block', \"blockHistory\", sender)\n\n                    if(parameter.particles ?? false){\n                        getEdgeLocations(response.result, (loc,axis) => {\n                            addActiveParticles(loc,axis,sender);\n                        })\n                    }\n                    else{\n                        if(lastParticleCall[sender.id])delete lastParticleCall[sender.id]\n                        sendMessage(`you can use !bh show to see these changes using particles`, \"blockHistory\", sender)\n                        lastParticleCall[sender.id] = {\n                            callback: () => {\n                                getEdgeLocations(response.result, (loc,axis) => {\n                                    addActiveParticles(loc,axis,sender);\n                                })\n                            }\n                        }\n                    }\n\n                    sendMessage(`are you sure you want to revert these changes?\\n - !bh confirm to confirm or !bh cancel to cancel`,'blockHistory',sender);\n\n                    if(confirmationPerPlayer[sender.id]) delete confirmationPerPlayer[sender.id];\n                    confirmationPerPlayer[sender.id] = {\n                        player: sender,\n                        confirmed: false,\n                        callback: () => {\n                            reverseBlocks(response.result, sender)\n                        },\n                        countdown: 1200\n                    };\n                }\n                break;\n            case 'r':\n            case 'reverse':\n                if(!isMod(sender)){\n                    sendMessage('sorry you don\\'t have permision to use this command. use !bh help for available commands')\n                    break;\n                }\n                {\n                    const playerName = parameter.player ?? sender.name\n                    let request = {}\n                    try{\n                        request = sqlRequestHandler(parameter, {type: \"player\", playerName: playerName})\n                    }\n                    catch(error){\n                        sendMessage(`invalid until/startingFrom parameter: ${error}`, \"blockHistory\", sender)\n                        break;\n                    }\n                    const response = await DB.query(request);\n\n                    if(!response.result[0]?.x && response.result != \"\"){\n                        sendMessage('§c critical Mysql error. Contact admins for fix', 'BlockHistory', sender)\n                        sendLogMessage(JSON.stringify(response.result))\n                        break;\n                    }\n\n                    if(!printBlockHistory(response, {type: \"player\"}, sender))break;\n\n                    lastCall[sender.id] = response.result\n                    sendMessage('You can use !bh warp [index] to warp to a block', \"blockHistory\", sender)\n\n                    if(parameter.particles ?? false){\n                        getEdgeLocations(response.result, (loc,axis) => {\n                            addActiveParticles(loc,axis,sender);\n                        })\n                    }\n                    else{\n                        if(lastParticleCall[sender.id])delete lastParticleCall[sender.id]\n                        sendMessage(`you can use !bh show to see these changes using particles`, \"blockHistory\", sender)\n                        lastParticleCall[sender.id] = {\n                            callback: () => {\n                                getEdgeLocations(response.result, (loc,axis) => {\n                                    addActiveParticles(loc,axis,sender);\n                                })\n                            }\n                        }\n                    }\n\n                    sendMessage(`are you sure you want to reverse these changes?\\n - !bh confirm to confirm or !bh cancel to cancel`,'blockHistory',sender);\n\n                    if(confirmationPerPlayer[sender.id]) delete confirmationPerPlayer[sender.id];\n                    confirmationPerPlayer[sender.id] = {\n                        player: sender,\n                        confirmed: false,\n                        callback: () => {\n                            reverseBlocks(response.result, sender)\n                        },\n                        countdown: 1200\n                    };\n                }\n                break;\n            case 'confirm':\n                if(!isMod(sender)){\n                    sendMessage('sorry you don\\'t have permision to use this command. use !bh help for available commands')\n                    break;\n                }\n                {\n                    try {\n                        confirmationPerPlayer[sender.id].confirmed = true\n                    }\n                    catch {\n                        sendMessage('the confirmation has expired!', 'blockHistory', sender)\n                    }\n                }\n                break;\n            case 'i':\n            case 'inspector':\n                {\n                    if(!sender.hasTag(\"inspector\")) {\n                        sender.addTag(\"inspector\");\n                        sendMessage(\"inspector is now turned on, right click a block with your hand or place any block to see its history\\n\", \"blockHistory\", sender);\n                    }\n                    else {\n                        sender.removeTag(\"inspector\");\n                        sendMessage(\"inspector is now turned off\", \"blockHistory\", sender);\n                    };\n                }\n                break;\n            case 'cancel':\n                if(!confirmationPerPlayer[sender.id]){\n                    sendMessage(\"there is nothing to be canceled\", \"blockHistory\", sender)\n                    break;\n                }\n                delete confirmationPerPlayer[sender.id]\n                sendMessage(\"The call is now aborted\", \"blockHistory\", sender)\n                break;\n            case 'c':\n            case 'clear':\n                if(!isMod(sender)){\n                    sendMessage('sorry you don\\'t have permision to use this command. use !bh help for available commands')\n                    break;\n                }\n                {\n                    if(parameter.players){\n                        for(let i = 0;i<parameter.players.length; i++){\n                            const player = parameter.players[i]\n                            removeActiveParticles(player)\n                        }\n                    } else {\n                        removeActiveParticles(sender);\n                    }\n                }\n                break;\n            case 'ca':\n            case 'clearall':\n                if(!isMod(sender)){\n                    sendMessage('sorry you don\\'t have permision to use this command. use !bh help for available commands')\n                    break;\n                }\n                removeAllActiveParticles();\n                break;\n            default:\n                if(isAdmin(sender)){\n                    sendLongMessage(`blockHistory: help`,\n                        `\n    b/block - shows the changes made to block on [x], [y], [z] - parameters: until, startingFrom, location: x, location: y, location: z, allowParticles\n    p/player - shows the changes made by a player - parameters: until, startingFrom, player, allowParticles\n    i/inspect - gets you into inspector mode - when you place blocks it doesn't place them and instead shows you the changes made to that block\n    r/reverse - reverses actions of a player in specific time frame - parameters: until, startingFrom, player, allowParticles\n    rb/reverseblock - reverses a block to it's older state - parameters: until, startingFrom, location: x, location: y, location: z, allowParticles\n    bt/blockytools - show history of blockytools edits - parameters: until, startingFrom, player -- not ready yet\n    rbt/reversebt/reverseblockytools - reverses a blockytools edit using its id - parameters: until, startingFrom, player -- not ready yet\n    redo - reverses an action made by this plugin - parameters: ID, player, allowParticles\n    c/clear - clears all the particles generated by this plugin by a player\n    ca/clearall - clears all the particles generated by this plugin by everyone\n                        `,sender);\n                }\n\n                else if(isMod(sender)){\n                    sendMessage(`blockHistory: help`\n                        `\n    b/block - shows the changes made to block on [x], [y], [z] - parameters: until, startingFrom, location: x, location: y, location: z, allowParticles\n    p/player - shows the changes made by a player - parameters: until, startingFrom, player, allowParticles\n    r/reverse - reverses actions of a player in specific time frame - parameters: until, startingFrom, player, allowParticles\n    rb/reverseblock - reverses a block to it's older state - parameters: until, startingFrom, location: x, location: y, location: z, allowParticles\n    bt/blockytools - show history of blockytools edits - parameters: until, startingFrom, player -- not ready yet\n    rbt/reversebt/reverseblockytools - reverses a blockytools edit using its id - parameters: until, startingFrom, player -- not ready yet\n    redo - reverses an action made by this plugin - parameters: ID, player, allowParticles\n    c/clear - clears all the particles generated by this plugin by a player\n    ca/clearall - clears all the particles generated by this plugin by everyone\n                        `, sender);\n                }\n\n                else {\n                    sendLongMessage(`blockHistory: help`\n                        `\n    i/inspector - gets you into inspector mode: place blocks or right click with hand to see changes\n                        `, sender\n                    )\n                }\n                break;\n        }\n    }\n\n  Commands.registerCommand(\"bh\", {\n    parameters: [\n        {id: \"command\", type: \"string\", optional: true, choice: {\n                b: [\n                    {type:'str',id:'until',optional:true},\n                    {type:'str',id:'startingFrom',optional:true},\n                    {type:'pos',id:'coords',optional:true},\n                    {type:'bool',id:'particles', optional:true}\n                ],\n                warp: [\n                    {type: 'int', id: 'index', optional: true}\n                ],\n                block: [\n                    {type:'str',id:'until',optional:true},\n                    {type:'str',id:'startingFrom',optional:true},\n                    {type:'pos',id:'coords',optional:true},\n                    {type:'bool',id:'particles', optional:true}\n                ],\n                show: [\n\n                ],\n                p: [\n                    {type:'str',id:'until',optional:true},\n                    {type:'str',id:'startingFrom',optional:true},\n                    {type:'string',id:'player',optional:true},\n                    {type:'bool',id:'particles', optional:true}\n                ],\n                player: [\n                    {type:'str',id:'until',optional:true},\n                    {type:'str',id:'startingFrom',optional:true},\n                    {type:'string',id:'player',optional:true},\n                    {type:'bool',id:'particles', optional:true}\n                ],\n                c: [\n                    {type: 'selector', id: 'players', optional:true, playerOnly:true}\n                ],\n                clear: [\n                    {type: 'selector', id: 'players', optional:true, playerOnly:true}\n                ],\n                ca: [\n\n                ],\n                clearall: [\n\n                ],\n                i: [\n\n                ],\n                inspector: [\n\n                ],\n                r: [\n                    {type:'str',id:'until',optional:true},\n                    {type:'str',id:'startingFrom',optional:true},\n                    {type:'string',id:'player',optional:true},\n                    {type:'bool',id:'particles', optional:true}\n                ],\n                redo: [\n                    {type:'int',id:'id'},\n                    {type:'string',id:'player',optional:true},\n                    {type:'bool',id:'particles', optional:true}\n                ],\n                reverse: [\n                    {type:'str',id:'until',optional:true},\n                    {type:'str',id:'startingFrom',optional:true},\n                    {type:'string',id:'player',optional:true},\n                    {type:'bool',id:'particles', optional:true}\n                ],\n                rb: [\n                    {type:'str',id:'until',optional:true},\n                    {type:'str',id:'startingFrom',optional:true},\n                    {type:'pos',id:'coords',optional:true},\n                    {type:'bool',id:'particles', optional:true}\n                ],\n                reverseblock: [\n                    {type:'str',id:'until',optional:true},\n                    {type:'str',id:'startingFrom',optional:true},\n                    {type:'pos',id:'coords',optional:true},\n                    {type:'bool',id:'particles', optional:true}\n                ],\n                confirm: [\n                ],\n                help: [\n                ],\n                h: [\n                ],\n                \"?\": [\n                ],\n                cancel: [\n                ]\n                \n            }\n        }\n    ], aliases: [\"blockhistory\", \"co\", \"coreprotect\"], run: blockHistoryHandler, senderCheck: isMod, description: `manage/view player blockHistory. view !bh help for detailed help`\n  })\n}\n\nfunction addActiveParticles(particleLocation, axis, sender) {\n    particlesPerPlayers[sender.id] ??= {\n        player: sender,\n        particleLocations: new Set()\n    };\n    particlesPerPlayers[sender.id].particleLocations.add(locationToString(particleLocation,axis));\n}\n\nfunction removeActiveParticles(sender) {\n    delete particlesPerPlayers[sender.id];\n}\n\nfunction removeAllActiveParticles() {\n    for (const player in particlesPerPlayers) {\n        delete particlesPerPlayers[player];\n    }\n}\n\n\n\n\nfunction sqlRequestHandler(parameters, options){\n    let request = {}\n    if(options.type === \"block\"){\n        if((!parameters.until || /^(\\d+)$/.exec(parameters.until)) && (!parameters.startingFrom || /^(\\d+)$/.exec(parameters.startingFrom))){\n            request = {//request for block where we have number until and number startFrom\n            sql: `\n                SELECT DISTINCT block_history.*, PlayerConnections.PlayerName\n                FROM block_history \n                JOIN (SELECT PlayerID, MAX(ID) AS latest_id \n                        FROM PlayerConnections \n                        GROUP BY PlayerID) AS latest_connections \n                    ON block_history.actor_id = latest_connections.PlayerID \n                    JOIN PlayerConnections \n                    ON latest_connections.latest_id = PlayerConnections.ID\n                WHERE x = ? AND y = ? AND z = ?\n                ORDER BY \\`block_history\\`.\\`tick\\` DESC\n                LIMIT ? OFFSET ?\n            `,\n            values : [options.pos.x, options.pos.y, options.pos.z,parseInt(parameters.until ?? 7), parseInt(parameters.startingFrom ?? 0)]\n            }\n        }\n        else if(/^(\\d+)(m|w|d|h|s)/.exec(parameters.until) && (!parameters.startingFrom || /^(\\d+)$/.exec(parameters.startingFrom))){\n            request = {//request for block where we have realtime until and startFrom number\n                sql : `\n                WITH cte AS (\n                SELECT DISTINCT block_history.*, PlayerConnections.PlayerName, ROW_NUMBER() OVER (ORDER BY block_history.tick DESC) AS rn\n                FROM block_history \n                JOIN (SELECT PlayerID, MAX(ID) AS latest_id \n                        FROM PlayerConnections \n                        GROUP BY PlayerID) AS latest_connections \n                    ON block_history.actor_id = latest_connections.PlayerID \n                    JOIN PlayerConnections \n                    ON latest_connections.latest_id = PlayerConnections.ID\n                WHERE x = ? AND y = ? AND z = ? AND block_history.tick >= ?\n                ORDER BY \\`block_history\\`.\\`tick\\` DESC\n                )\n                SELECT *\n                FROM cte\n                WHERE rn > ?\n                `,\n                values : [options.pos.x, options.pos.y, options.pos.z,system.currentTick - parseToTicks(parameters.until), parseInt(parameters.startingFrom ?? 0)]\n            }\n        }\n        else if(/^(\\d+)(m|w|d|h|s)/.exec(parameters.until) && /^(\\d+)(m|w|d|h|s)/.exec(parameters.startingFrom)){\n            request = {//request for block where we have realtime until and realtime startFrom\n            sql: `\n                SELECT DISTINCT block_history.*, PlayerConnections.PlayerName\n                FROM block_history \n                JOIN (SELECT PlayerID, MAX(ID) AS latest_id \n                        FROM PlayerConnections \n                        GROUP BY PlayerID) AS latest_connections \n                    ON block_history.actor_id = latest_connections.PlayerID \n                    JOIN PlayerConnections \n                    ON latest_connections.latest_id = PlayerConnections.ID\n                WHERE x = ? AND y = ? AND z = ? AND block_history.tick >= ? AND block_history.tick <= ?\n                ORDER BY \\`block_history\\`.\\`tick\\` DESC\n            `,\n            values : [options.pos.x, options.pos.y, options.pos.z,system.currentTick - parseToTicks(parameters.until), system.currentTick - parseToTicks(parameters.startingFrom)]\n            }\n        }\n        else if((!parameters.until || /^(\\d+)$/.exec(parameters.until)) && /^(\\d+)(m|w|d|h|s)/.exec(parameters.startingFrom)){\n            request = {//request for block where we have number until and realtime startFrom\n            sql: `\n                SELECT DISTINCT block_history.*, PlayerConnections.PlayerName\n                FROM block_history \n                JOIN (SELECT PlayerID, MAX(ID) AS latest_id \n                        FROM PlayerConnections \n                        GROUP BY PlayerID) AS latest_connections \n                    ON block_history.actor_id = latest_connections.PlayerID \n                    JOIN PlayerConnections \n                    ON latest_connections.latest_id = PlayerConnections.ID\n                WHERE x = ? AND y = ? AND z = ? AND block_history.tick <= ?\n                ORDER BY \\`block_history\\`.\\`tick\\` DESC\n                LIMIT ? OFFSET 0\n            `,\n            values : [options.pos.x, options.pos.y, options.pos.z,system.currentTick - parseToTicks(parameters.startingFrom), parseInt(parameters.until ?? 7)]\n            }\n        }\n        else{\n            throw new CommandError(\"invalid until/startingFrom parameter\")\n        }\n    }\n\n\n\n\n    \n\n\n    else if(options.type === \"player\"){\n        if((!parameters.until || /^(\\d+)$/.exec(parameters.until)) && (!parameters.startingFrom || /^(\\d+)$/.exec(parameters.startingFrom))){\n            request = {//request for player where we have number until and number startFrom\n                sql : `\n                SELECT DISTINCT block_history.*, PlayerConnections.PlayerName \n                FROM \\`block_history\\` \n                JOIN (SELECT PlayerID, MAX(ID) AS latest_id \n                        FROM PlayerConnections \n                        GROUP BY PlayerID) AS latest_connections \n                    ON block_history.actor_id = latest_connections.PlayerID \n                    JOIN PlayerConnections \n                    ON latest_connections.latest_id = PlayerConnections.ID\n                WHERE PlayerName = ?  \n                ORDER BY \\`block_history\\`.\\`tick\\` DESC\n                LIMIT ? OFFSET ?\n                `,\n                values : [options.playerName, parseInt(parameters.until ?? 7), parseInt(parameters.startingFrom ?? 0)]\n            }\n        }\n        else if(/^(\\d+)(m|w|d|h|s)/.exec(parameters.until) && (!parameters.startingFrom || /^(\\d+)$/.exec(parameters.startingFrom))){\n            request = {//request for player where we have realtime until and startFrom number\n                sql : `\n                    WITH cte AS (\n                        SELECT block_history.*, PlayerConnections.PlayerName, ROW_NUMBER() OVER (ORDER BY block_history.tick DESC) AS rn\n                        FROM block_history\n                        JOIN (SELECT PlayerID, MAX(ID) AS latest_id\n                            FROM PlayerConnections\n                            GROUP BY PlayerID) AS latest_connections\n                        ON block_history.actor_id = latest_connections.PlayerID\n                        JOIN PlayerConnections\n                        ON latest_connections.latest_id = PlayerConnections.ID\n                        WHERE PlayerName = ? AND block_history.tick >= ?\n                    )\n                    SELECT *\n                    FROM cte\n                    WHERE rn > ?\n                `,\n                values : [options.playerName,system.currentTick - parseToTicks(parameters.until), parseInt(parameters.startingFrom ?? 0)]\n            }\n        }\n        else if(/^(\\d+)(m|w|d|h|s)/.exec(parameters.until) && /^(\\d+)(m|w|d|h|s)/.exec(parameters.startingFrom)){\n            request = {//request for player where we have realtime until and realtime startFrom\n            sql: `\n                SELECT DISTINCT block_history.*, PlayerConnections.PlayerName\n                FROM block_history \n                JOIN (SELECT PlayerID, MAX(ID) AS latest_id \n                        FROM PlayerConnections \n                        GROUP BY PlayerID) AS latest_connections \n                    ON block_history.actor_id = latest_connections.PlayerID \n                    JOIN PlayerConnections \n                    ON latest_connections.latest_id = PlayerConnections.ID\n                WHERE playerName = ? AND block_history.tick >= ? AND block_history.tick <= ?\n                ORDER BY \\`block_history\\`.\\`tick\\` DESC\n            `,\n            values : [options.playerName,system.currentTick - parseToTicks(parameters.until), system.currentTick - parseToTicks(parameters.startingFrom)]\n            }\n        }\n        else if((!parameters.until || /^(\\d+)$/.exec(parameters.until)) && /^(\\d+)(m|w|d|h|s)/.exec(parameters.startingFrom)){\n            request = {//request for player where we have number until and realtime startFrom\n            sql: `\n                SELECT DISTINCT block_history.*, PlayerConnections.PlayerName\n                FROM block_history \n                JOIN (SELECT PlayerID, MAX(ID) AS latest_id \n                        FROM PlayerConnections \n                        GROUP BY PlayerID) AS latest_connections \n                    ON block_history.actor_id = latest_connections.PlayerID \n                    JOIN PlayerConnections \n                    ON latest_connections.latest_id = PlayerConnections.ID\n                WHERE playerName = ? AND block_history.tick <= ?\n                ORDER BY \\`block_history\\`.\\`tick\\` DESC\n                LIMIT ? OFFSET 0\n            `,\n            values : [options.playerName,system.currentTick - parseToTicks(parameters.startingFrom), parseInt(parameters.until ?? 7)]\n            }\n        }\n        else{\n            throw new CommandError(\"invalid until/startingFrom parameter\")\n        }\n    }\n    return request\n}\n\n\n\n\n\n/**\n * \n * @param {Promise} request \n * @param {options} options \n * @returns \n */\n\nfunction printBlockHistory(request, options, sender){\n    const playerName = sender.name\n    if(request.result == \"\" && options.type === \"player\"){\n        sendMessage(`No changes were made by the player ${playerName}`,'CMD - BlockHistory',sender);\n        return false;\n    }\n    if(request.result == \"\" && options.type === \"reverse\"){\n        sendMessage(`No changes were made by blockhistory from ${playerName}`,'CMD - BlockHistory',sender);\n        return false;\n    }\n    if(request.result == \"\" && options.type === \"block\"){\n        sendMessage(`No changes were made to block ${Math.floor(options.pos.x)}, ${Math.floor(options.pos.y)}, ${Math.floor(options.pos.z)}`,'CMD - BlockHistory',sender);\n        return false;\n    }\n    const tickInASec = TicksPerSecond\n    const tickInAMin = tickInASec*60\n    const tickInAnHour = tickInAMin*60\n    const tickInADay = tickInAnHour*24\n    let message = ''\n    for(let i = 0; i < request.result.length; i++){\n        const blockAlteration = request.result[i]\n        const timeOfBlockAlteration = system.currentTick - parseInt(blockAlteration.tick)\n        if(options.type === \"player\" || options.type === \"reverse\"){\n            message += `${blockAlteration.update_type === BlockHistoryUpdateTypes.playerUpdate ? \"\" : `(${BlockHistoryUpdateTypeNames[blockAlteration.update_type]}) - `}[${blockAlteration.x}, ${blockAlteration.y}, ${blockAlteration.z}]: ${blockAlteration.before_id} -> ${blockAlteration.after_id} - before: ${parseToRealTime(timeOfBlockAlteration)}\\n`;\n        }\n        if(options.type === \"block\"){\n            message += `${blockAlteration.PlayerName}${blockAlteration.update_type === BlockHistoryUpdateTypes.playerUpdate ? \"\" : ` (${BlockHistoryUpdateTypeNames[blockAlteration.update_type]})`}: ${blockAlteration.before_id} -> ${blockAlteration.after_id} - before: ${parseToRealTime(timeOfBlockAlteration)}\\n`;\n        }\n    }\n    if(options.type === \"reverse\")sendLongMessage(`Block History reverses of ${playerName}`, message.trim(), sender)\n    if(options.type === \"player\")sendLongMessage(`Block History of ${playerName}`, message.trim(), sender);\n    if(options.type === \"block\")sendLongMessage(`Block History of block ${Math.floor(options.pos.x)}, ${Math.floor(options.pos.y)}, ${Math.floor(options.pos.z)}`, message.trim(), sender);\n    return true;\n}\n\nfunction spawnParticles(location, particleAxis, sender) {\n    const molang = new MolangVariableMap()\n    .setColorRGB('variable.color',{red:1,green:0,blue:0,alpha:1});\n    const dimension = world.getDimension('overworld');\n    dimension.spawnParticle(`trebesin:edge_highlight_${particleAxis}`, location, molang);\n}\n\nasync function getMaxIDPerPlayer(updateType, player){\n    try{\n        const request = await DB.query({\n            sql: `SELECT actor_id, MAX(update_id) AS id\n                    FROM block_history\n                    WHERE actor_id = ? AND update_type = ? AND update_id IS NOT NULL\n                    GROUP BY actor_id;\n                    `,\n            values: [player.id, updateType]\n        })\n        return request.result[0].id\n    }\n    catch(error){\n        logMessage(error)\n    }\n}\n\n/**\n * \n * @param {Blocks.BlockState} blockOld \n * @param {import('../../../mc_modules/dimensions').Position} position \n */\nexport function revertBlockChange(blockOld, position){\n    const block = position.dimension.getBlock(position.location);\n    Blocks.applyBlockState(block,blockOld);\n}\n\nfunction parseToRealTime(input){\n    let result = \"\"\n    const tickInASec = TicksPerSecond\n    const tickInAMin = tickInASec*60\n    const tickInAnHour = tickInAMin*60\n    const tickInADay = tickInAnHour*24\n    const tickInAWeek = tickInADay*7\n    const timers = [tickInAWeek, tickInADay, tickInAnHour, tickInAMin, tickInASec]\n    const timerletter = ['w', 'd', 'h', 'm', 's']\n    for(let i = 0;i<timers.length;i++){\n        if(!Math.floor(input/timers[i]))continue;\n        result += `${Math.floor(input/timers[i])}` + timerletter[i]\n        input = input%timers[i]\n    }\n    return result\n}\n\nfunction parseToTicks(input){\n    const regex = /^(\\d+)(m|w|d|h|s)/;\n    let result = 0\n    const tickInASec = TicksPerSecond\n    const tickInAMin = tickInASec*60\n    const tickInAnHour = tickInAMin*60\n    const tickInADay = tickInAnHour*24\n    const tickInAWeek = tickInADay*7\n    let workingString = input\n    while(workingString !== \"\"){\n        const string = regex.exec(workingString)\n        workingString = workingString.replace(regex, \"\")\n        if(!string)throw new CommandError(`couldn't parse ${input} to ticks!`)\n        switch (string[2]) {\n            case \"w\":\n                result += string[1]*tickInAWeek\n                break;\n            case \"d\":\n                result += string[1]*tickInADay\n                break;\n            case \"h\":\n                result += string[1]*tickInAnHour\n                break;\n            case \"m\":\n                result += string[1]*tickInAMin\n                break;\n            case \"s\":\n                result += string[1]*tickInASec\n                break;\n            default:\n                throw new CommandError(`couldn't parse ${input} to ticks!`)\n                break;\n        }\n    }\n    return result;\n}\n\nexport async function inspector(location, sender){\n    const pos = location \n    const request = {\n        sql : `SELECT DISTINCT block_history.*, PlayerConnections.PlayerName \n                FROM \\`block_history\\` \n                JOIN (SELECT PlayerID, MAX(ID) AS latest_id \n                        FROM PlayerConnections \n                        GROUP BY PlayerID) AS latest_connections \n                    ON block_history.actor_id = latest_connections.PlayerID \n                    JOIN PlayerConnections \n                    ON latest_connections.latest_id = PlayerConnections.ID\n                WHERE x = ? AND y = ? AND z = ?\n                ORDER BY \\`block_history\\`.\\`tick\\` DESC`,\n        values: [Math.floor(pos.x), Math.floor(pos.y), Math.floor(pos.z)]\n    }\n    try {\n        const response = await DB.query(request);\n        if(!response.result[0]?.x && response.result != \"\"){\n            sendMessage('§c critical Mysql error. Contact admins for fix', 'BlockHistory', sender)\n            sendLogMessage(JSON.stringify(response.result))\n            return;\n        }\n        if(printBlockHistory(response, {type: \"block\", pos: pos}, sender)){\n            if(lastParticleCall[sender.id])delete lastParticleCall[sender.id]\n            sendMessage(`you can use !bh show to see these changes using particles`, \"cmd - BlockHistory\", sender)\n            lastParticleCall[sender.id] = {\n                callback: () => {\n                    getEdgeLocations(response.result, (loc,axis) => {\n                        addActiveParticles(loc,axis,sender);\n                    })\n                }\n            }\n        }\n    }\n    catch (error) {\n        sendMessage(`${error}`,'CMD - BlockHistory',sender);\n    }\n}\n\nasync function reverseBlocks(blocks, sender) {\n    const callID = (await getMaxIDPerPlayer(BlockHistoryUpdateTypes.blockHistoryReverse, sender) ?? -1)+1\n    for(let i = 0;i<blocks.length;i++){\n        const playerId = sender.id;\n        const block = world.getDimension(blocks[i].dimension_id).getBlock(blocks[i]);\n        const blockOld = Blocks.copyBlockState(block,true);\n        const permutationsBefore = BlockPermutation.resolve(blocks[i].before_id, JSON.parse(blocks[i].before_permutations))\n        block.setType(MinecraftBlockTypes.get(blocks[i].before_id));\n        block.setPermutation(permutationsBefore);\n        BlockHistoryPlugin.saveBlockUpdate({\n            before: blockOld,\n            after: Blocks.copyBlockState(block,true)\n        },{\n            actorId: playerId,\n            updateType: BlockHistoryUpdateTypes.blockHistoryReverse,\n            updateId: callID\n        });\n    }\n    sendMessage(`succesfully reversed blocks - callID: ${callID}`, \"BlockHistory: reverse\",sender)\n}\n"]}