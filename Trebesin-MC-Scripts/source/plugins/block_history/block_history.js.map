{"version":3,"sources":["plugins/block_history/block_history.js"],"names":[],"mappings":"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","file":"block_history.js","sourcesContent":["//APIs:\nimport * as Mc from '@minecraft/server';\n//Plugins:\nimport * as BlockHistoryCommandsWorker from './workers/commands';\nimport * as Debug from '../debug/debug';\nimport { DB, Server } from '../backend/backend';\n//Modules:\nimport { getEntityById } from '../../mc_modules/entities';\nimport * as VectorMath from '../../js_modules/vectorMath';\nimport { containsArray, filter, insertToArray, deleteFromArray } from '../../js_modules/array';\nimport * as Blocks from '../../mc_modules/blocks';\nimport * as Dimensions from '../../mc_modules/dimensions';\nimport { DIMENSION_IDS , FACE_DIRECTIONS } from '../../mc_modules/constants';\nimport { getEquipedItem, sendMessage } from '../../mc_modules/players';\n\n\nconst DB_UPDATE_INTERVAL = 100;\nconst blockUpdates = {};\nconst fallingBlocksTracked = [];\n\nexport const name = 'Block History';\nexport async function main() {\n    //# Workers:\n    loadWorkers();\n    \n    //# Database:\n    const connection = DB;\n    //## DB Save Schedule:\n    Mc.system.runInterval(async () => {\n        let empty = true;\n        const request = {\n            sql: 'INSERT INTO block_history (actor_id,tick,dimension_id,x,y,z,before_id,after_id,before_waterlogged,after_waterlogged,before_permutations,after_permutations,update_type,update_id) VALUES ',\n            values: []\n        };\n        for (const actorId in blockUpdates) {\n            const actorRecords = blockUpdates[actorId];\n            for (let index = 0;index < actorRecords.length;index++) {\n                const record = actorRecords[index];\n                request.sql += '(?,?,?,?,?,?,?,?,?,?,?,?,?,?)';\n                request.sql += (index+1 === actorRecords.length) ? ';' : ',';\n                request.values.push(\n                    actorId,\n                    record.tick,\n                    record.before.dimension.id,\n                    record.before.location.x,\n                    record.before.location.y,\n                    record.before.location.z,\n                    record.before.typeId,\n                    record.after.typeId,\n                    record.before.isWaterlogged,\n                    record.after.isWaterlogged,\n                    JSON.stringify(record.before.permutation.getAllProperties()),\n                    JSON.stringify(record.after.permutation.getAllProperties()),\n                    record.updateType,\n                    record.updateId\n                );\n                empty = false;\n            }\n            actorRecords.length = 0;\n        }\n        if (empty) return 0;\n        try {\n            await connection.query(request,true);\n        } catch (error) {\n            for (const prop in error) {\n                Debug.sendLogMessage(`SQL Error: ${prop} ${error[prop]}`);\n            }\n        }\n    },DB_UPDATE_INTERVAL);\n\n    //# Block Updates:\n    //## Falling Block Patches:\n    Mc.world.events.entitySpawn.subscribe((eventData) => {\n        if (eventData.entity.typeId === 'minecraft:falling_block') {\n            const blockLocation = VectorMath.floor(eventData.entity.location);\n            insertToArray(\n                fallingBlocksTracked,\n                {\n                    location: {\n                        start: blockLocation,\n                        current: blockLocation\n                    },\n                    tick: {\n                        start:  system.currentTick,\n                        current:  system.currentTick\n                    },\n                    id: eventData.entity.id,\n                    dimensionId: eventData.entity.dimension.id,\n                    playerId: null\n                }\n            );\n            Debug.sendLogMessage(`§aBlock Starts Falling§r [${blockLocation.x},${blockLocation.y},${blockLocation.z}] @ ${system.currentTick}`);\n        }\n    });\n\n    Mc.system.runInterval(() => {\n        for (let index = 0;index < fallingBlocksTracked.length;index++) {\n            const fallingBlockData = fallingBlocksTracked[index];\n            if (fallingBlockData == null) continue;\n            const fallingBlockEntity = getEntityById(\n                    fallingBlockData.id,\n                    { type: 'minecraft:falling_block' },\n                    [fallingBlockData.dimensionId]\n            );\n            if (fallingBlockEntity == null) {\n                const location = fallingBlockData.location;\n                const tick = fallingBlockData.tick;\n                const blocksTravelled = location.start.y - location.current.y;\n                const timeTravelled = tick.current - tick.start;\n                const speed = blocksTravelled/timeTravelled;\n                Debug.sendLogMessage(`§aBlock Ends Falling§r [${location.current.x},${location.current.y},${location.current.z}] @ ${tick.current} - ${getEntityById(\n                    fallingBlockData.playerId,\n                    {},\n                    [fallingBlockData.dimensionId]\n                )?.nameTag}`);\n                deleteFromArray(fallingBlocksTracked,index);\n            } else {\n                fallingBlockData.location.current = VectorMath.floor(fallingBlockEntity.location);\n                fallingBlockData.tick.current = system.currentTick;\n            }\n        }\n    },1);\n\n    //## Block Breaking Detection:\n    Mc.world.events.blockBreak.subscribe(async (eventData) => {\n        Debug.logMessage(`§cBlock Break§r - ${system.currentTick}`);\n        const playerId = eventData.player.id;\n        const blockOld = {\n            typeId: eventData.brokenBlockPermutation.type.id,\n            isWaterlogged: eventData.block.isWaterlogged,\n            permutation: eventData.brokenBlockPermutation?.clone(),\n            components: {},\n            location: eventData.block.location,\n            dimension: eventData.dimension,\n        }\n\n        //const blocks = {\n        //    before: blockOld,\n        //    after: Blocks.copyBlockState(eventData.block,true)\n        //}\n        //const position = {\n        //    location: eventData.block.location,\n        //    dimension: eventData.dimension,\n        //}\n\n        //This Block:\n        saveBlockUpdate({before:blockOld,after:Blocks.copyBlockState(eventData.block,true)},{actorId:playerId});\n\n        //Updated Blocks:\n        await Blocks.blockUpdateIteration(blockOld.location,blockOld.dimension,(blockBefore,blockAfter,tick) => {\n            const vec = VectorMath.sub(blockBefore.location,blockOld.location);\n            Debug.logMessage(`${blockBefore.typeId} -> ${blockAfter.typeId} @ ${vec.x},${vec.y},${vec.z}:${tick}`);\n            //Falling Blocks:\n            const fallObject = fallingBlocksTracked.find((block) => VectorMath.compare(blockBefore.location,block.location.start));\n            if (fallObject) fallObject.playerId = playerId;\n        });\n    });\n    \n    //## Inspector\n    Mc.world.beforeEvents.itemUseOn.subscribe((eventData) => {\n        //!! this prevents an exploit do not remove !!\n        const player = eventData.source;\n        if (player.hasTag('inspector')){\n            eventData.cancel = true;\n        }\n    });\n\n    Server.events.beforeItemStartUseOn.subscribe((eventData) => {\n        const player = eventData.source;\n        if (player.hasTag('inspector')) {\n            try {\n                eventData.cancel = true;\n                const offset = FACE_DIRECTIONS[eventData.blockFace];\n                const faceBlockLocation = VectorMath.sum(eventData.block.location, offset);\n                if (getEquipedItem(player) != null) BlockHistoryCommandsWorker.inspector(faceBlockLocation, player);\n                else BlockHistoryCommandsWorker.inspector(eventData.block.location, player);\n            } catch(error) {\n                Debug.sendLogMessage(`Inspector Error: ${error}`);\n            }\n        }\n    });\n\n    //## Block Placing Detection:\n    Mc.world.events.itemStartUseOn.subscribe(async(eventData) => {\n        const player = eventData.source;\n        const offset = FACE_DIRECTIONS[eventData.blockFace];\n        const faceBlockLocation = VectorMath.sum(eventData.block.location,offset);\n        const faceBlock = player.dimension.getBlock(faceBlockLocation);\n        const faceBlockOld = Blocks.copyBlockState(faceBlock,true);\n        const block = player.dimension.getBlock(eventData.block.location);\n        const blockOld = Blocks.copyBlockState(block,true);\n\n        //These Blocks:\n        system.runTimeout(async () => {\n            //const faceBlocks = {\n            //    before: faceBlockOld,\n            //    after: copyBlockState(faceBlock,true)\n            //};\n            //const facePosition = {\n            //    location: faceBlock.location,\n            //    dimension: faceBlock.dimension\n            //};\n            //const blocks = {\n            //    before: blockOld,\n            //    after: Blocks.copyBlockState(block,true)\n            //};\n            //const position = {\n            //    location: block.location,\n            //    dimension: block.dimension\n            //};\n            saveBlockUpdate({before:faceBlockOld,after:Blocks.copyBlockState(faceBlock,true)},{actorId:player.id});\n            saveBlockUpdate({before:blockOld,after:Blocks.copyBlockState(block,true)},{actorId:player.id});\n            //Falling Blocks\n            system.runTimeout(() => {\n                const fallObject = fallingBlocksTracked.find((block) => VectorMath.compare(faceBlock.location,block.location.start));\n                if (fallObject) fallObject.playerId = player.id;\n            },1);\n        },1);\n\n        //Updated Blocks:\n        await Blocks.blockUpdateIteration(faceBlockLocation,faceBlockOld.dimension,(blockBefore,blockAfter,tick) => {\n            const vec = VectorMath.sub(blockBefore.location,faceBlockOld.location);\n            Debug.logMessage(`${blockBefore.typeId} -> ${blockAfter.typeId} @ ${vec.x},${vec.y},${vec.z}:${tick}`);\n            //Falling Blocks:\n            const fallObject = fallingBlocksTracked.find((block) => blockBefore.location.equals(block.location.start));\n            if (fallObject) fallObject.playerId = player.id;\n        });\n    });\n\n    //Debug:\n    Mc.world.events.itemUseOn.subscribe((eventData) => {\n        if (eventData.itemStack.typeId === 'minecraft:stick') {\n            const block = eventData.block;\n            if (block.typeId.startsWith('trebesin')) {\n                Debug.sendLogMessage(`[trebesin:rotation] - ${block.permutation.getProperty('trebesin:rotation')?.value}`);\n                Debug.sendLogMessage(`[trebesin:horizontal_rotation] - ${block.permutation.getProperty('trebesin:horizontal_rotation')?.value}`);\n                Debug.sendLogMessage(`[trebesin:vertical_rotation] - ${block.permutation.getProperty('trebesin:vertical_rotation')?.value}`);    \n            } else {\n                const properties = block.permutation.getAllProperties();\n                for (const property in properties) {\n                    Debug.sendLogMessage(`[${property}] - ${properties[property]}`);\n                }\n            }\n        } else if (eventData.itemStack.typeId === 'minecraft:diamond_sword') {\n            Debug.sendLogMessage(`${JSON.stringify(blockUpdates,null,1)}`);\n        }\n    });\n}\n\n//# Functions:\n\n//## Internal Functions:\nfunction loadWorkers() {\n    BlockHistoryCommandsWorker.main();\n    Debug.sendLogMessage('   Block History commands Loaded');\n}\n\n/**\n * Function for saving block updates into the Block History memory database.\n * @param {object} blockStates Block states that define the block before and after the update.\n * @param {Blocks.BlockState} blockStates.before Block state of the block before the update.\n * @param {Blocks.BlockState} blockStates.after Block state of the block after the update.\n * @param {BlockHistoryOptions} blockHistoryEntry Information regarding the block history database entry for the block update.\n * @returns {number} Returns a number indicating change to the memory database.\n */\nexport function saveBlockUpdate(blockStates,blockHistoryEntry) {\n    blockUpdates[blockHistoryEntry.actorId] ??= [];\n    if (Blocks.compareBlockStates(blockStates.before,blockStates.after,true)) return 0;\n\n    const records = blockUpdates[blockHistoryEntry.actorId]\n    const lastRecord = records[records.length - 1];\n    if (\n        lastRecord &&\n        Dimensions.comparePositions(lastRecord.before,blockStates.before) &&\n        Blocks.compareBlockStates(lastRecord.before,blockStates.after,true) &&\n        Blocks.compareBlockStates(lastRecord.after,blockStates.before,true)\n    ) {\n        records.pop();\n        //Debug.sendLogMessage('garbage collected!');\n        return -1;\n    } else {\n        records.push({\n            before: blockStates.before,\n            after: blockStates.after,\n            tick: system.currentTick,\n            updateType: blockHistoryEntry.updateType ?? BlockHistoryUpdateTypes.playerUpdate,\n            updateId: blockHistoryEntry.updateId\n        });\n        //Debug.sendLogMessage('saved the record');\n        return 1;\n    }\n}\n\n//# Exported Functions:\n/**\n * Custom set block type function, does the same as `Block.setType()` method but also records the update to the block hisory database.\n * @param {Mc.Block} block `Block` class object to invoke `setType()` method on.\n * @param {Mc.BlockType} blockType `blockType` parameter of the `setType()` method.\n * @param {BlockHistoryOptions} blockHistoryEntry Information used to store the entry in the database.\n */\nexport function setBlockType(block,blockType,blockHistoryEntry) {\n    const blockBefore = Blocks.copyBlockState(block,true);\n    block.setType(blockType);\n    const blockAfter = Blocks.copyBlockState(block,true);\n    saveBlockUpdate({before:blockBefore,after:blockAfter},blockHistoryEntry);\n}\n\n/**\n * Custom set block permutation function, does the same as `Block.setpermutation()` method but also records the update to the block hisory database.\n * @param {Mc.Block} block `Block` class object to invoke `setpermutation()` method on.\n * @param {Mc.BlockPermutation} permutation `permutation` parameter of the `setpermutation()` method.\n * @param {BlockHistoryOptions} blockHistoryEntry Information used to store the entry in the database.\n */\nexport function setBlockPermutation(block,permutation,blockHistoryEntry) {\n    const blockBefore = Blocks.copyBlockState(block,true);\n    block.setPermutation(permutation);\n    const blockAfter = Blocks.copyBlockState(block,true);\n    saveBlockUpdate({before:blockBefore,after:blockAfter},blockHistoryEntry);\n}\n\n/**\n * Updates the block state and records the update to the block hisory database.\n * @param {Mc.Block} block `Block` class object to edit state of.\n * @param {import('../../mc_modules/blocks').BlockState} blockState Block state to apply.\n * @param {BlockHistoryOptions} blockHistoryEntry Information used to store the entry in the database.\n */\nexport function editBlock(block,blockState,blockHistoryEntry) {\n    const blockBefore = Blocks.copyBlockState(block,true);\n    Blocks.applyBlockState(block,blockState);\n    const blockAfter = Blocks.copyBlockState(block,true);\n    saveBlockUpdate({before:blockBefore,after:blockAfter},blockHistoryEntry);\n}\n\n//# Types / Constants\n/**\n * @typedef BlockHistoryOptions\n * @prop {string} actorId ID of the player or entity that will be defined as the cause.\n * @prop {string} updateType Type of the block update.\n * @prop {number} updateId ID for the block update.\n */\n\n/**\n * Object with defining IDs for `BlockHistoryOptions` `updateType` entries.\n */\nexport const BlockHistoryUpdateTypes = {\n    /** Block updated by a player in a usual vanilla MC interaction. */\n    playerUpdate: 0,\n    /** Block updated by a player using block history plugin reverse feature. */\n    blockHistoryReverse: 1,\n    /** Block updated by a player using blocky tools plugin. */\n    blockyTools: 2,\n    /** Block updated by the system for a technical reason in an automated fashion. */\n    system: 3\n\n};\n\nexport const BlockHistoryUpdateTypeNames = [\n    'Player Update',\n    'Block History: Reverse',\n    'Blocky Tools: Player',\n    'System'\n];"]}