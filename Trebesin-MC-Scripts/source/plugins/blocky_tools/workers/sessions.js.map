{"version":3,"sources":["plugins/blocky_tools/workers/sessions.js"],"names":[],"mappings":"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","file":"sessions.js","sourcesContent":["//APIs:\r\nimport * as Mc from '@minecraft/server';\r\nimport { floorVector, setVectorLength, sumVectors, getDirectionFace, multiplyVector, subVectors} from '../../../js_modules/vector';\r\nimport { DIMENSION_IDS, FACE_DIRECTIONS } from '../../../mc_modules/constants';\r\nimport { expandArea, generateLineBox, spawnBox, spawnLine, spawnLineBox, spawnParticleLine } from '../../../mc_modules/particles';\r\nimport { getEquipedItem, sendMessage } from '../../../mc_modules/players';\r\n//Plugins:\r\nimport { CornerSelection } from './selection';\r\nimport { logMessage } from '../../debug/debug';\r\nimport { editBlock, setBlockPermutation, setBlockType, BlockHistoryUpdateTypes } from '../../block_history/block_history';\r\nimport * as Blocks from '../../../mc_modules/blocks';\r\nimport * as VectorMath from '../../../js_modules/vectorMath';\r\nimport * as Geometry from '../../../js_modules/geometry';\r\n//Modules:\r\n\r\n\r\n//# \r\nconst SessionStore = {};\r\n\r\nclass LeftClickDetect {\r\n    /**\r\n     * Teleports entity in front of the player's cursor and creates it if it doesn't exist.\r\n     * @param {Mc.Player} player\r\n     */\r\n    run(player) {\r\n        /** @type {Mc.Entity} */\r\n        let playerEntity = this.#playerData[player.id];\r\n        if (playerEntity == null) {\r\n            this.#spawnEntity(player,player.location);\r\n        } else {\r\n            try {\r\n                playerEntity.teleport(VectorMath.sum(player.location,VectorMath.multiply(player.getVelocity(),5)),{dimension:player.dimension,keepVelocity:false});\r\n                playerEntity.getComponent('minecraft:scale').value = 1.0 + (VectorMath.getLengthSquared(player.getVelocity())*8);\r\n            } catch {\r\n                this.#spawnEntity(player,player.location);\r\n            }\r\n        }\r\n    }\r\n\r\n    stop(playerId) {\r\n        let playerEntity = this.#playerData[playerId];\r\n        if (playerEntity !== null) {\r\n            playerEntity.triggerEvent('trebesin:make_despawn');\r\n            this.#playerData[playerId] = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @param {Mc.Player} player \r\n     * @param {VectorMath.Vector3} location \r\n     */\r\n    #spawnEntity(player,location) {\r\n        const playerEntity = player.dimension.spawnEntity('trebesin:left_click_detect',location);\r\n        //const scale = playerEntity.getComponent('minecraft:scale');\r\n        //scale.value = 1.0;\r\n        this.#playerData[player.id] = playerEntity;\r\n    }\r\n\r\n    #playerData = {}\r\n}\r\n\r\nconst leftClickDetector = new LeftClickDetect();\r\n\r\nexport function main() {\r\n\r\n    Mc.world.events.playerJoin.subscribe((eventData) => {\r\n        leftClickDetector.stop(eventData.playerId);\r\n    });\r\n\r\n    Mc.world.events.itemUse.subscribe((eventData) => {\r\n        if (eventData.itemStack.typeId !== 'trebesin:bt_blocky_axe') return;\r\n        const session = getSession(eventData.source);\r\n        const selection = session.getCurrentSelection();\r\n        selection.setCorner(0,session.pointerBlockLocation);\r\n    });\r\n\r\n    Mc.world.events.entityHit.subscribe((eventData) => {\r\n        //logMessage(`EntityHit ${eventData.entity.name} - E:${eventData?.hitEntity?.typeId} B:${eventData?.hitBlock?.typeId} T:${Mc.system.currentTick}`);\r\n        const itemHolding = getEquipedItem(eventData.entity);\r\n        if (itemHolding?.typeId !== 'trebesin:bt_blocky_axe') return;\r\n        const session = getSession(eventData.entity);\r\n        const selection = session.getCurrentSelection();\r\n        selection.setCorner(1,session.pointerBlockLocation);\r\n    });\r\n\r\n    //Server.events.itemStartUseOn.subscribe(() => {\r\n    //    logMessage('ItemUseOn')\r\n    //});\r\n\r\n    Mc.system.runInterval(() => {\r\n        for (const playerId in SessionStore) {\r\n            /** @type {Session} */\r\n            const session = SessionStore[playerId];\r\n            const player = session.getPlayer();\r\n            \r\n            const selection = session.getCurrentSelection();\r\n            selection.createParticleOutline();\r\n            selection.createParticleBlocks();\r\n            if (getEquipedItem(player)?.typeId === 'trebesin:bt_blocky_axe') {\r\n                leftClickDetector.run(player);\r\n                //## Updating Pointer Block\r\n                try { \r\n                    session.updatePointerBlockLocation();\r\n                } catch (error) {\r\n                    logMessage(`[blocky_tools@workers/sessions.js] ERROR - session.updatePointerBlockLocation():\\n${error}`);\r\n                }\r\n                //## Pointer Preview\r\n                if (session.pointerBlockLocation != null) {\r\n                    const molang = new Mc.MolangVariableMap();\r\n                    molang.setColorRGBA('variable.color',{red:1,green:0,blue:0,alpha:1});\r\n                    spawnBox(`trebesin:plane_box_`,session.pointerBlockLocation,player.dimension,molang,0.01);\r\n                }\r\n                player.onScreenDisplay.setActionBar(\r\n                    `[§aBlocky §2Tools§r] ${ session.pointerBlockLocation != null ? `[${session.pointerBlockLocation.x},${session.pointerBlockLocation.y},${session.pointerBlockLocation.z}]` : ''}\\n`+\r\n                    `§cPointer Mode: §l${PointerModeNames[session.pointerMode]}§r\\n`+\r\n                    `§bSelection Type: §l${SelectionTypeNames[session.selectionType]}§r\\n`+\r\n                    `§bAction: §l${session.getActionString()}§r\\n`\r\n                );\r\n            } else {\r\n                session.pointerBlockLocation = null;\r\n                leftClickDetector.stop(player.id);\r\n            }\r\n\r\n            if (session.pasteState.clipboardIndex != null) {\r\n                const molang = new Mc.MolangVariableMap();\r\n                molang.setColorRGBA('variable.color',{red:0,green:1,blue:1,alpha:1});\r\n                spawnBox(`trebesin:plane_box_`,session.pasteState.originLocation,player.dimension,molang,0.01);\r\n            }\r\n            //## Paste Action Update\r\n            try { \r\n                session.processPasteAction();\r\n            } catch (error) {\r\n                logMessage(`[blocky_tools@workers/sessions.js] ERROR - session.processPasteAction():\\n${error}`);\r\n                session.pasteState.clipboardIndex = null;\r\n            }\r\n        }\r\n    },1);\r\n\r\n    Mc.system.runInterval(() => {\r\n        for (const dimensionId of DIMENSION_IDS) {\r\n            for (const entity of Mc.world.getDimension(dimensionId).getEntities({type:'trebesin:left_click_detect'})) {\r\n                entity.triggerEvent('trebesin:make_despawn');\r\n            }\r\n        }\r\n    },3600);\r\n\r\n    Mc.system.runInterval(() => {\r\n        for (const playerId in SessionStore) {\r\n            const session = SessionStore[playerId];\r\n            session.updateActionPercent();\r\n        }\r\n    },20);\r\n}\r\n\r\n/**\r\n * Starts a new session to a player.\r\n * @param {Mc.Player} player \r\n * @returns {Session}\r\n */\r\nexport function startSession(player) {\r\n    const session = new Session(player);\r\n    SessionStore[player.id] = session;\r\n    return session;\r\n}\r\n\r\n/**\r\n * Gets a selection associated with a player. Creates a new session if the player doesn't have one yet.\r\n * @param {Mc.Player} player \r\n * @returns {Session}\r\n */\r\nexport function getSession(player) {\r\n    let session = SessionStore[player.id];\r\n    if (session == null) session = startSession(player);\r\n    return session;\r\n}\r\n\r\n/**\r\n * Gets a selection by its Id.\r\n * @param {Mc.Player} player \r\n * @returns {Session}\r\n */\r\nexport function getSessionById(id) {\r\n    return SessionStore[id];\r\n}\r\n\r\n//# Sessions:\r\n\r\n/**\r\n * Class used for storing sessions of Blocky Tools plugin bound to a player. It keeps track of configurations, selections and other states of player interaction with the plugin.\r\n */\r\nclass Session {\r\n    /**\r\n     * Creates a new session bound to a player that can be stored and accessed for purposes of Blocky Tools plugin.\r\n     * @param {Mc.Player} player \r\n     */\r\n    constructor(player) {\r\n        this.id = player.id;\r\n\r\n        this.#player = player;\r\n        this.#clipboard = new ClipboardInstance();\r\n        this.#actionConfirmation.pending = ActionPendingState.NONE;\r\n        this.#actionConfirmation.confirm = null;\r\n\r\n        this.pointerMode = PointerMode.FREE;\r\n        this.selectionType = SelectionType.CORNER\r\n        this.selections[SelectionType.CORNER] = new CornerSelection(player);\r\n        this.pasteState = {\r\n            originLocation: null,\r\n            clipboardIndex: null,\r\n            dimension: null\r\n        };\r\n        this.actionState = {\r\n            id: null,\r\n            progress: 0,\r\n            maxSteps: 0\r\n        };\r\n        this.config = {  \r\n            pointer: {\r\n                range: 3,\r\n                selectLiquids: false\r\n            }\r\n        };\r\n    }\r\n\r\n    //## Configurations\r\n    switchPointer(pointerMode = null) {\r\n        if (pointerMode == null) {\r\n            if (this.pointerMode < 3) this.pointerMode++;\r\n            else this.pointerMode = 0;\r\n        } else {\r\n            this.pointerMode = pointerMode;\r\n        }\r\n    }\r\n\r\n    //## Sending Info\r\n    sendSelectionBounds() {\r\n        const selection = this.getCurrentSelection();\r\n        const bounds = selection.getBounds();\r\n        const player = this.getPlayer();\r\n        sendMessage(`MAX: §mX:${bounds.max.x} §qY:${bounds.max.y} §tZ:${bounds.max.z}`,'§2BT§r',player);\r\n        sendMessage(`CENTER: §mX:${bounds.center.x} §qY:${bounds.center.y} §tZ:${bounds.center.z}`,'§2BT§r',player);\r\n        sendMessage(`MIN: §mX:${bounds.min.x} §qY:${bounds.min.y} §tZ:${bounds.min.z}`,'§2BT§r',player);\r\n    }\r\n\r\n    sendSelectionInside() {\r\n        const player = this.getPlayer();\r\n        const selection = this.getCurrentSelection();\r\n        const location = this.pointerBlockLocation;\r\n        sendMessage(`${selection.includes(location)} §mX:${location.x} §qY:${location.y} §tZ:${location.z}`,'§2BT§r',player);\r\n    }\r\n\r\n    //## Working with Selections\r\n    /**\r\n     * \r\n     * @param {object[]} permutations \r\n     * @param {Mc.BlockPermutation} permutations[].permutation\r\n     * @param {boolean} permutations[].exactMatch\r\n     * @param {boolean} exclusion \r\n     */\r\n    async copySelection(permutations,exclusion) {\r\n        const clipboard = this.getClipboard();\r\n        const selection = this.getCurrentSelection();\r\n        const dimension = selection.getDimension();\r\n        const bounds = selection.getBounds();\r\n        const player = this.getPlayer();\r\n        \r\n        sendMessage(`Started copying selected area!`,'§2BT§r',player);\r\n        const copiedData = {\r\n            locations: [],\r\n            bounds: {\r\n                min: {x:0,y:0,z:0},\r\n                max: VectorMath.sub(bounds.max,bounds.min),\r\n                center: VectorMath.sub(bounds.center,bounds.min)\r\n            },\r\n            particles: null,\r\n            config: {\r\n                rotation: {x:0,y:0,z:0},\r\n                scale: {x:1,y:1,z:1},\r\n                flip: {x:false,y:false,z:false}\r\n            }\r\n        };\r\n\r\n        copiedData.particles = generateLineBox([copiedData.bounds.min,copiedData.bounds.max],{red:0,green:1,blue:1,alpha:0.85});\r\n    \r\n        await selection.getAllBlocks((blockLocation) => {\r\n            try {\r\n                const block = dimension.getBlock(blockLocation);\r\n                const blockMatch = permutations.find(\r\n                    ({exactMatch,permutation}) => {\r\n                        return ((\r\n                            exactMatch && block.permutation === permutation\r\n                        ) || (\r\n                            !exactMatch && block.typeId === permutation.type.id\r\n                        ));\r\n                    }\r\n                ) != null;\r\n                if ((exclusion && blockMatch) || (!exclusion && !blockMatch)) return;\r\n                \r\n                const blockState = Blocks.copyBlockState(block);\r\n                const blockStateIndex = clipboard.getBlockStateIndex(blockState);\r\n                //logMessage(`${blockStateIndex},${JSON.stringify(blockLocation)}`);\r\n                copiedData.locations.push([\r\n                    VectorMath.sub(blockLocation,selection.minCoordinates),blockStateIndex\r\n                ]);\r\n            } catch (error) {\r\n                logMessage(`Failed to copy block [§m${blockLocation.x},§q${blockLocation.y},§t${blockLocation.z}] due to error:\\n ${error}`);\r\n            }\r\n        });\r\n    \r\n        sendMessage(`Finished copying §l§m${copiedData.locations.length}§r blocks!`,'§2BT§r',player);\r\n        clipboard.structureData[0] = copiedData;\r\n        //clipboard.structureData.push(copiedData);\r\n    }\r\n\r\n    flip(axis) {\r\n        const selection = this.getCurrentSelection();\r\n        selection.flip(axis);\r\n    }\r\n\r\n    //TODO Add a way to rotate, scale, translate, mirror and flip the selection in this phase.\r\n    /**\r\n     * Prepares to paste a selection from the clipboard of the session. It asks the player to confirm the paste and highlights the area the paste will occur inside of.\r\n     * @param {VectorMath.Vector3} originLocation\r\n     * @param {number} clipboardIndex \r\n     */\r\n    preparePasteSelection(originLocation,clipboardIndex = 0) {\r\n        const player = this.getPlayer();\r\n\r\n        this.requestActionConfirmation();\r\n        sendMessage(`Use the commands \".confirm\" or \".cancel\" to confirm or cancel the paste.`,'§2BT§r',player);\r\n\r\n        this.pasteState.dimension = player.dimension;\r\n        this.pasteState.originLocation = originLocation;\r\n        this.pasteState.clipboardIndex = clipboardIndex;\r\n    }\r\n\r\n    pasteSelection(baseLocation,dimension,clipboardIndex) {\r\n        const player = this.getPlayer();\r\n        const clipboard = this.getClipboard();\r\n\r\n        clipboard.getAllBlocksProccessed((clipboardLocation,blockState) => {\r\n            const block = dimension.getBlock(VectorMath.sum(baseLocation,clipboardLocation));\r\n            editBlock(\r\n                block,\r\n                blockState,\r\n                {actorId:player.id,updateType:BlockHistoryUpdateTypes.blockyTools}\r\n            );\r\n        },clipboardIndex);\r\n    }\r\n\r\n    /**\r\n     * Sets the permutation of all blocks contained inside the area of the selection.\r\n     * @param {Mc.BlockPermutation} fillPermutation \r\n     */\r\n    async fillSelection(fillPermutation,options) {\r\n        const player = this.getPlayer();\r\n        const selection = this.getCurrentSelection();\r\n        const dimension = selection.getDimension();\r\n\r\n        const fullProgress = selection.getArea();\r\n        this.setCurrentAction(SessionActionIds.SELECTION_FILL,fullProgress);\r\n\r\n        await selection.getBlocks(async (blockLocation) => {\r\n            this.progressCurrentAction();\r\n            setBlockPermutation(\r\n                dimension.getBlock(blockLocation),\r\n                fillPermutation,\r\n                {actorId:player.id,updateType:BlockHistoryUpdateTypes.blockyTools}\r\n            );\r\n            \r\n        },options);\r\n\r\n        sendMessage(`Finished filling!`,'§2BT§r',player);\r\n        this.setCurrentAction(null,null);\r\n    }\r\n\r\n    /**\r\n     * Sets the permutation of all blocks on the outline of the selection.\r\n     * @param {Mc.BlockPermutation} fillPermutation \r\n     */\r\n    fillSelectionOutline(fillPermutation,options) {\r\n        const player = this.getPlayer();\r\n        const selection = this.getCurrentSelection();\r\n        const dimension = selection.getDimension();\r\n\r\n        selection.getOutlineBlocks(async (blockLocation) => {\r\n            setBlockPermutation(\r\n                dimension.getBlock(blockLocation),\r\n                fillPermutation,\r\n                {actorId:player.id,updateType:BlockHistoryUpdateTypes.blockyTools}\r\n            );\r\n            \r\n        },options);\r\n    }\r\n\r\n    /**\r\n     * Sets the permutation of all blocks contained inside the area of the selection follow replace rules that allow to only include/exclude specific blockTypes or permutations.\r\n     * @param {Mc.BlockPermutation} fillPermutation \r\n     * @param {object[]} replacePermutations \r\n     * @param {Mc.BlockPermutation} replacePermutations[].permutation\r\n     * @param {boolean} replacePermutations[].exactMatch\r\n     * @param {boolean} exclusion \r\n     */\r\n    fillReplaceSelection(fillPermutation,replacePermutations,exclusion) {\r\n        const player = this.getPlayer();\r\n        const selection = this.getCurrentSelection();\r\n        const dimension = selection.getDimension();\r\n        selection.getAllBlocks(async (blockLocation) => {\r\n            const block = dimension.getBlock(blockLocation);\r\n            const blockMatch = replacePermutations.find(\r\n                ({exactMatch,permutation}) => {\r\n                    return ((\r\n                        exactMatch && block.permutation === permutation\r\n                    ) || (\r\n                        !exactMatch && block.typeId === permutation.type.id\r\n                    ));\r\n                }\r\n            ) != null;\r\n            if (\r\n                (exclusion && !blockMatch) || (!exclusion && blockMatch)\r\n            ) setBlockPermutation(block,fillPermutation.permutation,{actorId:player.id,updateType:BlockHistoryUpdateTypes.blockyTools});\r\n        });\r\n        \r\n    }\r\n\r\n    fillSelectionCorners(fillPermutation) {\r\n        const player = this.getPlayer();\r\n        const selection = this.getCurrentSelection();\r\n\r\n        for (const blockLocation of selection.getAllCorners()) {\r\n            sendMessage(`§mX:${blockLocation.x} §qY:${blockLocation.y} §tZ:${blockLocation.z}`,'§2BT§r',player);\r\n            setBlockPermutation(\r\n                player.dimension.getBlock(blockLocation),\r\n                fillPermutation,\r\n                {actorId:player.id,updateType:'blockyTools: player'}\r\n            );\r\n        }\r\n    }\r\n\r\n    //## Action Confirm\r\n    /**\r\n     * Senss a request to the player of the session to make a confirmation of some action the plugin wants to confirm.\r\n     * @returns {undefined}\r\n     */\r\n    requestActionConfirmation() {\r\n        if (this.#actionConfirmation.pending > ActionPendingState.NONE) throw new Error('There is an already pending confirmation for the session!');\r\n        else this.#actionConfirmation.pending = ActionPendingState.WAIT;\r\n    }\r\n\r\n    /**\r\n     * Returns state of the confirmation, either `true` or `false` after player has confirmed the action or `null` when confirmation is still pending from the player.\r\n     * @throws Throws an error when there wasn't a request for confirmation made yet.\r\n     * @returns {boolean | null}\r\n     */\r\n    getActionCofirmation() {\r\n        if (this.#actionConfirmation.pending === ActionPendingState.NONE) throw new Error('No action currently pending confirmation!');\r\n        if (this.#actionConfirmation.pending === ActionPendingState.WAIT) return null;\r\n        if (this.#actionConfirmation.pending === ActionPendingState.DONE) {\r\n            this.#actionConfirmation.pending = ActionPendingState.NONE;\r\n            return this.#actionConfirmation.confirm;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Sets the state of the confirmation for the player, used to confirm an action by a player.\r\n     * @param {boolean} confirmValue `true` if player has confirmed, `false` if player has cancelled the action.\r\n     * @returns {undefined}\r\n     */\r\n    setActionConfirmation(confirmValue) {\r\n        const player = this.getPlayer();\r\n        if (this.#actionConfirmation.pending !== ActionPendingState.WAIT) {\r\n            sendMessage('§nNo action currently pending confirmation!','§2BT§r',player)\r\n            return;\r\n        }\r\n        this.#actionConfirmation.confirm = confirmValue;\r\n        this.#actionConfirmation.pending = ActionPendingState.DONE;\r\n        if (confirmValue) sendMessage('§qConfirmed action!','§2BT§r',player);\r\n        else sendMessage('§mCancelled action!','§2BT§r',player);\r\n    }\r\n\r\n    //## Action State\r\n    /**\r\n     * Sets the current action.\r\n     * @param {number | null} id \r\n     */\r\n    setCurrentAction(id,fullProgress) {\r\n        this.actionState.id = id;\r\n        this.actionState.fullProgress = fullProgress;\r\n        this.actionState.currentProgress = 0;\r\n        this.actionState.percentDone = 0;\r\n    }\r\n\r\n    progressCurrentAction() {\r\n        return ++this.actionState.currentProgress;\r\n    }\r\n\r\n    updateActionPercent() {\r\n        this.actionState.percentDone = Math.round((this.actionState.currentProgress*100)/this.actionState.fullProgress);\r\n    }\r\n\r\n    getActionString() {\r\n        if (this.actionState.id == null) return 'None';\r\n        return `§q§l${SessionActions[this.actionState.id].name}§r - §p${this.actionState.percentDone}§t%`;\r\n    }\r\n\r\n    //## State Update Functions *Designed to run inside an interval.*\r\n    updatePointerBlockLocation() {\r\n        const player = this.getPlayer();\r\n        switch (this.pointerMode) {\r\n            case PointerMode.BLOCK: {\r\n                this.pointerBlockLocation = player.getBlockFromViewDirection().location;\r\n            }   break;\r\n            case PointerMode.FACE: {\r\n                //const targetLocation = player.getBlockFromViewDirection().location;\r\n                //const viewVector = player.getViewDirection();\r\n                //const relativeVector = subVectors(\r\n                //    player.getHeadLocation(),targetLocation\r\n                //);\r\n                this.pointerBlockLocation = sumVectors(\r\n                    player.getBlockFromViewDirection().location,\r\n                    FACE_DIRECTIONS[getDirectionFace(player.getViewDirection())]\r\n                );\r\n                //session.pointerBlockLocation = floorVector(\r\n                //    sumVectors(sumVectors(targetLocation,{x:0.5,y:0.5,z:0.5}),multiplyVector(viewVector,-1))\r\n                //);\r\n            }   break;\r\n            case PointerMode.FREE: {\r\n                this.pointerBlockLocation = floorVector(sumVectors(\r\n                    player.getHeadLocation(),\r\n                    setVectorLength(player.getViewDirection(),this.config.pointer.range)\r\n                ));\r\n            }   break;\r\n            case PointerMode.ACTION: {\r\n                this.pointerBlockLocation = null;\r\n            }\r\n        }\r\n    }\r\n\r\n    processPasteAction() {\r\n        if (this.pasteState.clipboardIndex == null) return;\r\n        const clipboard = this.getClipboard();\r\n        clipboard.getAllParticles((particle) => {\r\n            spawnParticleLine(\r\n                'trebesin:line_flex2',\r\n                this.pasteState.dimension,\r\n                VectorMath.sum(this.pasteState.originLocation,particle.location),\r\n                particle.direction,\r\n                particle.length,\r\n                0.051,\r\n                particle.color\r\n            );\r\n        },this.pasteState.clipboardIndex);\r\n\r\n        const confirm = this.getActionCofirmation();\r\n        if (confirm != null) {\r\n            if (confirm) this.pasteSelection(\r\n                this.pasteState.originLocation,\r\n                this.pasteState.dimension,\r\n                this.pasteState.clipboardIndex\r\n            );\r\n            this.pasteState.clipboardIndex = null;\r\n        }\r\n    }\r\n\r\n    //## Getters\r\n    /**\r\n     * Player whom the session belongs to.\r\n     * @returns {Mc.Player}\r\n     */\r\n    getPlayer() {\r\n        return this.#player;\r\n    }\r\n    /**\r\n     * Clipboard instance bound to the session.\r\n     * @returns {ClipboardInstance}\r\n     */\r\n    getClipboard() {\r\n        return this.#clipboard;\r\n    }\r\n    /**\r\n     * Single function that returns the current selection the player is using.\r\n     * @returns {CornerSelection}\r\n     */\r\n    getCurrentSelection() {\r\n        return this.selections[this.selectionType];\r\n    }\r\n\r\n    //## Properties\r\n    //### Metadata:\r\n    id\r\n    #player\r\n    //### Configurations:\r\n    pointerMode\r\n    selectionType\r\n    config = {}\r\n    //### State:\r\n    /** @type {VectorMath.Vector3} */\r\n    pointerBlockLocation\r\n    selections = [];\r\n    pasteState = {};\r\n    actionState = {};\r\n    //### Other:\r\n    #clipboard\r\n    #actionConfirmation = {};\r\n}\r\n\r\n\r\n//# Clipboard:\r\nclass ClipboardInstance {\r\n    constructor() {}\r\n\r\n    /** @type {Blocks.BlockState[]} */\r\n    blockStateData = []\r\n    /** @type {ClipboardStructureData[]} */\r\n    structureData = []\r\n\r\n    /**\r\n     * \r\n     * @param {Blocks.BlockState} blockState \r\n     * @returns {number}\r\n     */\r\n    getBlockStateIndex(blockState) {\r\n        const indexInArray = this.blockStateData.findIndex((savedBlockState) => Blocks.compareBlockStates(blockState,savedBlockState));\r\n        if (indexInArray >= 0) return indexInArray;\r\n        else return (this.blockStateData.push(blockState) - 1);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {ClipboardBlocksCallback} callback \r\n     * @param {number} clipboardIndex\r\n     * @returns \r\n     */\r\n    getAllBlocks(callback,clipboardIndex) {\r\n        const locations = this.structureData[clipboardIndex].locations;\r\n        if (locations == null) return null;\r\n        for (let index = 0;index < locations.length;index++) {\r\n            callback(locations[index][0],this.blockStateData[locations[index][1]]);\r\n        }\r\n    }\r\n\r\n    \r\n    /**\r\n     * Translates the position of the origin and all locations relative to it in the direction provided by `translation` vector.\r\n     * * Useful to change the relative point which rotation occurs around. *\r\n     * @param {VectorMath.Vector3} translation Direction to move the block locations.\r\n     * @param {number} clipboardIndex\r\n     * @returns \r\n     */\r\n    translateLocations(translation,clipboardIndex) {\r\n        const bounds = this.getBounds(clipboardIndex);\r\n        const locations = this.structureData[clipboardIndex].locations;\r\n        for (let index = 0;index < locations.length;index++) {\r\n            locations[index][0] = VectorMath.sum(locations[index][0],translation);\r\n        }\r\n        bounds.max = VectorMath.sum(bounds.max,translation);\r\n        bounds.min = VectorMath.sum(bounds.min,translation);\r\n        bounds.center = VectorMath.sum(bounds.center,translation);\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {ClipboardBlocksCallback} callback \r\n     * @param {number} clipboardIndex\r\n     * @returns \r\n     */\r\n    async getAllBlocksProccessed(callback,clipboardIndex) {\r\n        const config = this.getConfig(clipboardIndex);\r\n        const ogBounds = this.getBounds(clipboardIndex);\r\n        const bounds = {\r\n            max: VectorMath.vectorMultiply(ogBounds.max,config.scale),\r\n            center: VectorMath.vectorMultiply(ogBounds.center,config.scale),\r\n            min: VectorMath.vectorMultiply(ogBounds.min,config.scale)\r\n        };\r\n        const locations = this.structureData[clipboardIndex].locations;\r\n        if (locations == null) return null;\r\n        //### Scaling process:\r\n        if (!VectorMath.compare(config.scale,{x:1,y:1,z:1})) {\r\n            const blockMap = new Map();\r\n            for (let index = 0;index < locations.length;++index) {\r\n                let blockLocation = VectorMath.copy(locations[index][0]);\r\n                const scaledLocations = Geometry.scaleBlockLocation(blockLocation,config.scale);\r\n                for (let locationIndex = 0;locationIndex < scaledLocations.length;++locationIndex) {\r\n                    const location = scaledLocations[locationIndex];\r\n                    const flooredLocation = VectorMath.floor(location);\r\n                    const locationString = `${flooredLocation.x},${flooredLocation.y},${flooredLocation.z}`;\r\n                    const distance = Math.abs(location.x-flooredLocation.x-0.5)+Math.abs(location.y-flooredLocation.y-0.5)+Math.abs(location.z-flooredLocation.z-0.5);\r\n                    if (!blockMap.has(locationString) || blockMap.get(locationString).distance > distance) {\r\n                        blockMap.set(locationString,{\r\n                            distance,\r\n                            block: [flooredLocation,locations[index][1]]\r\n                        });\r\n                    }\r\n                }\r\n            }\r\n            locations.length = 0;\r\n            blockMap.forEach((value) => {\r\n                locations.push(value.block);\r\n            })\r\n        }\r\n        //### Flipping and rotation:\r\n        for (let index = 0;index < locations.length;index++) {\r\n            const blockState = this.blockStateData[locations[index][1]];\r\n            let blockLocation = VectorMath.copy(locations[index][0]);\r\n            for (const axis in config.flip) {\r\n                if (!config.flip[axis]) continue;\r\n                blockLocation = VectorMath.flip(blockLocation,bounds.center,axis);\r\n            }\r\n            for (const axis in config.rotation) {\r\n                const angleRadians = (Math.PI/180)*config.rotation[axis];\r\n                const angleResults = {\r\n                    sin: Math.sin(angleRadians),\r\n                    cos: Math.cos(angleRadians)\r\n                }\r\n                if (config.rotation[axis] === 0) continue;\r\n                blockLocation = VectorMath.rotateSinCos(blockLocation,angleResults,axis);\r\n            }\r\n            await callback(blockLocation,blockState);\r\n        }\r\n    }\r\n\r\n    getAllParticles(callback,clipboardIndex) {\r\n        const particles = this.structureData[clipboardIndex].particles;\r\n        if (particles == null) return null;\r\n        for (let index = 0;index < particles.length;index++) {\r\n            callback(particles[index]);\r\n        }\r\n    }\r\n\r\n    getBounds(clipboardIndex) {\r\n        return this.structureData[clipboardIndex].bounds;\r\n    }\r\n    \r\n    getConfig(clipboardIndex) {\r\n        return this.structureData[clipboardIndex].config;\r\n    }\r\n\r\n    /**\r\n     * Calling this function updates the particle preview for the clipboard contents.\r\n     * *Use mainly when updating configs of the clipboard contents or translating block locations.*\r\n     * @param {number} clipboardIndex Index of the clipboard contents.\r\n     */\r\n    updateParticlePreview(clipboardIndex) {\r\n        const bounds = this.getBounds(clipboardIndex);\r\n        const config = this.getConfig(clipboardIndex);\r\n        //### Create new particle set forming a box:\r\n        const particleData = generateLineBox([bounds.min,bounds.max],{red:0,green:1,blue:1,alpha:0.85});\r\n\r\n        //### Prepare center value for flip:\r\n        const particleBounds = expandArea([bounds.min,bounds.max],[0,1]); //*Particles are 1 block longer than the actual volume.\r\n        const particleCenter = VectorMath.divide(\r\n            VectorMath.sum(\r\n                VectorMath.getMaximalVector(particleBounds),\r\n                VectorMath.getMinimalVector(particleBounds)\r\n            ),2\r\n        );\r\n\r\n        //### Transform the particles !!(order: flip -> scale -> rotate)!!:\r\n        for (let index = 0;index < particleData.length; index++) {\r\n            const particle = particleData[index];\r\n            let {location,direction,length} = particle;\r\n            //### Apply Flip:\r\n            for (const axis in config.flip) {\r\n                if (!config.flip[axis]) continue;\r\n                location = VectorMath.flip(location,particleCenter,axis);\r\n                direction = VectorMath.flip(direction,{x:0,y:0,z:0},axis);\r\n            }\r\n            //### Apply Scale:\r\n            location = VectorMath.vectorMultiply(location,config.scale);\r\n            direction = VectorMath.vectorMultiply(direction,config.scale);\r\n            length = VectorMath.getLength(direction);\r\n            //### Apply Rotation:\r\n            for (const axis in config.rotation) {\r\n                if (config.rotation[axis] === 0) continue;\r\n                const angleRadians = (Math.PI/180)*config.rotation[axis];\r\n                const angleResults = {\r\n                    sin: Math.sin(angleRadians),\r\n                    cos: Math.cos(angleRadians)\r\n                }\r\n                location = VectorMath.rotateSinCos(location,angleResults,axis);\r\n                direction = VectorMath.rotateSinCos(direction,angleResults,axis);\r\n            }\r\n            //### Save the calculated values:\r\n            particleData[index].location = location;\r\n            particleData[index].length = length;\r\n            particleData[index].direction = direction;\r\n        }\r\n        //### Save the particles:\r\n        this.structureData[clipboardIndex].particles = particleData;\r\n    }\r\n}\r\n\r\n\r\nconst SessionActions = {\r\n    0: {\r\n        groupId: null,\r\n        name: 'Fill'\r\n    },\r\n    1: {\r\n        groupId: null,\r\n        name: 'Outline Fill'\r\n    },\r\n    2: {\r\n        groupId: null,\r\n        name: 'Fill Replace'\r\n    },\r\n    100: {\r\n        groupId: 0,\r\n        name: 'Copy'\r\n    },\r\n    101: {\r\n        groupId: 0,\r\n        name: 'Paste'\r\n    }\r\n}\r\n\r\nconst SessionActionIds = {\r\n    SELECTION_FILL: 0,\r\n    SELECTION_OUTLINE_FILL: 1,\r\n    SELECTION_FILL_REPLACE: 2,\r\n    CLIPBOARD_COPY: 100,\r\n    CLIPBOARD_PASTE: 101\r\n}\r\n\r\n//# Types / Constants\r\n\r\n/**\r\n * @callback ClipboardBlocksCallback Callback that gives a `blockLocation` and a `blockState`.\r\n * @param {VectorMath.Vector3} blockLocation\r\n * @param {import('../../../mc_modules/blocks').BlockState} blockState\r\n */\r\n\r\n/**\r\n * @typedef ClipboardStructureConfig\r\n * @property {VectorMath.Vector3} rotation Defines how the clipboard contents are rotated on each axis.\r\n * @property {VectorMath.Vector3} scale Defines how the clipboard contents are rotated on each axis.\r\n * @property {object} flip Defines if the clipboard contents are flipped on any axis.\r\n * @property {boolean} flip.x Flip value for the X axis.\r\n * @property {boolean} flip.y Flip value for the Y axis.\r\n * @property {boolean} flip.z Flip value for the Z axis.\r\n */\r\n\r\n/**\r\n * @typedef ClipboardStructureData Interface to define a set of blocks that are copied to the clipboard of a session.\r\n * @property {VectorMath.Vector3 | number [][]} locations Array of arrays that consist of 2 items - **0**: `Vector3` to define a location relative to an origin and **1**: an index `number` that defines the block state coresponding to the location.\r\n * @property {import('./selection').SelectionBounds} bounds Bounds of the clipboard contents that are important to technical workings of the clipboard.\r\n * @property {object[]} particles Array of particles that show the user what is inside the clipboard contents.\r\n * @property {ClipboardStructureConfig} config Configurations that define how the user has manipulated the clipboard contents, it gets processed and presented when the user pastes the data.\r\n*/\r\n\r\n/**\r\n * Enum for the pointer modes that the player can use.\r\n * @readonly\r\n * @enum {number}\r\n */\r\nexport const ActionPendingState = {\r\n    /** No action is pending confirmation. */\r\n    NONE: 0,\r\n    /** The session is currently waiting for user to confirm the action. */\r\n    WAIT: 1,\r\n    /** The session has got confirmation from its player and is pending to be recieved by the plugin.*/\r\n    DONE: 2\r\n};\r\n\r\n/**\r\n * Enum for the pointer modes that the player can use.\r\n * @readonly\r\n * @enum {number}\r\n */\r\nexport const PointerMode = {\r\n    /** The first block the player view intersects with gets selected. */\r\n    BLOCK: 0,\r\n    /** The block adjecent to the face of the first block the player view intersects with gets selected. */\r\n    FACE: 1,\r\n    /** The block on the position that is exactly `{config.selectionRange}` blocks in front of the player gets selected. */\r\n    FREE: 2,\r\n    /** No block gets selected, instead an action is triggered. */\r\n    ACTION: 3\r\n};\r\n\r\n/**\r\n * Enum for the pointer mode names that the player can use.\r\n * @readonly\r\n * @enum {number}\r\n */\r\nexport const PointerModeNames = ['Block','Face','Free','Action'];\r\n\r\n/**\r\n * Enum for the selection types that the player can use.\r\n * @readonly\r\n * @enum {number}\r\n */\r\nexport const SelectionType = {\r\n    /** Selection which is defined by a pair of 2 points in the corners of a cuboid area fill.*/\r\n    CORNER: 0,\r\n    /** Selection which is defined by a center of a radius and points for x,y,z axis which either define radius or length of a plane. */\r\n    ELIPSE: 1,\r\n    /** Selection which is defined by a collection of points, structure they compose then fills an area between them used as vertices. */\r\n    POINT: 2\r\n};\r\n\r\n/**\r\n * Enum for names of the selection types that the player can use.\r\n * @readonly\r\n * @enum {number}\r\n */\r\nexport const SelectionTypeNames = ['Corner','Elipse','Point'];"]}