{"version":3,"sources":["plugins/blocky_tools/workers/selection.js"],"names":[],"mappings":"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","file":"selection.js","sourcesContent":["//Base imports\r\nimport * as Mc from '@minecraft/server';\r\n//MC Modules\r\nimport { spawnBlockSelection, spawnBox, spawnLineBox } from '../../../mc_modules/particles';\r\n//JS Modules\r\nimport { getBlockOutline, getGridBlock } from '../../../js_modules/geometry';\r\nimport { insertToArray } from '../../../js_modules/array';\r\nimport { logMessage } from '../../debug/debug';\r\nimport * as VectorMath from '../../../js_modules/vectorMath';\r\nimport * as Blocks from '../../../mc_modules/blocks';\r\nimport { BlockHistoryUpdateTypes, editBlock } from '../../block_history/block_history';\r\n\r\n/**\r\n * @typedef Vector3\r\n * @property {number} x Value of the vector on the X axis.\r\n * @property {number} y Value of the vector on the Y axis.\r\n * @property {number} z Value of the vector on the Z axis.\r\n */\r\n\r\n/**\r\n * A selection class that the blocky tools plugin works with.\r\n */\r\nclass BaseSelection {\r\n    /**\r\n     * \r\n     * @param {Mc.Player} player The player associated with the slection.\r\n     * @param {Mc.Dimension} dimension The dimension the selection is contained within.\r\n     */\r\n    constructor(player) {\r\n        this.#player = player;\r\n        this.#dimension = player.dimension;\r\n        this.#empty = true;\r\n        this.maxCoordinates = {\r\n            x: null,\r\n            y: null,\r\n            z: null\r\n        };\r\n        this.minCoordinates = {\r\n            x: null,\r\n            y: null,\r\n            z: null\r\n        };\r\n        this.centerCoordinates = {\r\n            x: null,\r\n            y: null,\r\n            z: null\r\n        };\r\n    }\r\n\r\n    /**\r\n     * Returns the player associated with the selection.\r\n     * @returns {Mc.Player}\r\n     */\r\n    getPlayer() {\r\n        return this.#player;\r\n    }\r\n    /**\r\n     * Returns the dimension the selection is contained within.\r\n     * @returns {Mc.Dimension}\r\n     */\r\n    getDimension() {\r\n        return this.#dimension;\r\n    }\r\n    /**\r\n     * Returns if the selection is empty of any blocks. Selection isn't considered empty once it's defined enough to contain blocks in its volume.\r\n     * @returns {boolean}\r\n     */\r\n    isEmpty() {\r\n        return this.#empty;\r\n    }\r\n    /**\r\n     * Returns bounding information for the selection area.\r\n     * @returns {SelectionBounds}\r\n     */\r\n    getBounds() {\r\n        return {\r\n            min: VectorMath.copy(this.minCoordinates),\r\n            max: VectorMath.copy(this.maxCoordinates),\r\n            center: VectorMath.copy(this.centerCoordinates)\r\n        }\r\n    }\r\n\r\n    universalGetAllBlocks(callback) {\r\n        const bounds = this.getBounds();\r\n        for (let x = bounds.min.x;x <= bounds.max.x;x++) {\r\n            for (let y = bounds.min.y;y <= bounds.max.y;y++) {\r\n                for (let z = bounds.min.z;z <= bounds.max.z;z++) {\r\n                    const coordinates = {x,y,z};\r\n                    if (this.includes(coordinates)) callback(coordinates);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    updateCenter() {\r\n        this.centerCoordinates = VectorMath.divide(VectorMath.sum(this.minCoordinates,this.maxCoordinates),2);\r\n    }\r\n\r\n    /**\r\n     * Flips all the blocks in the selection on the chosen axis.\r\n     * @param {'x'|'y'|'z'} axis Axis to flip.\r\n     */\r\n    flip(axis) {\r\n        const bounds = this.getBounds();\r\n        const dimension = this.getDimension();\r\n        const player = this.getPlayer();\r\n\r\n        const updatedBlocks = [];\r\n        this.getAllBlocks((blockLocation) => {\r\n            const block = dimension.getBlock(blockLocation);\r\n            const flippedBlockLocation = VectorMath.copy(blockLocation);\r\n            flippedBlockLocation[axis] = (bounds.center[axis]-(blockLocation[axis]-bounds.center[axis]));\r\n            updatedBlocks.push({\r\n                blockState: Blocks.copyBlockState(block),\r\n                blockLocation: flippedBlockLocation\r\n            })\r\n        })\r\n\r\n        for (const newBlock of updatedBlocks) {\r\n            const block = dimension.getBlock(newBlock.blockLocation);\r\n            editBlock(block,newBlock.blockState,{actorId:player.id,updateType:BlockHistoryUpdateTypes.blockyTools});\r\n        }\r\n        //center-(cordinate-center)\r\n    } \r\n\r\n    /** @protected */\r\n    maxCoordinates\r\n    /** @protected */\r\n    minCoordinates\r\n    /** @protected */\r\n    centerCoordinates\r\n    \r\n    #empty\r\n    #dimension\r\n    #player\r\n}\r\n \r\n/**\r\n * Selection with basic 2 corner definition.\r\n */\r\nexport class CornerSelection extends BaseSelection {\r\n    /**\r\n     * Sets corner of the selection.\r\n     * @param {number} index Index of the corner 0 or 1.\r\n     * @param {Vector3} [coord] Coordinates of the selection corner. If omitted resets the coord to null.\r\n     */\r\n    setCorner(index,coords = null) {\r\n        if (index !== 1 && index !== 0) throw new Error('Invalid Index');\r\n        this.#corners[index] = VectorMath.floor(coords);\r\n        this.updateMinMax();\r\n    }\r\n    /**\r\n     * Returns the corners that are currently selected to define the selection.\r\n     * @returns {Vector3[]}\r\n     */\r\n    getSelectionCorners() {\r\n        return [this.#corners[0],this.#corners[1]];\r\n    }\r\n    /**\r\n     * Returns all corners that exist on the selection.\r\n     * @returns {Vector3[]}\r\n     */\r\n    getAllCorners() {\r\n        const corners = this.#corners;\r\n        const notEquals = {\r\n            x: corners[0].x !== corners[1].x,\r\n            y: corners[0].y !== corners[1].y,\r\n            z: corners[0].z !== corners[1].z\r\n        };\r\n        const allCorners = [];\r\n        allCorners.push({x:corners[0].x,y:corners[0].y,z:corners[0].z});\r\n        if (notEquals.x && notEquals.z) allCorners.push({x:corners[1].x,y:corners[0].y,z:corners[0].z});\r\n        if (notEquals.z && notEquals.x && notEquals.y) allCorners.push({x:corners[0].x,y:corners[0].y,z:corners[1].z});\r\n        if (notEquals.y && (notEquals.x || notEquals.z)) allCorners.push({x:corners[1].x,y:corners[0].y,z:corners[1].z});\r\n        if (notEquals.y && (notEquals.x || notEquals.z)) allCorners.push({x:corners[0].x,y:corners[1].y,z:corners[0].z});\r\n        if (notEquals.z && notEquals.x && notEquals.y) allCorners.push({x:corners[1].x,y:corners[1].y,z:corners[0].z});\r\n        if (notEquals.x && notEquals.z) allCorners.push({x:corners[0].x,y:corners[1].y,z:corners[1].z});\r\n        if (!(!notEquals.x && !notEquals.y && !notEquals.z)) allCorners.push({x:corners[1].x,y:corners[1].y,z:corners[1].z});\r\n\r\n        return allCorners;\r\n    }\r\n    /**\r\n     * Returns if a block coordinates are contained within the selection area.\r\n     * @param {Vector3} coordinates\r\n     * @returns {boolean}\r\n     */\r\n    includes(coordinates) {\r\n        const max = this.maxCoordinates;\r\n        const min = this.minCoordinates;\r\n\r\n        return !(\r\n            coordinates.x < min.x || coordinates.x > max.x ||\r\n            coordinates.y < min.y || coordinates.y > max.y ||\r\n            coordinates.z < min.z || coordinates.z > max.z\r\n        )\r\n    }\r\n\r\n    /**\r\n     * Returns the number blocks in the selection.\r\n     * @returns \r\n     */\r\n    getArea() {\r\n        const lengths = VectorMath.sub(this.maxCoordinates,this.minCoordinates)\r\n        return Math.abs((lengths.x+1) * (lengths.y+1) * (lengths.z+1));\r\n    }\r\n\r\n    /**\r\n     * Calls the callback for every single block that is within the selection area.\r\n     * @arg {function} callback\r\n     * @returns \r\n     */\r\n    async getAllBlocks(callback) {\r\n        await getGridBlock(this.getSelectionCorners(),callback);\r\n    }\r\n\r\n    /**\r\n     * Calls the callback selected blocks in a specific shape defined in options.\r\n     * @arg {function} callback\r\n     * @returns \r\n     */\r\n    async getBlocks(callback,options) {\r\n        await getGridBlock(this.getSelectionCorners(),callback,options);\r\n    }\r\n\r\n    /**\r\n     * Calls the callback for every single block that is on the outline of the selection area.\r\n     * @arg {function} callback\r\n     * @returns \r\n     */\r\n    async getOutlineBlocks(callback,options) {\r\n        await getBlockOutline(this.getSelectionCorners(),callback,options);\r\n    }\r\n\r\n    updateMinMax() {\r\n        const corners = this.getSelectionCorners();\r\n        if (corners[0] == null && corners[1] == null) {\r\n            this.maxCoords = {x:null,y:null,z:null};\r\n            this.minCoords = {x:null,y:null,z:null};\r\n        } else if (corners[0] == null) {\r\n            const copyOfVector = VectorMath.copy(corners[1]);\r\n            this.maxCoords = copyOfVector;\r\n            this.minCoords = copyOfVector;\r\n        } else if (corners[1] == null) {\r\n            const copyOfVector = VectorMath.copy(corners[0]);\r\n            this.maxCoords = copyOfVector;\r\n            this.minCoords = copyOfVector;\r\n        } else {\r\n            const maxCoord = {};\r\n            const minCoord = {};\r\n            for (const axis of ['x','y','z']) {\r\n                if (corners[0][axis] > corners[1][axis]) {\r\n                    maxCoord[axis] = corners[0][axis];\r\n                    minCoord[axis] = corners[1][axis];\r\n                } else {\r\n                    maxCoord[axis] = corners[1][axis];\r\n                    minCoord[axis] = corners[0][axis];\r\n                }\r\n            }\r\n            this.maxCoordinates = maxCoord;\r\n            this.minCoordinates = minCoord;\r\n            this.updateCenter();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Creates particles for the outline of the selection in the world.\r\n     */\r\n    createParticleOutline(color = null,duration = null) {\r\n        const corners = this.getSelectionCorners();\r\n        if (corners[0] == null || corners[1] == null) return;\r\n\r\n        const molangVariables = new Mc.MolangVariableMap();\r\n        molangVariables.setColorRGBA(`variable.color`,{red:0,green:0,blue:1,alpha:0.85});\r\n        molangVariables.setSpeedAndDirection(`variable.time`,0.06,{x:0,y:0,z:0});\r\n        spawnLineBox('trebesin:line_flex2',corners,this.getDimension(),molangVariables);\r\n    }\r\n\r\n    /**\r\n     * Creates particles for the functional blocks of the selection in the world.\r\n     */\r\n    createParticleBlocks(color = null,duration = null) {\r\n        const molangVariables = new Mc.MolangVariableMap();\r\n        molangVariables.setColorRGBA('variable.color',{red:0,green:1,blue:0,alpha:1});\r\n        molangVariables.setSpeedAndDirection(`variable.time`,0.06,{x:0,y:0,z:0});\r\n        for (const cornerCoordinate of this.getSelectionCorners()) {\r\n            if (cornerCoordinate == null) continue;\r\n            spawnBox('trebesin:plane_box_',cornerCoordinate,this.getDimension(),molangVariables,0.005);\r\n        }\r\n    }\r\n    /**\r\n     * G\r\n     */\r\n    generatePlaneParticlePreview(callback) {\r\n        callback(location,axis,size)\r\n    }\r\n \r\n    #corners = [];\r\n    #definedCorners = 0;\r\n}\r\n \r\nclass ExtendedSelection {\r\n    /* setting selection */\r\n    addPoint(coords) {\r\n        insertToArray(this.#points,coords);\r\n    }\r\n \r\n    removePoint(coords) {\r\n        const index = this.#points.findIndex((value) => value.x === coords.x && value.y === coords.y && value.z === coords.z);\r\n        delete this.#points[index];\r\n    }\r\n \r\n    createLink(link) {\r\n        const point1 = this.#points.findIndex((value) => value.x === link[0].x && value.y === link[0].y && value.z === link[0].z);\r\n        const point2 = this.#points.findIndex((value) => value.x === link[1].x && value.y === link[1].y && value.z === link[1].z);\r\n        if (point1 > 0 && point2 > 0) { \r\n            insertToArray(this.#links,link);\r\n        } else throw new Error('One of the selected points doesn\\'t exist!');\r\n    }\r\n \r\n    removeLink(link) {\r\n        const index = this.#points.findIndex((array) => {\r\n            const point1 = array.find((value) => value.x === link[0].x && value.y === link[0].y && value.z === link[0].z);\r\n            const point2 = array.find((value) => value.x === link[1].x && value.y === link[1].y && value.z === link[1].z);\r\n            return point1 && point2;\r\n        });\r\n        if (index > 0) {\r\n            delete this.#links[index];\r\n        } else throw new Error('Can\\'t remove link that does not exist!');\r\n    }\r\n \r\n    /**\r\n     * @param {Object[]} bounds \r\n     */\r\n    set bounds(bounds) {\r\n        this.#bounds = bounds;\r\n    }\r\n \r\n    get bounds() {\r\n        return this.#bounds;\r\n    }\r\n \r\n    fillBounds(blockId,options = {stepBy:1,hollow:true,width:1}) {\r\n        const block = Mc.MinecraftBlockTypes.get(blockId);\r\n        const dimension = this.dimension;\r\n        getGridBlock(this.#bounds,options,(coord) => {\r\n            const location = new BlockLocation(coord.x,coord.y,coord.z);\r\n            dimension.getBlock(location).setType(block)\r\n        });\r\n    }\r\n \r\n    fillPoints(hollow) {\r\n \r\n    }\r\n \r\n    #pointMode = false;\r\n    #points = []\r\n    #links = []\r\n    #bounds = []\r\n}\r\n\r\n//# Types / Constants\r\n\r\n/**\r\n * @typedef SelectionBounds\r\n * @property {Vector3} max Maximal coordinate value for each axis the selection area spans.\r\n * @property {Vector3} min Minimal coordinate value for each axis the selection area spans.\r\n * @property {Vector3} center Average coordinate value for each axis the selection area spans.\r\n */\r\n"],"sourceRoot":"../../../../scripts/"}