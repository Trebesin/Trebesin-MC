{"version":3,"sources":["plugins/blocky_tools/workers/selection.js"],"names":[],"mappings":"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","file":"selection.js","sourcesContent":["//Base imports\nimport * as Mc from '@minecraft/server';\n//MC Modules\nimport { spawnBlockSelection, spawnBox, spawnLineBox } from '../../../mc_modules/particles';\n//JS Modules\nimport { getBlockOutline, getGridBlock } from '../../../js_modules/geometry';\nimport { insertToArray } from '../../../js_modules/array';\nimport { logMessage } from '../../debug/debug';\nimport * as VectorMath from '../../../js_modules/vectorMath';\nimport * as Blocks from '../../../mc_modules/blocks';\nimport { BlockHistoryUpdateTypes, editBlock } from '../../block_history/block_history';\n\n/**\n * @typedef Vector3\n * @property {number} x Value of the vector on the X axis.\n * @property {number} y Value of the vector on the Y axis.\n * @property {number} z Value of the vector on the Z axis.\n */\n\n/**\n * A selection class that the blocky tools plugin works with.\n */\nclass BaseSelection {\n    /**\n     * \n     * @param {Mc.Player} player The player associated with the slection.\n     * @param {Mc.Dimension} dimension The dimension the selection is contained within.\n     */\n    constructor(player) {\n        this.#player = player;\n        this.#dimension = player.dimension;\n        this.#empty = true;\n        this.maxCoordinates = {\n            x: null,\n            y: null,\n            z: null\n        };\n        this.minCoordinates = {\n            x: null,\n            y: null,\n            z: null\n        };\n        this.centerCoordinates = {\n            x: null,\n            y: null,\n            z: null\n        };\n    }\n\n    /**\n     * Returns the player associated with the selection.\n     * @returns {Mc.Player}\n     */\n    getPlayer() {\n        return this.#player;\n    }\n    /**\n     * Returns the dimension the selection is contained within.\n     * @returns {Mc.Dimension}\n     */\n    getDimension() {\n        return this.#dimension;\n    }\n    /**\n     * Returns if the selection is empty of any blocks. Selection isn't considered empty once it's defined enough to contain blocks in its volume.\n     * @returns {boolean}\n     */\n    isEmpty() {\n        return this.#empty;\n    }\n    /**\n     * Returns bounding information for the selection area.\n     * @returns {SelectionBounds}\n     */\n    getBounds() {\n        return {\n            min: VectorMath.copy(this.minCoordinates),\n            max: VectorMath.copy(this.maxCoordinates),\n            center: VectorMath.copy(this.centerCoordinates)\n        }\n    }\n\n    universalGetAllBlocks(callback) {\n        const bounds = this.getBounds();\n        for (let x = bounds.min.x;x <= bounds.max.x;x++) {\n            for (let y = bounds.min.y;y <= bounds.max.y;y++) {\n                for (let z = bounds.min.z;z <= bounds.max.z;z++) {\n                    const coordinates = {x,y,z};\n                    if (this.includes(coordinates)) callback(coordinates);\n                }\n            }\n        }\n    }\n\n    updateCenter() {\n        this.centerCoordinates = VectorMath.divide(VectorMath.sum(this.minCoordinates,this.maxCoordinates),2);\n    }\n\n    /**\n     * Flips all the blocks in the selection on the chosen axis.\n     * @param {'x'|'y'|'z'} axis Axis to flip.\n     */\n    flip(axis) {\n        const bounds = this.getBounds();\n        const dimension = this.getDimension();\n        const player = this.getPlayer();\n\n        const updatedBlocks = [];\n        this.getAllBlocks((blockLocation) => {\n            const block = dimension.getBlock(blockLocation);\n            const flippedBlockLocation = VectorMath.copy(blockLocation);\n            flippedBlockLocation[axis] = (bounds.center[axis]-(blockLocation[axis]-bounds.center[axis]));\n            updatedBlocks.push({\n                blockState: Blocks.copyBlockState(block),\n                blockLocation: flippedBlockLocation\n            })\n        })\n\n        for (const newBlock of updatedBlocks) {\n            const block = dimension.getBlock(newBlock.blockLocation);\n            editBlock(block,newBlock.blockState,{actorId:player.id,updateType:BlockHistoryUpdateTypes.blockyTools});\n        }\n        //center-(cordinate-center)\n    } \n\n    /** @protected */\n    maxCoordinates\n    /** @protected */\n    minCoordinates\n    /** @protected */\n    centerCoordinates\n    \n    #empty\n    #dimension\n    #player\n}\n \n/**\n * Selection with basic 2 corner definition.\n */\nexport class CornerSelection extends BaseSelection {\n    /**\n     * Sets corner of the selection.\n     * @param {number} index Index of the corner 0 or 1.\n     * @param {Vector3} [coord] Coordinates of the selection corner. If omitted resets the coord to null.\n     */\n    setCorner(index,coords = null) {\n        if (index !== 1 && index !== 0) throw new Error('Invalid Index');\n        this.#corners[index] = VectorMath.floor(coords);\n        this.updateMinMax();\n    }\n    /**\n     * Returns the corners that are currently selected to define the selection.\n     * @returns {Vector3[]}\n     */\n    getSelectionCorners() {\n        return [this.#corners[0],this.#corners[1]];\n    }\n    /**\n     * Returns all corners that exist on the selection.\n     * @returns {Vector3[]}\n     */\n    getAllCorners() {\n        const corners = this.#corners;\n        const notEquals = {\n            x: corners[0].x !== corners[1].x,\n            y: corners[0].y !== corners[1].y,\n            z: corners[0].z !== corners[1].z\n        };\n        const allCorners = [];\n        allCorners.push({x:corners[0].x,y:corners[0].y,z:corners[0].z});\n        if (notEquals.x && notEquals.z) allCorners.push({x:corners[1].x,y:corners[0].y,z:corners[0].z});\n        if (notEquals.z && notEquals.x && notEquals.y) allCorners.push({x:corners[0].x,y:corners[0].y,z:corners[1].z});\n        if (notEquals.y && (notEquals.x || notEquals.z)) allCorners.push({x:corners[1].x,y:corners[0].y,z:corners[1].z});\n        if (notEquals.y && (notEquals.x || notEquals.z)) allCorners.push({x:corners[0].x,y:corners[1].y,z:corners[0].z});\n        if (notEquals.z && notEquals.x && notEquals.y) allCorners.push({x:corners[1].x,y:corners[1].y,z:corners[0].z});\n        if (notEquals.x && notEquals.z) allCorners.push({x:corners[0].x,y:corners[1].y,z:corners[1].z});\n        if (!(!notEquals.x && !notEquals.y && !notEquals.z)) allCorners.push({x:corners[1].x,y:corners[1].y,z:corners[1].z});\n\n        return allCorners;\n    }\n    /**\n     * Returns if a block coordinates are contained within the selection area.\n     * @param {Vector3} coordinates\n     * @returns {boolean}\n     */\n    includes(coordinates) {\n        const max = this.maxCoordinates;\n        const min = this.minCoordinates;\n\n        return !(\n            coordinates.x < min.x || coordinates.x > max.x ||\n            coordinates.y < min.y || coordinates.y > max.y ||\n            coordinates.z < min.z || coordinates.z > max.z\n        )\n    }\n\n    /**\n     * Returns the number blocks in the selection.\n     * @returns \n     */\n    getArea() {\n        const lengths = VectorMath.sub(this.maxCoordinates,this.minCoordinates)\n        return Math.abs((lengths.x+1) * (lengths.y+1) * (lengths.z+1));\n    }\n\n    /**\n     * Calls the callback for every single block that is within the selection area.\n     * @arg {function} callback\n     * @returns \n     */\n    async getAllBlocks(callback) {\n        await getGridBlock(this.getSelectionCorners(),callback);\n    }\n\n    /**\n     * Calls the callback selected blocks in a specific shape defined in options.\n     * @arg {function} callback\n     * @returns \n     */\n    async getBlocks(callback,options) {\n        await getGridBlock(this.getSelectionCorners(),callback,options);\n    }\n\n    /**\n     * Calls the callback for every single block that is on the outline of the selection area.\n     * @arg {function} callback\n     * @returns \n     */\n    async getOutlineBlocks(callback,options) {\n        await getBlockOutline(this.getSelectionCorners(),callback,options);\n    }\n\n    updateMinMax() {\n        const corners = this.getSelectionCorners();\n        if (corners[0] == null && corners[1] == null) {\n            this.maxCoords = {x:null,y:null,z:null};\n            this.minCoords = {x:null,y:null,z:null};\n        } else if (corners[0] == null) {\n            const copyOfVector = VectorMath.copy(corners[1]);\n            this.maxCoords = copyOfVector;\n            this.minCoords = copyOfVector;\n        } else if (corners[1] == null) {\n            const copyOfVector = VectorMath.copy(corners[0]);\n            this.maxCoords = copyOfVector;\n            this.minCoords = copyOfVector;\n        } else {\n            const maxCoord = {};\n            const minCoord = {};\n            for (const axis of ['x','y','z']) {\n                if (corners[0][axis] > corners[1][axis]) {\n                    maxCoord[axis] = corners[0][axis];\n                    minCoord[axis] = corners[1][axis];\n                } else {\n                    maxCoord[axis] = corners[1][axis];\n                    minCoord[axis] = corners[0][axis];\n                }\n            }\n            this.maxCoordinates = maxCoord;\n            this.minCoordinates = minCoord;\n            this.updateCenter();\n        }\n    }\n\n    /**\n     * Creates particles for the outline of the selection in the world.\n     */\n    createParticleOutline(color = null,duration = null) {\n        const corners = this.getSelectionCorners();\n        if (corners[0] == null || corners[1] == null) return;\n\n        const molangVariables = new Mc.MolangVariableMap();\n        molangVariables.setColorRGBA(`variable.color`,{red:0,green:0,blue:1,alpha:0.85});\n        molangVariables.setSpeedAndDirection(`variable.time`,0.06,{x:0,y:0,z:0});\n        spawnLineBox('trebesin:line_flex2',corners,this.getDimension(),molangVariables);\n    }\n\n    /**\n     * Creates particles for the functional blocks of the selection in the world.\n     */\n    createParticleBlocks(color = null,duration = null) {\n        const molangVariables = new Mc.MolangVariableMap();\n        molangVariables.setColorRGBA('variable.color',{red:0,green:1,blue:0,alpha:1});\n        molangVariables.setSpeedAndDirection(`variable.time`,0.06,{x:0,y:0,z:0});\n        for (const cornerCoordinate of this.getSelectionCorners()) {\n            if (cornerCoordinate == null) continue;\n            spawnBox('trebesin:plane_box_',cornerCoordinate,this.getDimension(),molangVariables,0.005);\n        }\n    }\n    /**\n     * G\n     */\n    generatePlaneParticlePreview(callback) {\n        callback(location,axis,size)\n    }\n \n    #corners = [];\n    #definedCorners = 0;\n}\n \nclass ExtendedSelection {\n    /* setting selection */\n    addPoint(coords) {\n        insertToArray(this.#points,coords);\n    }\n \n    removePoint(coords) {\n        const index = this.#points.findIndex((value) => value.x === coords.x && value.y === coords.y && value.z === coords.z);\n        delete this.#points[index];\n    }\n \n    createLink(link) {\n        const point1 = this.#points.findIndex((value) => value.x === link[0].x && value.y === link[0].y && value.z === link[0].z);\n        const point2 = this.#points.findIndex((value) => value.x === link[1].x && value.y === link[1].y && value.z === link[1].z);\n        if (point1 > 0 && point2 > 0) { \n            insertToArray(this.#links,link);\n        } else throw new Error('One of the selected points doesn\\'t exist!');\n    }\n \n    removeLink(link) {\n        const index = this.#points.findIndex((array) => {\n            const point1 = array.find((value) => value.x === link[0].x && value.y === link[0].y && value.z === link[0].z);\n            const point2 = array.find((value) => value.x === link[1].x && value.y === link[1].y && value.z === link[1].z);\n            return point1 && point2;\n        });\n        if (index > 0) {\n            delete this.#links[index];\n        } else throw new Error('Can\\'t remove link that does not exist!');\n    }\n \n    /**\n     * @param {Object[]} bounds \n     */\n    set bounds(bounds) {\n        this.#bounds = bounds;\n    }\n \n    get bounds() {\n        return this.#bounds;\n    }\n \n    fillBounds(blockId,options = {stepBy:1,hollow:true,width:1}) {\n        const block = Mc.MinecraftBlockTypes.get(blockId);\n        const dimension = this.dimension;\n        getGridBlock(this.#bounds,options,(coord) => {\n            const location = new BlockLocation(coord.x,coord.y,coord.z);\n            dimension.getBlock(location).setType(block)\n        });\n    }\n \n    fillPoints(hollow) {\n \n    }\n \n    #pointMode = false;\n    #points = []\n    #links = []\n    #bounds = []\n}\n\n//# Types / Constants\n\n/**\n * @typedef SelectionBounds\n * @property {Vector3} max Maximal coordinate value for each axis the selection area spans.\n * @property {Vector3} min Minimal coordinate value for each axis the selection area spans.\n * @property {Vector3} center Average coordinate value for each axis the selection area spans.\n */\n"]}